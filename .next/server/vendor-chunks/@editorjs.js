"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@editorjs";
exports.ids = ["vendor-chunks/@editorjs"];
exports.modules = {

/***/ "(ssr)/./node_modules/@editorjs/editorjs/dist/editorjs.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@editorjs/editorjs/dist/editorjs.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Aa)\n/* harmony export */ });\n(function(){\"use strict\";try{if(typeof document<\"u\"){var e=document.createElement(\"style\");e.appendChild(document.createTextNode(\".ce-hint--align-start{text-align:left}.ce-hint--align-center{text-align:center}.ce-hint__description{opacity:.6;margin-top:3px}\")),document.head.appendChild(e)}}catch(t){console.error(\"vite-plugin-css-injected-by-js\",t)}})();\nvar Ce = typeof globalThis < \"u\" ? globalThis : typeof window < \"u\" ? window : typeof global < \"u\" ? global : typeof self < \"u\" ? self : {};\nfunction Ke(n) {\n  return n && n.__esModule && Object.prototype.hasOwnProperty.call(n, \"default\") ? n.default : n;\n}\nfunction Xn(n) {\n  if (n.__esModule)\n    return n;\n  var e = n.default;\n  if (typeof e == \"function\") {\n    var t = function o() {\n      return this instanceof o ? Reflect.construct(e, arguments, this.constructor) : e.apply(this, arguments);\n    };\n    t.prototype = e.prototype;\n  } else\n    t = {};\n  return Object.defineProperty(t, \"__esModule\", { value: !0 }), Object.keys(n).forEach(function(o) {\n    var i = Object.getOwnPropertyDescriptor(n, o);\n    Object.defineProperty(t, o, i.get ? i : {\n      enumerable: !0,\n      get: function() {\n        return n[o];\n      }\n    });\n  }), t;\n}\nfunction ot() {\n}\nObject.assign(ot, {\n  default: ot,\n  register: ot,\n  revert: function() {\n  },\n  __esModule: !0\n});\nElement.prototype.matches || (Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function(n) {\n  const e = (this.document || this.ownerDocument).querySelectorAll(n);\n  let t = e.length;\n  for (; --t >= 0 && e.item(t) !== this; )\n    ;\n  return t > -1;\n});\nElement.prototype.closest || (Element.prototype.closest = function(n) {\n  let e = this;\n  if (!document.documentElement.contains(e))\n    return null;\n  do {\n    if (e.matches(n))\n      return e;\n    e = e.parentElement || e.parentNode;\n  } while (e !== null);\n  return null;\n});\nElement.prototype.prepend || (Element.prototype.prepend = function(e) {\n  const t = document.createDocumentFragment();\n  Array.isArray(e) || (e = [e]), e.forEach((o) => {\n    const i = o instanceof Node;\n    t.appendChild(i ? o : document.createTextNode(o));\n  }), this.insertBefore(t, this.firstChild);\n});\nElement.prototype.scrollIntoViewIfNeeded || (Element.prototype.scrollIntoViewIfNeeded = function(n) {\n  n = arguments.length === 0 ? !0 : !!n;\n  const e = this.parentNode, t = window.getComputedStyle(e, null), o = parseInt(t.getPropertyValue(\"border-top-width\")), i = parseInt(t.getPropertyValue(\"border-left-width\")), s = this.offsetTop - e.offsetTop < e.scrollTop, r = this.offsetTop - e.offsetTop + this.clientHeight - o > e.scrollTop + e.clientHeight, a = this.offsetLeft - e.offsetLeft < e.scrollLeft, l = this.offsetLeft - e.offsetLeft + this.clientWidth - i > e.scrollLeft + e.clientWidth, c = s && !r;\n  (s || r) && n && (e.scrollTop = this.offsetTop - e.offsetTop - e.clientHeight / 2 - o + this.clientHeight / 2), (a || l) && n && (e.scrollLeft = this.offsetLeft - e.offsetLeft - e.clientWidth / 2 - i + this.clientWidth / 2), (s || r || a || l) && !n && this.scrollIntoView(c);\n});\nwindow.requestIdleCallback = window.requestIdleCallback || function(n) {\n  const e = Date.now();\n  return setTimeout(function() {\n    n({\n      didTimeout: !1,\n      timeRemaining: function() {\n        return Math.max(0, 50 - (Date.now() - e));\n      }\n    });\n  }, 1);\n};\nwindow.cancelIdleCallback = window.cancelIdleCallback || function(n) {\n  clearTimeout(n);\n};\nlet Vn = (n = 21) => crypto.getRandomValues(new Uint8Array(n)).reduce((e, t) => (t &= 63, t < 36 ? e += t.toString(36) : t < 62 ? e += (t - 26).toString(36).toUpperCase() : t > 62 ? e += \"-\" : e += \"_\", e), \"\");\nvar Lo = /* @__PURE__ */ ((n) => (n.VERBOSE = \"VERBOSE\", n.INFO = \"INFO\", n.WARN = \"WARN\", n.ERROR = \"ERROR\", n))(Lo || {});\nconst y = {\n  BACKSPACE: 8,\n  TAB: 9,\n  ENTER: 13,\n  SHIFT: 16,\n  CTRL: 17,\n  ALT: 18,\n  ESC: 27,\n  SPACE: 32,\n  LEFT: 37,\n  UP: 38,\n  DOWN: 40,\n  RIGHT: 39,\n  DELETE: 46,\n  META: 91,\n  SLASH: 191\n}, qn = {\n  LEFT: 0,\n  WHEEL: 1,\n  RIGHT: 2,\n  BACKWARD: 3,\n  FORWARD: 4\n};\nfunction Ie(n, e, t = \"log\", o, i = \"color: inherit\") {\n  if (!(\"console\" in window) || !window.console[t])\n    return;\n  const s = [\"info\", \"log\", \"warn\", \"error\"].includes(t), r = [];\n  switch (Ie.logLevel) {\n    case \"ERROR\":\n      if (t !== \"error\")\n        return;\n      break;\n    case \"WARN\":\n      if (![\"error\", \"warn\"].includes(t))\n        return;\n      break;\n    case \"INFO\":\n      if (!s || n)\n        return;\n      break;\n  }\n  o && r.push(o);\n  const a = \"Editor.js 2.31.0-rc.7\", l = `line-height: 1em;\n            color: #006FEA;\n            display: inline-block;\n            font-size: 11px;\n            line-height: 1em;\n            background-color: #fff;\n            padding: 4px 9px;\n            border-radius: 30px;\n            border: 1px solid rgba(56, 138, 229, 0.16);\n            margin: 4px 5px 4px 0;`;\n  n && (s ? (r.unshift(l, i), e = `%c${a}%c ${e}`) : e = `( ${a} )${e}`);\n  try {\n    s ? o ? console[t](`${e} %o`, ...r) : console[t](e, ...r) : console[t](e);\n  } catch {\n  }\n}\nIe.logLevel = \"VERBOSE\";\nfunction Zn(n) {\n  Ie.logLevel = n;\n}\nconst S = Ie.bind(window, !1), X = Ie.bind(window, !0);\nfunction le(n) {\n  return Object.prototype.toString.call(n).match(/\\s([a-zA-Z]+)/)[1].toLowerCase();\n}\nfunction A(n) {\n  return le(n) === \"function\" || le(n) === \"asyncfunction\";\n}\nfunction D(n) {\n  return le(n) === \"object\";\n}\nfunction te(n) {\n  return le(n) === \"string\";\n}\nfunction Gn(n) {\n  return le(n) === \"boolean\";\n}\nfunction yo(n) {\n  return le(n) === \"number\";\n}\nfunction wo(n) {\n  return le(n) === \"undefined\";\n}\nfunction V(n) {\n  return n ? Object.keys(n).length === 0 && n.constructor === Object : !0;\n}\nfunction Po(n) {\n  return n > 47 && n < 58 || // number keys\n  n === 32 || n === 13 || // Space bar & return key(s)\n  n === 229 || // processing key input for certain languages — Chinese, Japanese, etc.\n  n > 64 && n < 91 || // letter keys\n  n > 95 && n < 112 || // Numpad keys\n  n > 185 && n < 193 || // ;=,-./` (in order)\n  n > 218 && n < 223;\n}\nasync function Qn(n, e = () => {\n}, t = () => {\n}) {\n  async function o(i, s, r) {\n    try {\n      await i.function(i.data), await s(wo(i.data) ? {} : i.data);\n    } catch {\n      r(wo(i.data) ? {} : i.data);\n    }\n  }\n  return n.reduce(async (i, s) => (await i, o(s, e, t)), Promise.resolve());\n}\nfunction No(n) {\n  return Array.prototype.slice.call(n);\n}\nfunction Fe(n, e) {\n  return function() {\n    const t = this, o = arguments;\n    window.setTimeout(() => n.apply(t, o), e);\n  };\n}\nfunction Jn(n) {\n  return n.name.split(\".\").pop();\n}\nfunction ei(n) {\n  return /^[-\\w]+\\/([-+\\w]+|\\*)$/.test(n);\n}\nfunction Eo(n, e, t) {\n  let o;\n  return (...i) => {\n    const s = this, r = () => {\n      o = null, t || n.apply(s, i);\n    }, a = t && !o;\n    window.clearTimeout(o), o = window.setTimeout(r, e), a && n.apply(s, i);\n  };\n}\nfunction dt(n, e, t = void 0) {\n  let o, i, s, r = null, a = 0;\n  t || (t = {});\n  const l = function() {\n    a = t.leading === !1 ? 0 : Date.now(), r = null, s = n.apply(o, i), r || (o = i = null);\n  };\n  return function() {\n    const c = Date.now();\n    !a && t.leading === !1 && (a = c);\n    const u = e - (c - a);\n    return o = this, i = arguments, u <= 0 || u > e ? (r && (clearTimeout(r), r = null), a = c, s = n.apply(o, i), r || (o = i = null)) : !r && t.trailing !== !1 && (r = setTimeout(l, u)), s;\n  };\n}\nfunction ti() {\n  const n = {\n    win: !1,\n    mac: !1,\n    x11: !1,\n    linux: !1\n  }, e = Object.keys(n).find((t) => window.navigator.appVersion.toLowerCase().indexOf(t) !== -1);\n  return e && (n[e] = !0), n;\n}\nfunction je(n) {\n  return n[0].toUpperCase() + n.slice(1);\n}\nfunction ut(n, ...e) {\n  if (!e.length)\n    return n;\n  const t = e.shift();\n  if (D(n) && D(t))\n    for (const o in t)\n      D(t[o]) ? (n[o] || Object.assign(n, { [o]: {} }), ut(n[o], t[o])) : Object.assign(n, { [o]: t[o] });\n  return ut(n, ...e);\n}\nfunction vt(n) {\n  const e = ti();\n  return n = n.replace(/shift/gi, \"⇧\").replace(/backspace/gi, \"⌫\").replace(/enter/gi, \"⏎\").replace(/up/gi, \"↑\").replace(/left/gi, \"→\").replace(/down/gi, \"↓\").replace(/right/gi, \"←\").replace(/escape/gi, \"⎋\").replace(/insert/gi, \"Ins\").replace(/delete/gi, \"␡\").replace(/\\+/gi, \" + \"), e.mac ? n = n.replace(/ctrl|cmd/gi, \"⌘\").replace(/alt/gi, \"⌥\") : n = n.replace(/cmd/gi, \"Ctrl\").replace(/windows/gi, \"WIN\"), n;\n}\nfunction oi(n) {\n  try {\n    return new URL(n).href;\n  } catch {\n  }\n  return n.substring(0, 2) === \"//\" ? window.location.protocol + n : window.location.origin + n;\n}\nfunction ni() {\n  return Vn(10);\n}\nfunction ii(n) {\n  window.open(n, \"_blank\");\n}\nfunction si(n = \"\") {\n  return `${n}${Math.floor(Math.random() * 1e8).toString(16)}`;\n}\nfunction ht(n, e, t) {\n  const o = `«${e}» is deprecated and will be removed in the next major release. Please use the «${t}» instead.`;\n  n && X(o, \"warn\");\n}\nfunction me(n, e, t) {\n  const o = t.value ? \"value\" : \"get\", i = t[o], s = `#${e}Cache`;\n  if (t[o] = function(...r) {\n    return this[s] === void 0 && (this[s] = i.apply(this, ...r)), this[s];\n  }, o === \"get\" && t.set) {\n    const r = t.set;\n    t.set = function(a) {\n      delete n[s], r.apply(this, a);\n    };\n  }\n  return t;\n}\nconst Ro = 650;\nfunction be() {\n  return window.matchMedia(`(max-width: ${Ro}px)`).matches;\n}\nconst pt = typeof window < \"u\" && window.navigator && window.navigator.platform && (/iP(ad|hone|od)/.test(window.navigator.platform) || window.navigator.platform === \"MacIntel\" && window.navigator.maxTouchPoints > 1);\nfunction ri(n, e) {\n  const t = Array.isArray(n) || D(n), o = Array.isArray(e) || D(e);\n  return t || o ? JSON.stringify(n) === JSON.stringify(e) : n === e;\n}\nclass d {\n  /**\n   * Check if passed tag has no closed tag\n   *\n   * @param {HTMLElement} tag - element to check\n   * @returns {boolean}\n   */\n  static isSingleTag(e) {\n    return e.tagName && [\n      \"AREA\",\n      \"BASE\",\n      \"BR\",\n      \"COL\",\n      \"COMMAND\",\n      \"EMBED\",\n      \"HR\",\n      \"IMG\",\n      \"INPUT\",\n      \"KEYGEN\",\n      \"LINK\",\n      \"META\",\n      \"PARAM\",\n      \"SOURCE\",\n      \"TRACK\",\n      \"WBR\"\n    ].includes(e.tagName);\n  }\n  /**\n   * Check if element is BR or WBR\n   *\n   * @param {HTMLElement} element - element to check\n   * @returns {boolean}\n   */\n  static isLineBreakTag(e) {\n    return e && e.tagName && [\n      \"BR\",\n      \"WBR\"\n    ].includes(e.tagName);\n  }\n  /**\n   * Helper for making Elements with class name and attributes\n   *\n   * @param  {string} tagName - new Element tag name\n   * @param  {string[]|string} [classNames] - list or name of CSS class name(s)\n   * @param  {object} [attributes] - any attributes\n   * @returns {HTMLElement}\n   */\n  static make(e, t = null, o = {}) {\n    const i = document.createElement(e);\n    if (Array.isArray(t)) {\n      const s = t.filter((r) => r !== void 0);\n      i.classList.add(...s);\n    } else\n      t && i.classList.add(t);\n    for (const s in o)\n      Object.prototype.hasOwnProperty.call(o, s) && (i[s] = o[s]);\n    return i;\n  }\n  /**\n   * Creates Text Node with the passed content\n   *\n   * @param {string} content - text content\n   * @returns {Text}\n   */\n  static text(e) {\n    return document.createTextNode(e);\n  }\n  /**\n   * Append one or several elements to the parent\n   *\n   * @param  {Element|DocumentFragment} parent - where to append\n   * @param  {Element|Element[]|DocumentFragment|Text|Text[]} elements - element or elements list\n   */\n  static append(e, t) {\n    Array.isArray(t) ? t.forEach((o) => e.appendChild(o)) : e.appendChild(t);\n  }\n  /**\n   * Append element or a couple to the beginning of the parent elements\n   *\n   * @param {Element} parent - where to append\n   * @param {Element|Element[]} elements - element or elements list\n   */\n  static prepend(e, t) {\n    Array.isArray(t) ? (t = t.reverse(), t.forEach((o) => e.prepend(o))) : e.prepend(t);\n  }\n  /**\n   * Swap two elements in parent\n   *\n   * @param {HTMLElement} el1 - from\n   * @param {HTMLElement} el2 - to\n   * @deprecated\n   */\n  static swap(e, t) {\n    const o = document.createElement(\"div\"), i = e.parentNode;\n    i.insertBefore(o, e), i.insertBefore(e, t), i.insertBefore(t, o), i.removeChild(o);\n  }\n  /**\n   * Selector Decorator\n   *\n   * Returns first match\n   *\n   * @param {Element} el - element we searching inside. Default - DOM Document\n   * @param {string} selector - searching string\n   * @returns {Element}\n   */\n  static find(e = document, t) {\n    return e.querySelector(t);\n  }\n  /**\n   * Get Element by Id\n   *\n   * @param {string} id - id to find\n   * @returns {HTMLElement | null}\n   */\n  static get(e) {\n    return document.getElementById(e);\n  }\n  /**\n   * Selector Decorator.\n   *\n   * Returns all matches\n   *\n   * @param {Element|Document} el - element we searching inside. Default - DOM Document\n   * @param {string} selector - searching string\n   * @returns {NodeList}\n   */\n  static findAll(e = document, t) {\n    return e.querySelectorAll(t);\n  }\n  /**\n   * Returns CSS selector for all text inputs\n   */\n  static get allInputsSelector() {\n    return \"[contenteditable=true], textarea, input:not([type]), \" + [\"text\", \"password\", \"email\", \"number\", \"search\", \"tel\", \"url\"].map((t) => `input[type=\"${t}\"]`).join(\", \");\n  }\n  /**\n   * Find all contenteditable, textarea and editable input elements passed holder contains\n   *\n   * @param holder - element where to find inputs\n   */\n  static findAllInputs(e) {\n    return No(e.querySelectorAll(d.allInputsSelector)).reduce((t, o) => d.isNativeInput(o) || d.containsOnlyInlineElements(o) ? [...t, o] : [...t, ...d.getDeepestBlockElements(o)], []);\n  }\n  /**\n   * Search for deepest node which is Leaf.\n   * Leaf is the vertex that doesn't have any child nodes\n   *\n   * @description Method recursively goes throw the all Node until it finds the Leaf\n   * @param {Node} node - root Node. From this vertex we start Deep-first search\n   *                      {@link https://en.wikipedia.org/wiki/Depth-first_search}\n   * @param {boolean} [atLast] - find last text node\n   * @returns - it can be text Node or Element Node, so that caret will able to work with it\n   *            Can return null if node is Document or DocumentFragment, or node is not attached to the DOM\n   */\n  static getDeepestNode(e, t = !1) {\n    const o = t ? \"lastChild\" : \"firstChild\", i = t ? \"previousSibling\" : \"nextSibling\";\n    if (e && e.nodeType === Node.ELEMENT_NODE && e[o]) {\n      let s = e[o];\n      if (d.isSingleTag(s) && !d.isNativeInput(s) && !d.isLineBreakTag(s))\n        if (s[i])\n          s = s[i];\n        else if (s.parentNode[i])\n          s = s.parentNode[i];\n        else\n          return s.parentNode;\n      return this.getDeepestNode(s, t);\n    }\n    return e;\n  }\n  /**\n   * Check if object is DOM node\n   *\n   * @param {*} node - object to check\n   * @returns {boolean}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static isElement(e) {\n    return yo(e) ? !1 : e && e.nodeType && e.nodeType === Node.ELEMENT_NODE;\n  }\n  /**\n   * Check if object is DocumentFragment node\n   *\n   * @param {object} node - object to check\n   * @returns {boolean}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static isFragment(e) {\n    return yo(e) ? !1 : e && e.nodeType && e.nodeType === Node.DOCUMENT_FRAGMENT_NODE;\n  }\n  /**\n   * Check if passed element is contenteditable\n   *\n   * @param {HTMLElement} element - html element to check\n   * @returns {boolean}\n   */\n  static isContentEditable(e) {\n    return e.contentEditable === \"true\";\n  }\n  /**\n   * Checks target if it is native input\n   *\n   * @param {*} target - HTML element or string\n   * @returns {boolean}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static isNativeInput(e) {\n    const t = [\n      \"INPUT\",\n      \"TEXTAREA\"\n    ];\n    return e && e.tagName ? t.includes(e.tagName) : !1;\n  }\n  /**\n   * Checks if we can set caret\n   *\n   * @param {HTMLElement} target - target to check\n   * @returns {boolean}\n   */\n  static canSetCaret(e) {\n    let t = !0;\n    if (d.isNativeInput(e))\n      switch (e.type) {\n        case \"file\":\n        case \"checkbox\":\n        case \"radio\":\n        case \"hidden\":\n        case \"submit\":\n        case \"button\":\n        case \"image\":\n        case \"reset\":\n          t = !1;\n          break;\n      }\n    else\n      t = d.isContentEditable(e);\n    return t;\n  }\n  /**\n   * Checks node if it is empty\n   *\n   * @description Method checks simple Node without any childs for emptiness\n   * If you have Node with 2 or more children id depth, you better use {@link Dom#isEmpty} method\n   * @param {Node} node - node to check\n   * @param {string} [ignoreChars] - char or substring to treat as empty\n   * @returns {boolean} true if it is empty\n   */\n  static isNodeEmpty(e, t) {\n    let o;\n    return this.isSingleTag(e) && !this.isLineBreakTag(e) ? !1 : (this.isElement(e) && this.isNativeInput(e) ? o = e.value : o = e.textContent.replace(\"​\", \"\"), t && (o = o.replace(new RegExp(t, \"g\"), \"\")), o.length === 0);\n  }\n  /**\n   * checks node if it is doesn't have any child nodes\n   *\n   * @param {Node} node - node to check\n   * @returns {boolean}\n   */\n  static isLeaf(e) {\n    return e ? e.childNodes.length === 0 : !1;\n  }\n  /**\n   * breadth-first search (BFS)\n   * {@link https://en.wikipedia.org/wiki/Breadth-first_search}\n   *\n   * @description Pushes to stack all DOM leafs and checks for emptiness\n   * @param {Node} node - node to check\n   * @param {string} [ignoreChars] - char or substring to treat as empty\n   * @returns {boolean}\n   */\n  static isEmpty(e, t) {\n    const o = [e];\n    for (; o.length > 0; )\n      if (e = o.shift(), !!e) {\n        if (this.isLeaf(e) && !this.isNodeEmpty(e, t))\n          return !1;\n        e.childNodes && o.push(...Array.from(e.childNodes));\n      }\n    return !0;\n  }\n  /**\n   * Check if string contains html elements\n   *\n   * @param {string} str - string to check\n   * @returns {boolean}\n   */\n  static isHTMLString(e) {\n    const t = d.make(\"div\");\n    return t.innerHTML = e, t.childElementCount > 0;\n  }\n  /**\n   * Return length of node`s text content\n   *\n   * @param {Node} node - node with content\n   * @returns {number}\n   */\n  static getContentLength(e) {\n    return d.isNativeInput(e) ? e.value.length : e.nodeType === Node.TEXT_NODE ? e.length : e.textContent.length;\n  }\n  /**\n   * Return array of names of block html elements\n   *\n   * @returns {string[]}\n   */\n  static get blockElements() {\n    return [\n      \"address\",\n      \"article\",\n      \"aside\",\n      \"blockquote\",\n      \"canvas\",\n      \"div\",\n      \"dl\",\n      \"dt\",\n      \"fieldset\",\n      \"figcaption\",\n      \"figure\",\n      \"footer\",\n      \"form\",\n      \"h1\",\n      \"h2\",\n      \"h3\",\n      \"h4\",\n      \"h5\",\n      \"h6\",\n      \"header\",\n      \"hgroup\",\n      \"hr\",\n      \"li\",\n      \"main\",\n      \"nav\",\n      \"noscript\",\n      \"ol\",\n      \"output\",\n      \"p\",\n      \"pre\",\n      \"ruby\",\n      \"section\",\n      \"table\",\n      \"tbody\",\n      \"thead\",\n      \"tr\",\n      \"tfoot\",\n      \"ul\",\n      \"video\"\n    ];\n  }\n  /**\n   * Check if passed content includes only inline elements\n   *\n   * @param {string|HTMLElement} data - element or html string\n   * @returns {boolean}\n   */\n  static containsOnlyInlineElements(e) {\n    let t;\n    te(e) ? (t = document.createElement(\"div\"), t.innerHTML = e) : t = e;\n    const o = (i) => !d.blockElements.includes(i.tagName.toLowerCase()) && Array.from(i.children).every(o);\n    return Array.from(t.children).every(o);\n  }\n  /**\n   * Find and return all block elements in the passed parent (including subtree)\n   *\n   * @param {HTMLElement} parent - root element\n   * @returns {HTMLElement[]}\n   */\n  static getDeepestBlockElements(e) {\n    return d.containsOnlyInlineElements(e) ? [e] : Array.from(e.children).reduce((t, o) => [...t, ...d.getDeepestBlockElements(o)], []);\n  }\n  /**\n   * Helper for get holder from {string} or return HTMLElement\n   *\n   * @param {string | HTMLElement} element - holder's id or holder's HTML Element\n   * @returns {HTMLElement}\n   */\n  static getHolder(e) {\n    return te(e) ? document.getElementById(e) : e;\n  }\n  /**\n   * Returns true if element is anchor (is A tag)\n   *\n   * @param {Element} element - element to check\n   * @returns {boolean}\n   */\n  static isAnchor(e) {\n    return e.tagName.toLowerCase() === \"a\";\n  }\n  /**\n   * Return element's offset related to the document\n   *\n   * @todo handle case when editor initialized in scrollable popup\n   * @param el - element to compute offset\n   */\n  static offset(e) {\n    const t = e.getBoundingClientRect(), o = window.pageXOffset || document.documentElement.scrollLeft, i = window.pageYOffset || document.documentElement.scrollTop, s = t.top + i, r = t.left + o;\n    return {\n      top: s,\n      left: r,\n      bottom: s + t.height,\n      right: r + t.width\n    };\n  }\n}\nfunction ai(n) {\n  return !/[^\\t\\n\\r ]/.test(n);\n}\nfunction li(n) {\n  const e = window.getComputedStyle(n), t = parseFloat(e.fontSize), o = parseFloat(e.lineHeight) || t * 1.2, i = parseFloat(e.paddingTop), s = parseFloat(e.borderTopWidth), r = parseFloat(e.marginTop), a = t * 0.8, l = (o - t) / 2;\n  return r + s + i + l + a;\n}\nfunction Do(n) {\n  n.dataset.empty = d.isEmpty(n) ? \"true\" : \"false\";\n}\nconst ci = {\n  blockTunes: {\n    toggler: {\n      \"Click to tune\": \"\",\n      \"or drag to move\": \"\"\n    }\n  },\n  inlineToolbar: {\n    converter: {\n      \"Convert to\": \"\"\n    }\n  },\n  toolbar: {\n    toolbox: {\n      Add: \"\"\n    }\n  },\n  popover: {\n    Filter: \"\",\n    \"Nothing found\": \"\",\n    \"Convert to\": \"\"\n  }\n}, di = {\n  Text: \"\",\n  Link: \"\",\n  Bold: \"\",\n  Italic: \"\"\n}, ui = {\n  link: {\n    \"Add a link\": \"\"\n  },\n  stub: {\n    \"The block can not be displayed correctly.\": \"\"\n  }\n}, hi = {\n  delete: {\n    Delete: \"\",\n    \"Click to delete\": \"\"\n  },\n  moveUp: {\n    \"Move up\": \"\"\n  },\n  moveDown: {\n    \"Move down\": \"\"\n  }\n}, Fo = {\n  ui: ci,\n  toolNames: di,\n  tools: ui,\n  blockTunes: hi\n}, jo = class he {\n  /**\n   * Type-safe translation for internal UI texts:\n   * Perform translation of the string by namespace and a key\n   *\n   * @example I18n.ui(I18nInternalNS.ui.blockTunes.toggler, 'Click to tune')\n   * @param internalNamespace - path to translated string in dictionary\n   * @param dictKey - dictionary key. Better to use default locale original text\n   */\n  static ui(e, t) {\n    return he._t(e, t);\n  }\n  /**\n   * Translate for external strings that is not presented in default dictionary.\n   * For example, for user-specified tool names\n   *\n   * @param namespace - path to translated string in dictionary\n   * @param dictKey - dictionary key. Better to use default locale original text\n   */\n  static t(e, t) {\n    return he._t(e, t);\n  }\n  /**\n   * Adjust module for using external dictionary\n   *\n   * @param dictionary - new messages list to override default\n   */\n  static setDictionary(e) {\n    he.currentDictionary = e;\n  }\n  /**\n   * Perform translation both for internal and external namespaces\n   * If there is no translation found, returns passed key as a translated message\n   *\n   * @param namespace - path to translated string in dictionary\n   * @param dictKey - dictionary key. Better to use default locale original text\n   */\n  static _t(e, t) {\n    const o = he.getNamespace(e);\n    return !o || !o[t] ? t : o[t];\n  }\n  /**\n   * Find messages section by namespace path\n   *\n   * @param namespace - path to section\n   */\n  static getNamespace(e) {\n    return e.split(\".\").reduce((o, i) => !o || !Object.keys(o).length ? {} : o[i], he.currentDictionary);\n  }\n};\njo.currentDictionary = Fo;\nlet z = jo;\nclass Ho extends Error {\n}\nclass Oe {\n  constructor() {\n    this.subscribers = {};\n  }\n  /**\n   * Subscribe any event on callback\n   *\n   * @param eventName - event name\n   * @param callback - subscriber\n   */\n  on(e, t) {\n    e in this.subscribers || (this.subscribers[e] = []), this.subscribers[e].push(t);\n  }\n  /**\n   * Subscribe any event on callback. Callback will be called once and be removed from subscribers array after call.\n   *\n   * @param eventName - event name\n   * @param callback - subscriber\n   */\n  once(e, t) {\n    e in this.subscribers || (this.subscribers[e] = []);\n    const o = (i) => {\n      const s = t(i), r = this.subscribers[e].indexOf(o);\n      return r !== -1 && this.subscribers[e].splice(r, 1), s;\n    };\n    this.subscribers[e].push(o);\n  }\n  /**\n   * Emit callbacks with passed data\n   *\n   * @param eventName - event name\n   * @param data - subscribers get this data when they were fired\n   */\n  emit(e, t) {\n    V(this.subscribers) || !this.subscribers[e] || this.subscribers[e].reduce((o, i) => {\n      const s = i(o);\n      return s !== void 0 ? s : o;\n    }, t);\n  }\n  /**\n   * Unsubscribe callback from event\n   *\n   * @param eventName - event name\n   * @param callback - event handler\n   */\n  off(e, t) {\n    if (this.subscribers[e] === void 0) {\n      console.warn(`EventDispatcher .off(): there is no subscribers for event \"${e.toString()}\". Probably, .off() called before .on()`);\n      return;\n    }\n    for (let o = 0; o < this.subscribers[e].length; o++)\n      if (this.subscribers[e][o] === t) {\n        delete this.subscribers[e][o];\n        break;\n      }\n  }\n  /**\n   * Destroyer\n   * clears subscribers list\n   */\n  destroy() {\n    this.subscribers = {};\n  }\n}\nfunction J(n) {\n  Object.setPrototypeOf(this, {\n    /**\n     * Block id\n     *\n     * @returns {string}\n     */\n    get id() {\n      return n.id;\n    },\n    /**\n     * Tool name\n     *\n     * @returns {string}\n     */\n    get name() {\n      return n.name;\n    },\n    /**\n     * Tool config passed on Editor's initialization\n     *\n     * @returns {ToolConfig}\n     */\n    get config() {\n      return n.config;\n    },\n    /**\n     * .ce-block element, that wraps plugin contents\n     *\n     * @returns {HTMLElement}\n     */\n    get holder() {\n      return n.holder;\n    },\n    /**\n     * True if Block content is empty\n     *\n     * @returns {boolean}\n     */\n    get isEmpty() {\n      return n.isEmpty;\n    },\n    /**\n     * True if Block is selected with Cross-Block selection\n     *\n     * @returns {boolean}\n     */\n    get selected() {\n      return n.selected;\n    },\n    /**\n     * Set Block's stretch state\n     *\n     * @param {boolean} state — state to set\n     */\n    set stretched(t) {\n      n.stretched = t;\n    },\n    /**\n     * True if Block is stretched\n     *\n     * @returns {boolean}\n     */\n    get stretched() {\n      return n.stretched;\n    },\n    /**\n     * True if Block has inputs to be focused\n     */\n    get focusable() {\n      return n.focusable;\n    },\n    /**\n     * Call Tool method with errors handler under-the-hood\n     *\n     * @param {string} methodName - method to call\n     * @param {object} param - object with parameters\n     * @returns {unknown}\n     */\n    call(t, o) {\n      return n.call(t, o);\n    },\n    /**\n     * Save Block content\n     *\n     * @returns {Promise<void|SavedData>}\n     */\n    save() {\n      return n.save();\n    },\n    /**\n     * Validate Block data\n     *\n     * @param {BlockToolData} data - data to validate\n     * @returns {Promise<boolean>}\n     */\n    validate(t) {\n      return n.validate(t);\n    },\n    /**\n     * Allows to say Editor that Block was changed. Used to manually trigger Editor's 'onChange' callback\n     * Can be useful for block changes invisible for editor core.\n     */\n    dispatchChange() {\n      n.dispatchChange();\n    },\n    /**\n     * Tool could specify several entries to be displayed at the Toolbox (for example, \"Heading 1\", \"Heading 2\", \"Heading 3\")\n     * This method returns the entry that is related to the Block (depended on the Block data)\n     */\n    getActiveToolboxEntry() {\n      return n.getActiveToolboxEntry();\n    }\n  });\n}\nclass _e {\n  constructor() {\n    this.allListeners = [];\n  }\n  /**\n   * Assigns event listener on element and returns unique identifier\n   *\n   * @param {EventTarget} element - DOM element that needs to be listened\n   * @param {string} eventType - event type\n   * @param {Function} handler - method that will be fired on event\n   * @param {boolean|AddEventListenerOptions} options - useCapture or {capture, passive, once}\n   */\n  on(e, t, o, i = !1) {\n    const s = si(\"l\"), r = {\n      id: s,\n      element: e,\n      eventType: t,\n      handler: o,\n      options: i\n    };\n    if (!this.findOne(e, t, o))\n      return this.allListeners.push(r), e.addEventListener(t, o, i), s;\n  }\n  /**\n   * Removes event listener from element\n   *\n   * @param {EventTarget} element - DOM element that we removing listener\n   * @param {string} eventType - event type\n   * @param {Function} handler - remove handler, if element listens several handlers on the same event type\n   * @param {boolean|AddEventListenerOptions} options - useCapture or {capture, passive, once}\n   */\n  off(e, t, o, i) {\n    const s = this.findAll(e, t, o);\n    s.forEach((r, a) => {\n      const l = this.allListeners.indexOf(s[a]);\n      l > -1 && (this.allListeners.splice(l, 1), r.element.removeEventListener(r.eventType, r.handler, r.options));\n    });\n  }\n  /**\n   * Removes listener by id\n   *\n   * @param {string} id - listener identifier\n   */\n  offById(e) {\n    const t = this.findById(e);\n    t && t.element.removeEventListener(t.eventType, t.handler, t.options);\n  }\n  /**\n   * Finds and returns first listener by passed params\n   *\n   * @param {EventTarget} element - event target\n   * @param {string} [eventType] - event type\n   * @param {Function} [handler] - event handler\n   * @returns {ListenerData|null}\n   */\n  findOne(e, t, o) {\n    const i = this.findAll(e, t, o);\n    return i.length > 0 ? i[0] : null;\n  }\n  /**\n   * Return all stored listeners by passed params\n   *\n   * @param {EventTarget} element - event target\n   * @param {string} eventType - event type\n   * @param {Function} handler - event handler\n   * @returns {ListenerData[]}\n   */\n  findAll(e, t, o) {\n    let i;\n    const s = e ? this.findByEventTarget(e) : [];\n    return e && t && o ? i = s.filter((r) => r.eventType === t && r.handler === o) : e && t ? i = s.filter((r) => r.eventType === t) : i = s, i;\n  }\n  /**\n   * Removes all listeners\n   */\n  removeAll() {\n    this.allListeners.map((e) => {\n      e.element.removeEventListener(e.eventType, e.handler, e.options);\n    }), this.allListeners = [];\n  }\n  /**\n   * Module cleanup on destruction\n   */\n  destroy() {\n    this.removeAll();\n  }\n  /**\n   * Search method: looks for listener by passed element\n   *\n   * @param {EventTarget} element - searching element\n   * @returns {Array} listeners that found on element\n   */\n  findByEventTarget(e) {\n    return this.allListeners.filter((t) => {\n      if (t.element === e)\n        return t;\n    });\n  }\n  /**\n   * Search method: looks for listener by passed event type\n   *\n   * @param {string} eventType - event type\n   * @returns {ListenerData[]} listeners that found on element\n   */\n  findByType(e) {\n    return this.allListeners.filter((t) => {\n      if (t.eventType === e)\n        return t;\n    });\n  }\n  /**\n   * Search method: looks for listener by passed handler\n   *\n   * @param {Function} handler - event handler\n   * @returns {ListenerData[]} listeners that found on element\n   */\n  findByHandler(e) {\n    return this.allListeners.filter((t) => {\n      if (t.handler === e)\n        return t;\n    });\n  }\n  /**\n   * Returns listener data found by id\n   *\n   * @param {string} id - listener identifier\n   * @returns {ListenerData}\n   */\n  findById(e) {\n    return this.allListeners.find((t) => t.id === e);\n  }\n}\nclass E {\n  /**\n   * @class\n   * @param options - Module options\n   * @param options.config - Module config\n   * @param options.eventsDispatcher - Common event bus\n   */\n  constructor({ config: e, eventsDispatcher: t }) {\n    if (this.nodes = {}, this.listeners = new _e(), this.readOnlyMutableListeners = {\n      /**\n       * Assigns event listener on DOM element and pushes into special array that might be removed\n       *\n       * @param {EventTarget} element - DOM Element\n       * @param {string} eventType - Event name\n       * @param {Function} handler - Event handler\n       * @param {boolean|AddEventListenerOptions} options - Listening options\n       */\n      on: (o, i, s, r = !1) => {\n        this.mutableListenerIds.push(\n          this.listeners.on(o, i, s, r)\n        );\n      },\n      /**\n       * Clears all mutable listeners\n       */\n      clearAll: () => {\n        for (const o of this.mutableListenerIds)\n          this.listeners.offById(o);\n        this.mutableListenerIds = [];\n      }\n    }, this.mutableListenerIds = [], new.target === E)\n      throw new TypeError(\"Constructors for abstract class Module are not allowed.\");\n    this.config = e, this.eventsDispatcher = t;\n  }\n  /**\n   * Editor modules setter\n   *\n   * @param {EditorModules} Editor - Editor's Modules\n   */\n  set state(e) {\n    this.Editor = e;\n  }\n  /**\n   * Remove memorized nodes\n   */\n  removeAllNodes() {\n    for (const e in this.nodes) {\n      const t = this.nodes[e];\n      t instanceof HTMLElement && t.remove();\n    }\n  }\n  /**\n   * Returns true if current direction is RTL (Right-To-Left)\n   */\n  get isRtl() {\n    return this.config.i18n.direction === \"rtl\";\n  }\n}\nclass b {\n  constructor() {\n    this.instance = null, this.selection = null, this.savedSelectionRange = null, this.isFakeBackgroundEnabled = !1, this.commandBackground = \"backColor\", this.commandRemoveFormat = \"removeFormat\";\n  }\n  /**\n   * Editor styles\n   *\n   * @returns {{editorWrapper: string, editorZone: string}}\n   */\n  static get CSS() {\n    return {\n      editorWrapper: \"codex-editor\",\n      editorZone: \"codex-editor__redactor\"\n    };\n  }\n  /**\n   * Returns selected anchor\n   * {@link https://developer.mozilla.org/ru/docs/Web/API/Selection/anchorNode}\n   *\n   * @returns {Node|null}\n   */\n  static get anchorNode() {\n    const e = window.getSelection();\n    return e ? e.anchorNode : null;\n  }\n  /**\n   * Returns selected anchor element\n   *\n   * @returns {Element|null}\n   */\n  static get anchorElement() {\n    const e = window.getSelection();\n    if (!e)\n      return null;\n    const t = e.anchorNode;\n    return t ? d.isElement(t) ? t : t.parentElement : null;\n  }\n  /**\n   * Returns selection offset according to the anchor node\n   * {@link https://developer.mozilla.org/ru/docs/Web/API/Selection/anchorOffset}\n   *\n   * @returns {number|null}\n   */\n  static get anchorOffset() {\n    const e = window.getSelection();\n    return e ? e.anchorOffset : null;\n  }\n  /**\n   * Is current selection range collapsed\n   *\n   * @returns {boolean|null}\n   */\n  static get isCollapsed() {\n    const e = window.getSelection();\n    return e ? e.isCollapsed : null;\n  }\n  /**\n   * Check current selection if it is at Editor's zone\n   *\n   * @returns {boolean}\n   */\n  static get isAtEditor() {\n    return this.isSelectionAtEditor(b.get());\n  }\n  /**\n   * Check if passed selection is at Editor's zone\n   *\n   * @param selection - Selection object to check\n   */\n  static isSelectionAtEditor(e) {\n    if (!e)\n      return !1;\n    let t = e.anchorNode || e.focusNode;\n    t && t.nodeType === Node.TEXT_NODE && (t = t.parentNode);\n    let o = null;\n    return t && t instanceof Element && (o = t.closest(`.${b.CSS.editorZone}`)), o ? o.nodeType === Node.ELEMENT_NODE : !1;\n  }\n  /**\n   * Check if passed range at Editor zone\n   *\n   * @param range - range to check\n   */\n  static isRangeAtEditor(e) {\n    if (!e)\n      return;\n    let t = e.startContainer;\n    t && t.nodeType === Node.TEXT_NODE && (t = t.parentNode);\n    let o = null;\n    return t && t instanceof Element && (o = t.closest(`.${b.CSS.editorZone}`)), o ? o.nodeType === Node.ELEMENT_NODE : !1;\n  }\n  /**\n   * Methods return boolean that true if selection exists on the page\n   */\n  static get isSelectionExists() {\n    return !!b.get().anchorNode;\n  }\n  /**\n   * Return first range\n   *\n   * @returns {Range|null}\n   */\n  static get range() {\n    return this.getRangeFromSelection(this.get());\n  }\n  /**\n   * Returns range from passed Selection object\n   *\n   * @param selection - Selection object to get Range from\n   */\n  static getRangeFromSelection(e) {\n    return e && e.rangeCount ? e.getRangeAt(0) : null;\n  }\n  /**\n   * Calculates position and size of selected text\n   *\n   * @returns {DOMRect | ClientRect}\n   */\n  static get rect() {\n    let e = document.selection, t, o = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n    if (e && e.type !== \"Control\")\n      return e = e, t = e.createRange(), o.x = t.boundingLeft, o.y = t.boundingTop, o.width = t.boundingWidth, o.height = t.boundingHeight, o;\n    if (!window.getSelection)\n      return S(\"Method window.getSelection is not supported\", \"warn\"), o;\n    if (e = window.getSelection(), e.rangeCount === null || isNaN(e.rangeCount))\n      return S(\"Method SelectionUtils.rangeCount is not supported\", \"warn\"), o;\n    if (e.rangeCount === 0)\n      return o;\n    if (t = e.getRangeAt(0).cloneRange(), t.getBoundingClientRect && (o = t.getBoundingClientRect()), o.x === 0 && o.y === 0) {\n      const i = document.createElement(\"span\");\n      if (i.getBoundingClientRect) {\n        i.appendChild(document.createTextNode(\"​\")), t.insertNode(i), o = i.getBoundingClientRect();\n        const s = i.parentNode;\n        s.removeChild(i), s.normalize();\n      }\n    }\n    return o;\n  }\n  /**\n   * Returns selected text as String\n   *\n   * @returns {string}\n   */\n  static get text() {\n    return window.getSelection ? window.getSelection().toString() : \"\";\n  }\n  /**\n   * Returns window SelectionUtils\n   * {@link https://developer.mozilla.org/ru/docs/Web/API/Window/getSelection}\n   *\n   * @returns {Selection}\n   */\n  static get() {\n    return window.getSelection();\n  }\n  /**\n   * Set focus to contenteditable or native input element\n   *\n   * @param element - element where to set focus\n   * @param offset - offset of cursor\n   */\n  static setCursor(e, t = 0) {\n    const o = document.createRange(), i = window.getSelection();\n    return d.isNativeInput(e) ? d.canSetCaret(e) ? (e.focus(), e.selectionStart = e.selectionEnd = t, e.getBoundingClientRect()) : void 0 : (o.setStart(e, t), o.setEnd(e, t), i.removeAllRanges(), i.addRange(o), o.getBoundingClientRect());\n  }\n  /**\n   * Check if current range exists and belongs to container\n   *\n   * @param container - where range should be\n   */\n  static isRangeInsideContainer(e) {\n    const t = b.range;\n    return t === null ? !1 : e.contains(t.startContainer);\n  }\n  /**\n   * Adds fake cursor to the current range\n   */\n  static addFakeCursor() {\n    const e = b.range;\n    if (e === null)\n      return;\n    const t = d.make(\"span\", \"codex-editor__fake-cursor\");\n    t.dataset.mutationFree = \"true\", e.collapse(), e.insertNode(t);\n  }\n  /**\n   * Check if passed element contains a fake cursor\n   *\n   * @param el - where to check\n   */\n  static isFakeCursorInsideContainer(e) {\n    return d.find(e, \".codex-editor__fake-cursor\") !== null;\n  }\n  /**\n   * Removes fake cursor from a container\n   *\n   * @param container - container to look for\n   */\n  static removeFakeCursor(e = document.body) {\n    const t = d.find(e, \".codex-editor__fake-cursor\");\n    t && t.remove();\n  }\n  /**\n   * Removes fake background\n   */\n  removeFakeBackground() {\n    this.isFakeBackgroundEnabled && (this.isFakeBackgroundEnabled = !1, document.execCommand(this.commandRemoveFormat));\n  }\n  /**\n   * Sets fake background\n   */\n  setFakeBackground() {\n    document.execCommand(this.commandBackground, !1, \"#a8d6ff\"), this.isFakeBackgroundEnabled = !0;\n  }\n  /**\n   * Save SelectionUtils's range\n   */\n  save() {\n    this.savedSelectionRange = b.range;\n  }\n  /**\n   * Restore saved SelectionUtils's range\n   */\n  restore() {\n    if (!this.savedSelectionRange)\n      return;\n    const e = window.getSelection();\n    e.removeAllRanges(), e.addRange(this.savedSelectionRange);\n  }\n  /**\n   * Clears saved selection\n   */\n  clearSaved() {\n    this.savedSelectionRange = null;\n  }\n  /**\n   * Collapse current selection\n   */\n  collapseToEnd() {\n    const e = window.getSelection(), t = document.createRange();\n    t.selectNodeContents(e.focusNode), t.collapse(!1), e.removeAllRanges(), e.addRange(t);\n  }\n  /**\n   * Looks ahead to find passed tag from current selection\n   *\n   * @param  {string} tagName       - tag to found\n   * @param  {string} [className]   - tag's class name\n   * @param  {number} [searchDepth] - count of tags that can be included. For better performance.\n   * @returns {HTMLElement|null}\n   */\n  findParentTag(e, t, o = 10) {\n    const i = window.getSelection();\n    let s = null;\n    return !i || !i.anchorNode || !i.focusNode ? null : ([\n      /** the Node in which the selection begins */\n      i.anchorNode,\n      /** the Node in which the selection ends */\n      i.focusNode\n    ].forEach((a) => {\n      let l = o;\n      for (; l > 0 && a.parentNode && !(a.tagName === e && (s = a, t && a.classList && !a.classList.contains(t) && (s = null), s)); )\n        a = a.parentNode, l--;\n    }), s);\n  }\n  /**\n   * Expands selection range to the passed parent node\n   *\n   * @param {HTMLElement} element - element which contents should be selected\n   */\n  expandToTag(e) {\n    const t = window.getSelection();\n    t.removeAllRanges();\n    const o = document.createRange();\n    o.selectNodeContents(e), t.addRange(o);\n  }\n}\nfunction pi(n, e) {\n  const { type: t, target: o, addedNodes: i, removedNodes: s } = n;\n  return n.type === \"attributes\" && n.attributeName === \"data-empty\" ? !1 : !!(e.contains(o) || t === \"childList\" && (Array.from(i).some((l) => l === e) || Array.from(s).some((l) => l === e)));\n}\nconst ft = \"redactor dom changed\", $o = \"block changed\", zo = \"fake cursor is about to be toggled\", Uo = \"fake cursor have been set\", Te = \"editor mobile layout toggled\";\nfunction gt(n, e) {\n  if (!n.conversionConfig)\n    return !1;\n  const t = n.conversionConfig[e];\n  return A(t) || te(t);\n}\nfunction He(n, e) {\n  return gt(n.tool, e);\n}\nfunction Wo(n, e) {\n  return Object.entries(n).some(([t, o]) => e[t] && ri(e[t], o));\n}\nasync function Yo(n, e) {\n  const o = (await n.save()).data, i = e.find((s) => s.name === n.name);\n  return i !== void 0 && !gt(i, \"export\") ? [] : e.reduce((s, r) => {\n    if (!gt(r, \"import\") || r.toolbox === void 0)\n      return s;\n    const a = r.toolbox.filter((l) => {\n      if (V(l) || l.icon === void 0)\n        return !1;\n      if (l.data !== void 0) {\n        if (Wo(l.data, o))\n          return !1;\n      } else if (r.name === n.name)\n        return !1;\n      return !0;\n    });\n    return s.push({\n      ...r,\n      toolbox: a\n    }), s;\n  }, []);\n}\nfunction xo(n, e) {\n  return n.mergeable ? n.name === e.name ? !0 : He(e, \"export\") && He(n, \"import\") : !1;\n}\nfunction fi(n, e) {\n  const t = e == null ? void 0 : e.export;\n  return A(t) ? t(n) : te(t) ? n[t] : (t !== void 0 && S(\"Conversion «export» property must be a string or function. String means key of saved data object to export. Function should export processed string to export.\"), \"\");\n}\nfunction Bo(n, e, t) {\n  const o = e == null ? void 0 : e.import;\n  return A(o) ? o(n, t) : te(o) ? {\n    [o]: n\n  } : (o !== void 0 && S(\"Conversion «import» property must be a string or function. String means key of tool data to import. Function accepts a imported string and return composed tool data.\"), {});\n}\nvar _ = /* @__PURE__ */ ((n) => (n.Default = \"default\", n.Separator = \"separator\", n.Html = \"html\", n))(_ || {}), ee = /* @__PURE__ */ ((n) => (n.APPEND_CALLBACK = \"appendCallback\", n.RENDERED = \"rendered\", n.MOVED = \"moved\", n.UPDATED = \"updated\", n.REMOVED = \"removed\", n.ON_PASTE = \"onPaste\", n))(ee || {});\nclass R extends Oe {\n  /**\n   * @param options - block constructor options\n   * @param [options.id] - block's id. Will be generated if omitted.\n   * @param options.data - Tool's initial data\n   * @param options.tool — block's tool\n   * @param options.api - Editor API module for pass it to the Block Tunes\n   * @param options.readOnly - Read-Only flag\n   * @param [eventBus] - Editor common event bus. Allows to subscribe on some Editor events. Could be omitted when \"virtual\" Block is created. See BlocksAPI@composeBlockData.\n   */\n  constructor({\n    id: e = ni(),\n    data: t,\n    tool: o,\n    readOnly: i,\n    tunesData: s\n  }, r) {\n    super(), this.cachedInputs = [], this.toolRenderedElement = null, this.tunesInstances = /* @__PURE__ */ new Map(), this.defaultTunesInstances = /* @__PURE__ */ new Map(), this.unavailableTunesData = {}, this.inputIndex = 0, this.editorEventBus = null, this.handleFocus = () => {\n      this.dropInputsCache(), this.updateCurrentInput();\n    }, this.didMutated = (a = void 0) => {\n      const l = a === void 0, c = a instanceof InputEvent;\n      !l && !c && this.detectToolRootChange(a);\n      let u;\n      l || c ? u = !0 : u = !(a.length > 0 && a.every((p) => {\n        const { addedNodes: g, removedNodes: f, target: v } = p;\n        return [\n          ...Array.from(g),\n          ...Array.from(f),\n          v\n        ].some((T) => (d.isElement(T) || (T = T.parentElement), T && T.closest('[data-mutation-free=\"true\"]') !== null));\n      })), u && (this.dropInputsCache(), this.updateCurrentInput(), this.toggleInputsEmptyMark(), this.call(\n        \"updated\"\n        /* UPDATED */\n      ), this.emit(\"didMutated\", this));\n    }, this.name = o.name, this.id = e, this.settings = o.settings, this.config = o.settings.config || {}, this.editorEventBus = r || null, this.blockAPI = new J(this), this.tool = o, this.toolInstance = o.create(t, this.blockAPI, i), this.tunes = o.tunes, this.composeTunes(s), this.holder = this.compose(), window.requestIdleCallback(() => {\n      this.watchBlockMutations(), this.addInputEvents(), this.toggleInputsEmptyMark();\n    });\n  }\n  /**\n   * CSS classes for the Block\n   *\n   * @returns {{wrapper: string, content: string}}\n   */\n  static get CSS() {\n    return {\n      wrapper: \"ce-block\",\n      wrapperStretched: \"ce-block--stretched\",\n      content: \"ce-block__content\",\n      selected: \"ce-block--selected\",\n      dropTarget: \"ce-block--drop-target\"\n    };\n  }\n  /**\n   * Find and return all editable elements (contenteditable and native inputs) in the Tool HTML\n   */\n  get inputs() {\n    if (this.cachedInputs.length !== 0)\n      return this.cachedInputs;\n    const e = d.findAllInputs(this.holder);\n    return this.inputIndex > e.length - 1 && (this.inputIndex = e.length - 1), this.cachedInputs = e, e;\n  }\n  /**\n   * Return current Tool`s input\n   * If Block doesn't contain inputs, return undefined\n   */\n  get currentInput() {\n    return this.inputs[this.inputIndex];\n  }\n  /**\n   * Set input index to the passed element\n   *\n   * @param element - HTML Element to set as current input\n   */\n  set currentInput(e) {\n    const t = this.inputs.findIndex((o) => o === e || o.contains(e));\n    t !== -1 && (this.inputIndex = t);\n  }\n  /**\n   * Return first Tool`s input\n   * If Block doesn't contain inputs, return undefined\n   */\n  get firstInput() {\n    return this.inputs[0];\n  }\n  /**\n   * Return first Tool`s input\n   * If Block doesn't contain inputs, return undefined\n   */\n  get lastInput() {\n    const e = this.inputs;\n    return e[e.length - 1];\n  }\n  /**\n   * Return next Tool`s input or undefined if it doesn't exist\n   * If Block doesn't contain inputs, return undefined\n   */\n  get nextInput() {\n    return this.inputs[this.inputIndex + 1];\n  }\n  /**\n   * Return previous Tool`s input or undefined if it doesn't exist\n   * If Block doesn't contain inputs, return undefined\n   */\n  get previousInput() {\n    return this.inputs[this.inputIndex - 1];\n  }\n  /**\n   * Get Block's JSON data\n   *\n   * @returns {object}\n   */\n  get data() {\n    return this.save().then((e) => e && !V(e.data) ? e.data : {});\n  }\n  /**\n   * Returns tool's sanitizer config\n   *\n   * @returns {object}\n   */\n  get sanitize() {\n    return this.tool.sanitizeConfig;\n  }\n  /**\n   * is block mergeable\n   * We plugin have merge function then we call it mergeable\n   *\n   * @returns {boolean}\n   */\n  get mergeable() {\n    return A(this.toolInstance.merge);\n  }\n  /**\n   * If Block contains inputs, it is focusable\n   */\n  get focusable() {\n    return this.inputs.length !== 0;\n  }\n  /**\n   * Check block for emptiness\n   *\n   * @returns {boolean}\n   */\n  get isEmpty() {\n    const e = d.isEmpty(this.pluginsContent, \"/\"), t = !this.hasMedia;\n    return e && t;\n  }\n  /**\n   * Check if block has a media content such as images, iframe and other\n   *\n   * @returns {boolean}\n   */\n  get hasMedia() {\n    const e = [\n      \"img\",\n      \"iframe\",\n      \"video\",\n      \"audio\",\n      \"source\",\n      \"input\",\n      \"textarea\",\n      \"twitterwidget\"\n    ];\n    return !!this.holder.querySelector(e.join(\",\"));\n  }\n  /**\n   * Set selected state\n   * We don't need to mark Block as Selected when it is empty\n   *\n   * @param {boolean} state - 'true' to select, 'false' to remove selection\n   */\n  set selected(e) {\n    var i, s;\n    this.holder.classList.toggle(R.CSS.selected, e);\n    const t = e === !0 && b.isRangeInsideContainer(this.holder), o = e === !1 && b.isFakeCursorInsideContainer(this.holder);\n    (t || o) && ((i = this.editorEventBus) == null || i.emit(zo, { state: e }), t ? b.addFakeCursor() : b.removeFakeCursor(this.holder), (s = this.editorEventBus) == null || s.emit(Uo, { state: e }));\n  }\n  /**\n   * Returns True if it is Selected\n   *\n   * @returns {boolean}\n   */\n  get selected() {\n    return this.holder.classList.contains(R.CSS.selected);\n  }\n  /**\n   * Set stretched state\n   *\n   * @param {boolean} state - 'true' to enable, 'false' to disable stretched state\n   */\n  set stretched(e) {\n    this.holder.classList.toggle(R.CSS.wrapperStretched, e);\n  }\n  /**\n   * Return Block's stretched state\n   *\n   * @returns {boolean}\n   */\n  get stretched() {\n    return this.holder.classList.contains(R.CSS.wrapperStretched);\n  }\n  /**\n   * Toggle drop target state\n   *\n   * @param {boolean} state - 'true' if block is drop target, false otherwise\n   */\n  set dropTarget(e) {\n    this.holder.classList.toggle(R.CSS.dropTarget, e);\n  }\n  /**\n   * Returns Plugins content\n   *\n   * @returns {HTMLElement}\n   */\n  get pluginsContent() {\n    return this.toolRenderedElement;\n  }\n  /**\n   * Calls Tool's method\n   *\n   * Method checks tool property {MethodName}. Fires method with passes params If it is instance of Function\n   *\n   * @param {string} methodName - method to call\n   * @param {object} params - method argument\n   */\n  call(e, t) {\n    if (A(this.toolInstance[e])) {\n      e === \"appendCallback\" && S(\n        \"`appendCallback` hook is deprecated and will be removed in the next major release. Use `rendered` hook instead\",\n        \"warn\"\n      );\n      try {\n        this.toolInstance[e].call(this.toolInstance, t);\n      } catch (o) {\n        S(`Error during '${e}' call: ${o.message}`, \"error\");\n      }\n    }\n  }\n  /**\n   * Call plugins merge method\n   *\n   * @param {BlockToolData} data - data to merge\n   */\n  async mergeWith(e) {\n    await this.toolInstance.merge(e);\n  }\n  /**\n   * Extracts data from Block\n   * Groups Tool's save processing time\n   *\n   * @returns {object}\n   */\n  async save() {\n    const e = await this.toolInstance.save(this.pluginsContent), t = this.unavailableTunesData;\n    [\n      ...this.tunesInstances.entries(),\n      ...this.defaultTunesInstances.entries()\n    ].forEach(([s, r]) => {\n      if (A(r.save))\n        try {\n          t[s] = r.save();\n        } catch (a) {\n          S(`Tune ${r.constructor.name} save method throws an Error %o`, \"warn\", a);\n        }\n    });\n    const o = window.performance.now();\n    let i;\n    return Promise.resolve(e).then((s) => (i = window.performance.now(), {\n      id: this.id,\n      tool: this.name,\n      data: s,\n      tunes: t,\n      time: i - o\n    })).catch((s) => {\n      S(`Saving process for ${this.name} tool failed due to the ${s}`, \"log\", \"red\");\n    });\n  }\n  /**\n   * Uses Tool's validation method to check the correctness of output data\n   * Tool's validation method is optional\n   *\n   * @description Method returns true|false whether data passed the validation or not\n   * @param {BlockToolData} data - data to validate\n   * @returns {Promise<boolean>} valid\n   */\n  async validate(e) {\n    let t = !0;\n    return this.toolInstance.validate instanceof Function && (t = await this.toolInstance.validate(e)), t;\n  }\n  /**\n   * Returns data to render in Block Tunes menu.\n   * Splits block tunes into 2 groups: block specific tunes and common tunes\n   */\n  getTunes() {\n    const e = [], t = [], o = typeof this.toolInstance.renderSettings == \"function\" ? this.toolInstance.renderSettings() : [];\n    return d.isElement(o) ? e.push({\n      type: _.Html,\n      element: o\n    }) : Array.isArray(o) ? e.push(...o) : e.push(o), [\n      ...this.tunesInstances.values(),\n      ...this.defaultTunesInstances.values()\n    ].map((s) => s.render()).forEach((s) => {\n      d.isElement(s) ? t.push({\n        type: _.Html,\n        element: s\n      }) : Array.isArray(s) ? t.push(...s) : t.push(s);\n    }), {\n      toolTunes: e,\n      commonTunes: t\n    };\n  }\n  /**\n   * Update current input index with selection anchor node\n   */\n  updateCurrentInput() {\n    this.currentInput = d.isNativeInput(document.activeElement) || !b.anchorNode ? document.activeElement : b.anchorNode;\n  }\n  /**\n   * Allows to say Editor that Block was changed. Used to manually trigger Editor's 'onChange' callback\n   * Can be useful for block changes invisible for editor core.\n   */\n  dispatchChange() {\n    this.didMutated();\n  }\n  /**\n   * Call Tool instance destroy method\n   */\n  destroy() {\n    this.unwatchBlockMutations(), this.removeInputEvents(), super.destroy(), A(this.toolInstance.destroy) && this.toolInstance.destroy();\n  }\n  /**\n   * Tool could specify several entries to be displayed at the Toolbox (for example, \"Heading 1\", \"Heading 2\", \"Heading 3\")\n   * This method returns the entry that is related to the Block (depended on the Block data)\n   */\n  async getActiveToolboxEntry() {\n    const e = this.tool.toolbox;\n    if (e.length === 1)\n      return Promise.resolve(this.tool.toolbox[0]);\n    const t = await this.data, o = e;\n    return o == null ? void 0 : o.find((i) => Wo(i.data, t));\n  }\n  /**\n   * Exports Block data as string using conversion config\n   */\n  async exportDataAsString() {\n    const e = await this.data;\n    return fi(e, this.tool.conversionConfig);\n  }\n  /**\n   * Make default Block wrappers and put Tool`s content there\n   *\n   * @returns {HTMLDivElement}\n   */\n  compose() {\n    const e = d.make(\"div\", R.CSS.wrapper), t = d.make(\"div\", R.CSS.content), o = this.toolInstance.render();\n    e.setAttribute(\"data-cy\", \"block-wrapper\"), e.dataset.id = this.id, this.toolRenderedElement = o, t.appendChild(this.toolRenderedElement);\n    let i = t;\n    return [...this.tunesInstances.values(), ...this.defaultTunesInstances.values()].forEach((s) => {\n      if (A(s.wrap))\n        try {\n          i = s.wrap(i);\n        } catch (r) {\n          S(`Tune ${s.constructor.name} wrap method throws an Error %o`, \"warn\", r);\n        }\n    }), e.appendChild(i), e;\n  }\n  /**\n   * Instantiate Block Tunes\n   *\n   * @param tunesData - current Block tunes data\n   * @private\n   */\n  composeTunes(e) {\n    Array.from(this.tunes.values()).forEach((t) => {\n      (t.isInternal ? this.defaultTunesInstances : this.tunesInstances).set(t.name, t.create(e[t.name], this.blockAPI));\n    }), Object.entries(e).forEach(([t, o]) => {\n      this.tunesInstances.has(t) || (this.unavailableTunesData[t] = o);\n    });\n  }\n  /**\n   * Adds focus event listeners to all inputs and contenteditable\n   */\n  addInputEvents() {\n    this.inputs.forEach((e) => {\n      e.addEventListener(\"focus\", this.handleFocus), d.isNativeInput(e) && e.addEventListener(\"input\", this.didMutated);\n    });\n  }\n  /**\n   * removes focus event listeners from all inputs and contenteditable\n   */\n  removeInputEvents() {\n    this.inputs.forEach((e) => {\n      e.removeEventListener(\"focus\", this.handleFocus), d.isNativeInput(e) && e.removeEventListener(\"input\", this.didMutated);\n    });\n  }\n  /**\n   * Listen common editor Dom Changed event and detect mutations related to the  Block\n   */\n  watchBlockMutations() {\n    var e;\n    this.redactorDomChangedCallback = (t) => {\n      const { mutations: o } = t;\n      o.some((s) => pi(s, this.toolRenderedElement)) && this.didMutated(o);\n    }, (e = this.editorEventBus) == null || e.on(ft, this.redactorDomChangedCallback);\n  }\n  /**\n   * Remove redactor dom change event listener\n   */\n  unwatchBlockMutations() {\n    var e;\n    (e = this.editorEventBus) == null || e.off(ft, this.redactorDomChangedCallback);\n  }\n  /**\n   * Sometimes Tool can replace own main element, for example H2 -> H4 or UL -> OL\n   * We need to detect such changes and update a link to tools main element with the new one\n   *\n   * @param mutations - records of block content mutations\n   */\n  detectToolRootChange(e) {\n    e.forEach((t) => {\n      if (Array.from(t.removedNodes).includes(this.toolRenderedElement)) {\n        const i = t.addedNodes[t.addedNodes.length - 1];\n        this.toolRenderedElement = i;\n      }\n    });\n  }\n  /**\n   * Clears inputs cached value\n   */\n  dropInputsCache() {\n    this.cachedInputs = [];\n  }\n  /**\n   * Mark inputs with 'data-empty' attribute with the empty state\n   */\n  toggleInputsEmptyMark() {\n    this.inputs.forEach(Do);\n  }\n}\nclass gi extends E {\n  constructor() {\n    super(...arguments), this.insert = (e = this.config.defaultBlock, t = {}, o = {}, i, s, r, a) => {\n      const l = this.Editor.BlockManager.insert({\n        id: a,\n        tool: e,\n        data: t,\n        index: i,\n        needToFocus: s,\n        replace: r\n      });\n      return new J(l);\n    }, this.composeBlockData = async (e) => {\n      const t = this.Editor.Tools.blockTools.get(e);\n      return new R({\n        tool: t,\n        api: this.Editor.API,\n        readOnly: !0,\n        data: {},\n        tunesData: {}\n      }).data;\n    }, this.update = async (e, t, o) => {\n      const { BlockManager: i } = this.Editor, s = i.getBlockById(e);\n      if (s === void 0)\n        throw new Error(`Block with id \"${e}\" not found`);\n      const r = await i.update(s, t, o);\n      return new J(r);\n    }, this.convert = async (e, t, o) => {\n      var h, p;\n      const { BlockManager: i, Tools: s } = this.Editor, r = i.getBlockById(e);\n      if (!r)\n        throw new Error(`Block with id \"${e}\" not found`);\n      const a = s.blockTools.get(r.name), l = s.blockTools.get(t);\n      if (!l)\n        throw new Error(`Block Tool with type \"${t}\" not found`);\n      const c = ((h = a == null ? void 0 : a.conversionConfig) == null ? void 0 : h.export) !== void 0, u = ((p = l.conversionConfig) == null ? void 0 : p.import) !== void 0;\n      if (c && u) {\n        const g = await i.convert(r, t, o);\n        return new J(g);\n      } else {\n        const g = [\n          c ? !1 : je(r.name),\n          u ? !1 : je(t)\n        ].filter(Boolean).join(\" and \");\n        throw new Error(`Conversion from \"${r.name}\" to \"${t}\" is not possible. ${g} tool(s) should provide a \"conversionConfig\"`);\n      }\n    }, this.insertMany = (e, t = this.Editor.BlockManager.blocks.length - 1) => {\n      this.validateIndex(t);\n      const o = e.map(({ id: i, type: s, data: r }) => this.Editor.BlockManager.composeBlock({\n        id: i,\n        tool: s || this.config.defaultBlock,\n        data: r\n      }));\n      return this.Editor.BlockManager.insertMany(o, t), o.map((i) => new J(i));\n    };\n  }\n  /**\n   * Available methods\n   *\n   * @returns {Blocks}\n   */\n  get methods() {\n    return {\n      clear: () => this.clear(),\n      render: (e) => this.render(e),\n      renderFromHTML: (e) => this.renderFromHTML(e),\n      delete: (e) => this.delete(e),\n      swap: (e, t) => this.swap(e, t),\n      move: (e, t) => this.move(e, t),\n      getBlockByIndex: (e) => this.getBlockByIndex(e),\n      getById: (e) => this.getById(e),\n      getCurrentBlockIndex: () => this.getCurrentBlockIndex(),\n      getBlockIndex: (e) => this.getBlockIndex(e),\n      getBlocksCount: () => this.getBlocksCount(),\n      getBlockByElement: (e) => this.getBlockByElement(e),\n      stretchBlock: (e, t = !0) => this.stretchBlock(e, t),\n      insertNewBlock: () => this.insertNewBlock(),\n      insert: this.insert,\n      insertMany: this.insertMany,\n      update: this.update,\n      composeBlockData: this.composeBlockData,\n      convert: this.convert\n    };\n  }\n  /**\n   * Returns Blocks count\n   *\n   * @returns {number}\n   */\n  getBlocksCount() {\n    return this.Editor.BlockManager.blocks.length;\n  }\n  /**\n   * Returns current block index\n   *\n   * @returns {number}\n   */\n  getCurrentBlockIndex() {\n    return this.Editor.BlockManager.currentBlockIndex;\n  }\n  /**\n   * Returns the index of Block by id;\n   *\n   * @param id - block id\n   */\n  getBlockIndex(e) {\n    const t = this.Editor.BlockManager.getBlockById(e);\n    if (!t) {\n      X(\"There is no block with id `\" + e + \"`\", \"warn\");\n      return;\n    }\n    return this.Editor.BlockManager.getBlockIndex(t);\n  }\n  /**\n   * Returns BlockAPI object by Block index\n   *\n   * @param {number} index - index to get\n   */\n  getBlockByIndex(e) {\n    const t = this.Editor.BlockManager.getBlockByIndex(e);\n    if (t === void 0) {\n      X(\"There is no block at index `\" + e + \"`\", \"warn\");\n      return;\n    }\n    return new J(t);\n  }\n  /**\n   * Returns BlockAPI object by Block id\n   *\n   * @param id - id of block to get\n   */\n  getById(e) {\n    const t = this.Editor.BlockManager.getBlockById(e);\n    return t === void 0 ? (X(\"There is no block with id `\" + e + \"`\", \"warn\"), null) : new J(t);\n  }\n  /**\n   * Get Block API object by any child html element\n   *\n   * @param element - html element to get Block by\n   */\n  getBlockByElement(e) {\n    const t = this.Editor.BlockManager.getBlock(e);\n    if (t === void 0) {\n      X(\"There is no block corresponding to element `\" + e + \"`\", \"warn\");\n      return;\n    }\n    return new J(t);\n  }\n  /**\n   * Call Block Manager method that swap Blocks\n   *\n   * @param {number} fromIndex - position of first Block\n   * @param {number} toIndex - position of second Block\n   * @deprecated — use 'move' instead\n   */\n  swap(e, t) {\n    S(\n      \"`blocks.swap()` method is deprecated and will be removed in the next major release. Use `block.move()` method instead\",\n      \"info\"\n    ), this.Editor.BlockManager.swap(e, t);\n  }\n  /**\n   * Move block from one index to another\n   *\n   * @param {number} toIndex - index to move to\n   * @param {number} fromIndex - index to move from\n   */\n  move(e, t) {\n    this.Editor.BlockManager.move(e, t);\n  }\n  /**\n   * Deletes Block\n   *\n   * @param {number} blockIndex - index of Block to delete\n   */\n  delete(e = this.Editor.BlockManager.currentBlockIndex) {\n    try {\n      const t = this.Editor.BlockManager.getBlockByIndex(e);\n      this.Editor.BlockManager.removeBlock(t);\n    } catch (t) {\n      X(t, \"warn\");\n      return;\n    }\n    this.Editor.BlockManager.blocks.length === 0 && this.Editor.BlockManager.insert(), this.Editor.BlockManager.currentBlock && this.Editor.Caret.setToBlock(this.Editor.BlockManager.currentBlock, this.Editor.Caret.positions.END), this.Editor.Toolbar.close();\n  }\n  /**\n   * Clear Editor's area\n   */\n  async clear() {\n    await this.Editor.BlockManager.clear(!0), this.Editor.InlineToolbar.close();\n  }\n  /**\n   * Fills Editor with Blocks data\n   *\n   * @param {OutputData} data — Saved Editor data\n   */\n  async render(e) {\n    if (e === void 0 || e.blocks === void 0)\n      throw new Error(\"Incorrect data passed to the render() method\");\n    this.Editor.ModificationsObserver.disable(), await this.Editor.BlockManager.clear(), await this.Editor.Renderer.render(e.blocks), this.Editor.ModificationsObserver.enable();\n  }\n  /**\n   * Render passed HTML string\n   *\n   * @param {string} data - HTML string to render\n   * @returns {Promise<void>}\n   */\n  renderFromHTML(e) {\n    return this.Editor.BlockManager.clear(), this.Editor.Paste.processText(e, !0);\n  }\n  /**\n   * Stretch Block's content\n   *\n   * @param {number} index - index of Block to stretch\n   * @param {boolean} status - true to enable, false to disable\n   * @deprecated Use BlockAPI interface to stretch Blocks\n   */\n  stretchBlock(e, t = !0) {\n    ht(\n      !0,\n      \"blocks.stretchBlock()\",\n      \"BlockAPI\"\n    );\n    const o = this.Editor.BlockManager.getBlockByIndex(e);\n    o && (o.stretched = t);\n  }\n  /**\n   * Insert new Block\n   * After set caret to this Block\n   *\n   * @todo remove in 3.0.0\n   * @deprecated with insert() method\n   */\n  insertNewBlock() {\n    S(\"Method blocks.insertNewBlock() is deprecated and it will be removed in the next major release. Use blocks.insert() instead.\", \"warn\"), this.insert();\n  }\n  /**\n   * Validated block index and throws an error if it's invalid\n   *\n   * @param index - index to validate\n   */\n  validateIndex(e) {\n    if (typeof e != \"number\")\n      throw new Error(\"Index should be a number\");\n    if (e < 0)\n      throw new Error(\"Index should be greater than or equal to 0\");\n    if (e === null)\n      throw new Error(\"Index should be greater than or equal to 0\");\n  }\n}\nfunction mi(n, e) {\n  return typeof n == \"number\" ? e.BlockManager.getBlockByIndex(n) : typeof n == \"string\" ? e.BlockManager.getBlockById(n) : e.BlockManager.getBlockById(n.id);\n}\nclass bi extends E {\n  constructor() {\n    super(...arguments), this.setToFirstBlock = (e = this.Editor.Caret.positions.DEFAULT, t = 0) => this.Editor.BlockManager.firstBlock ? (this.Editor.Caret.setToBlock(this.Editor.BlockManager.firstBlock, e, t), !0) : !1, this.setToLastBlock = (e = this.Editor.Caret.positions.DEFAULT, t = 0) => this.Editor.BlockManager.lastBlock ? (this.Editor.Caret.setToBlock(this.Editor.BlockManager.lastBlock, e, t), !0) : !1, this.setToPreviousBlock = (e = this.Editor.Caret.positions.DEFAULT, t = 0) => this.Editor.BlockManager.previousBlock ? (this.Editor.Caret.setToBlock(this.Editor.BlockManager.previousBlock, e, t), !0) : !1, this.setToNextBlock = (e = this.Editor.Caret.positions.DEFAULT, t = 0) => this.Editor.BlockManager.nextBlock ? (this.Editor.Caret.setToBlock(this.Editor.BlockManager.nextBlock, e, t), !0) : !1, this.setToBlock = (e, t = this.Editor.Caret.positions.DEFAULT, o = 0) => {\n      const i = mi(e, this.Editor);\n      return i === void 0 ? !1 : (this.Editor.Caret.setToBlock(i, t, o), !0);\n    }, this.focus = (e = !1) => e ? this.setToLastBlock(this.Editor.Caret.positions.END) : this.setToFirstBlock(this.Editor.Caret.positions.START);\n  }\n  /**\n   * Available methods\n   *\n   * @returns {Caret}\n   */\n  get methods() {\n    return {\n      setToFirstBlock: this.setToFirstBlock,\n      setToLastBlock: this.setToLastBlock,\n      setToPreviousBlock: this.setToPreviousBlock,\n      setToNextBlock: this.setToNextBlock,\n      setToBlock: this.setToBlock,\n      focus: this.focus\n    };\n  }\n}\nclass vi extends E {\n  /**\n   * Available methods\n   *\n   * @returns {Events}\n   */\n  get methods() {\n    return {\n      emit: (e, t) => this.emit(e, t),\n      off: (e, t) => this.off(e, t),\n      on: (e, t) => this.on(e, t)\n    };\n  }\n  /**\n   * Subscribe on Events\n   *\n   * @param {string} eventName - event name to subscribe\n   * @param {Function} callback - event handler\n   */\n  on(e, t) {\n    this.eventsDispatcher.on(e, t);\n  }\n  /**\n   * Emit event with data\n   *\n   * @param {string} eventName - event to emit\n   * @param {object} data - event's data\n   */\n  emit(e, t) {\n    this.eventsDispatcher.emit(e, t);\n  }\n  /**\n   * Unsubscribe from Event\n   *\n   * @param {string} eventName - event to unsubscribe\n   * @param {Function} callback - event handler\n   */\n  off(e, t) {\n    this.eventsDispatcher.off(e, t);\n  }\n}\nclass kt extends E {\n  /**\n   * Return namespace section for tool or block tune\n   *\n   * @param toolName - tool name\n   * @param isTune - is tool a block tune\n   */\n  static getNamespace(e, t) {\n    return t ? `blockTunes.${e}` : `tools.${e}`;\n  }\n  /**\n   * Return I18n API methods with global dictionary access\n   */\n  get methods() {\n    return {\n      t: () => {\n        X(\"I18n.t() method can be accessed only from Tools\", \"warn\");\n      }\n    };\n  }\n  /**\n   * Return I18n API methods with tool namespaced dictionary\n   *\n   * @param toolName - tool name\n   * @param isTune - is tool a block tune\n   */\n  getMethodsForTool(e, t) {\n    return Object.assign(\n      this.methods,\n      {\n        t: (o) => z.t(kt.getNamespace(e, t), o)\n      }\n    );\n  }\n}\nclass ki extends E {\n  /**\n   * Editor.js Core API modules\n   */\n  get methods() {\n    return {\n      blocks: this.Editor.BlocksAPI.methods,\n      caret: this.Editor.CaretAPI.methods,\n      tools: this.Editor.ToolsAPI.methods,\n      events: this.Editor.EventsAPI.methods,\n      listeners: this.Editor.ListenersAPI.methods,\n      notifier: this.Editor.NotifierAPI.methods,\n      sanitizer: this.Editor.SanitizerAPI.methods,\n      saver: this.Editor.SaverAPI.methods,\n      selection: this.Editor.SelectionAPI.methods,\n      styles: this.Editor.StylesAPI.classes,\n      toolbar: this.Editor.ToolbarAPI.methods,\n      inlineToolbar: this.Editor.InlineToolbarAPI.methods,\n      tooltip: this.Editor.TooltipAPI.methods,\n      i18n: this.Editor.I18nAPI.methods,\n      readOnly: this.Editor.ReadOnlyAPI.methods,\n      ui: this.Editor.UiAPI.methods\n    };\n  }\n  /**\n   * Returns Editor.js Core API methods for passed tool\n   *\n   * @param toolName - tool name\n   * @param isTune - is tool a block tune\n   */\n  getMethodsForTool(e, t) {\n    return Object.assign(\n      this.methods,\n      {\n        i18n: this.Editor.I18nAPI.getMethodsForTool(e, t)\n      }\n    );\n  }\n}\nclass yi extends E {\n  /**\n   * Available methods\n   *\n   * @returns {InlineToolbar}\n   */\n  get methods() {\n    return {\n      close: () => this.close(),\n      open: () => this.open()\n    };\n  }\n  /**\n   * Open Inline Toolbar\n   */\n  open() {\n    this.Editor.InlineToolbar.tryToShow();\n  }\n  /**\n   * Close Inline Toolbar\n   */\n  close() {\n    this.Editor.InlineToolbar.close();\n  }\n}\nclass wi extends E {\n  /**\n   * Available methods\n   *\n   * @returns {Listeners}\n   */\n  get methods() {\n    return {\n      on: (e, t, o, i) => this.on(e, t, o, i),\n      off: (e, t, o, i) => this.off(e, t, o, i),\n      offById: (e) => this.offById(e)\n    };\n  }\n  /**\n   * Ads a DOM event listener. Return it's id.\n   *\n   * @param {HTMLElement} element - Element to set handler to\n   * @param {string} eventType - event type\n   * @param {() => void} handler - event handler\n   * @param {boolean} useCapture - capture event or not\n   */\n  on(e, t, o, i) {\n    return this.listeners.on(e, t, o, i);\n  }\n  /**\n   * Removes DOM listener from element\n   *\n   * @param {Element} element - Element to remove handler from\n   * @param eventType - event type\n   * @param handler - event handler\n   * @param {boolean} useCapture - capture event or not\n   */\n  off(e, t, o, i) {\n    this.listeners.off(e, t, o, i);\n  }\n  /**\n   * Removes DOM listener by the listener id\n   *\n   * @param id - id of the listener to remove\n   */\n  offById(e) {\n    this.listeners.offById(e);\n  }\n}\nvar Ko = { exports: {} };\n(function(n, e) {\n  (function(t, o) {\n    n.exports = o();\n  })(window, function() {\n    return function(t) {\n      var o = {};\n      function i(s) {\n        if (o[s])\n          return o[s].exports;\n        var r = o[s] = { i: s, l: !1, exports: {} };\n        return t[s].call(r.exports, r, r.exports, i), r.l = !0, r.exports;\n      }\n      return i.m = t, i.c = o, i.d = function(s, r, a) {\n        i.o(s, r) || Object.defineProperty(s, r, { enumerable: !0, get: a });\n      }, i.r = function(s) {\n        typeof Symbol < \"u\" && Symbol.toStringTag && Object.defineProperty(s, Symbol.toStringTag, { value: \"Module\" }), Object.defineProperty(s, \"__esModule\", { value: !0 });\n      }, i.t = function(s, r) {\n        if (1 & r && (s = i(s)), 8 & r || 4 & r && typeof s == \"object\" && s && s.__esModule)\n          return s;\n        var a = /* @__PURE__ */ Object.create(null);\n        if (i.r(a), Object.defineProperty(a, \"default\", { enumerable: !0, value: s }), 2 & r && typeof s != \"string\")\n          for (var l in s)\n            i.d(a, l, (function(c) {\n              return s[c];\n            }).bind(null, l));\n        return a;\n      }, i.n = function(s) {\n        var r = s && s.__esModule ? function() {\n          return s.default;\n        } : function() {\n          return s;\n        };\n        return i.d(r, \"a\", r), r;\n      }, i.o = function(s, r) {\n        return Object.prototype.hasOwnProperty.call(s, r);\n      }, i.p = \"/\", i(i.s = 0);\n    }([function(t, o, i) {\n      i(1), /*!\n       * Codex JavaScript Notification module\n       * https://github.com/codex-team/js-notifier\n       */\n      t.exports = function() {\n        var s = i(6), r = \"cdx-notify--bounce-in\", a = null;\n        return { show: function(l) {\n          if (l.message) {\n            (function() {\n              if (a)\n                return !0;\n              a = s.getWrapper(), document.body.appendChild(a);\n            })();\n            var c = null, u = l.time || 8e3;\n            switch (l.type) {\n              case \"confirm\":\n                c = s.confirm(l);\n                break;\n              case \"prompt\":\n                c = s.prompt(l);\n                break;\n              default:\n                c = s.alert(l), window.setTimeout(function() {\n                  c.remove();\n                }, u);\n            }\n            a.appendChild(c), c.classList.add(r);\n          }\n        } };\n      }();\n    }, function(t, o, i) {\n      var s = i(2);\n      typeof s == \"string\" && (s = [[t.i, s, \"\"]]);\n      var r = { hmr: !0, transform: void 0, insertInto: void 0 };\n      i(4)(s, r), s.locals && (t.exports = s.locals);\n    }, function(t, o, i) {\n      (t.exports = i(3)(!1)).push([t.i, `.cdx-notify--error{background:#fffbfb!important}.cdx-notify--error::before{background:#fb5d5d!important}.cdx-notify__input{max-width:130px;padding:5px 10px;background:#f7f7f7;border:0;border-radius:3px;font-size:13px;color:#656b7c;outline:0}.cdx-notify__input:-ms-input-placeholder{color:#656b7c}.cdx-notify__input::placeholder{color:#656b7c}.cdx-notify__input:focus:-ms-input-placeholder{color:rgba(101,107,124,.3)}.cdx-notify__input:focus::placeholder{color:rgba(101,107,124,.3)}.cdx-notify__button{border:none;border-radius:3px;font-size:13px;padding:5px 10px;cursor:pointer}.cdx-notify__button:last-child{margin-left:10px}.cdx-notify__button--cancel{background:#f2f5f7;box-shadow:0 2px 1px 0 rgba(16,19,29,0);color:#656b7c}.cdx-notify__button--cancel:hover{background:#eee}.cdx-notify__button--confirm{background:#34c992;box-shadow:0 1px 1px 0 rgba(18,49,35,.05);color:#fff}.cdx-notify__button--confirm:hover{background:#33b082}.cdx-notify__btns-wrapper{display:-ms-flexbox;display:flex;-ms-flex-flow:row nowrap;flex-flow:row nowrap;margin-top:5px}.cdx-notify__cross{position:absolute;top:5px;right:5px;width:10px;height:10px;padding:5px;opacity:.54;cursor:pointer}.cdx-notify__cross::after,.cdx-notify__cross::before{content:'';position:absolute;left:9px;top:5px;height:12px;width:2px;background:#575d67}.cdx-notify__cross::before{transform:rotate(-45deg)}.cdx-notify__cross::after{transform:rotate(45deg)}.cdx-notify__cross:hover{opacity:1}.cdx-notifies{position:fixed;z-index:2;bottom:20px;left:20px;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen,Ubuntu,Cantarell,\"Fira Sans\",\"Droid Sans\",\"Helvetica Neue\",sans-serif}.cdx-notify{position:relative;width:220px;margin-top:15px;padding:13px 16px;background:#fff;box-shadow:0 11px 17px 0 rgba(23,32,61,.13);border-radius:5px;font-size:14px;line-height:1.4em;word-wrap:break-word}.cdx-notify::before{content:'';position:absolute;display:block;top:0;left:0;width:3px;height:calc(100% - 6px);margin:3px;border-radius:5px;background:0 0}@keyframes bounceIn{0%{opacity:0;transform:scale(.3)}50%{opacity:1;transform:scale(1.05)}70%{transform:scale(.9)}100%{transform:scale(1)}}.cdx-notify--bounce-in{animation-name:bounceIn;animation-duration:.6s;animation-iteration-count:1}.cdx-notify--success{background:#fafffe!important}.cdx-notify--success::before{background:#41ffb1!important}`, \"\"]);\n    }, function(t, o) {\n      t.exports = function(i) {\n        var s = [];\n        return s.toString = function() {\n          return this.map(function(r) {\n            var a = function(l, c) {\n              var u = l[1] || \"\", h = l[3];\n              if (!h)\n                return u;\n              if (c && typeof btoa == \"function\") {\n                var p = (f = h, \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(f)))) + \" */\"), g = h.sources.map(function(v) {\n                  return \"/*# sourceURL=\" + h.sourceRoot + v + \" */\";\n                });\n                return [u].concat(g).concat([p]).join(`\n`);\n              }\n              var f;\n              return [u].join(`\n`);\n            }(r, i);\n            return r[2] ? \"@media \" + r[2] + \"{\" + a + \"}\" : a;\n          }).join(\"\");\n        }, s.i = function(r, a) {\n          typeof r == \"string\" && (r = [[null, r, \"\"]]);\n          for (var l = {}, c = 0; c < this.length; c++) {\n            var u = this[c][0];\n            typeof u == \"number\" && (l[u] = !0);\n          }\n          for (c = 0; c < r.length; c++) {\n            var h = r[c];\n            typeof h[0] == \"number\" && l[h[0]] || (a && !h[2] ? h[2] = a : a && (h[2] = \"(\" + h[2] + \") and (\" + a + \")\"), s.push(h));\n          }\n        }, s;\n      };\n    }, function(t, o, i) {\n      var s, r, a = {}, l = (s = function() {\n        return window && document && document.all && !window.atob;\n      }, function() {\n        return r === void 0 && (r = s.apply(this, arguments)), r;\n      }), c = function(k) {\n        var m = {};\n        return function(w) {\n          if (typeof w == \"function\")\n            return w();\n          if (m[w] === void 0) {\n            var x = (function(I) {\n              return document.querySelector(I);\n            }).call(this, w);\n            if (window.HTMLIFrameElement && x instanceof window.HTMLIFrameElement)\n              try {\n                x = x.contentDocument.head;\n              } catch {\n                x = null;\n              }\n            m[w] = x;\n          }\n          return m[w];\n        };\n      }(), u = null, h = 0, p = [], g = i(5);\n      function f(k, m) {\n        for (var w = 0; w < k.length; w++) {\n          var x = k[w], I = a[x.id];\n          if (I) {\n            I.refs++;\n            for (var C = 0; C < I.parts.length; C++)\n              I.parts[C](x.parts[C]);\n            for (; C < x.parts.length; C++)\n              I.parts.push(F(x.parts[C], m));\n          } else {\n            var N = [];\n            for (C = 0; C < x.parts.length; C++)\n              N.push(F(x.parts[C], m));\n            a[x.id] = { id: x.id, refs: 1, parts: N };\n          }\n        }\n      }\n      function v(k, m) {\n        for (var w = [], x = {}, I = 0; I < k.length; I++) {\n          var C = k[I], N = m.base ? C[0] + m.base : C[0], B = { css: C[1], media: C[2], sourceMap: C[3] };\n          x[N] ? x[N].parts.push(B) : w.push(x[N] = { id: N, parts: [B] });\n        }\n        return w;\n      }\n      function O(k, m) {\n        var w = c(k.insertInto);\n        if (!w)\n          throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");\n        var x = p[p.length - 1];\n        if (k.insertAt === \"top\")\n          x ? x.nextSibling ? w.insertBefore(m, x.nextSibling) : w.appendChild(m) : w.insertBefore(m, w.firstChild), p.push(m);\n        else if (k.insertAt === \"bottom\")\n          w.appendChild(m);\n        else {\n          if (typeof k.insertAt != \"object\" || !k.insertAt.before)\n            throw new Error(`[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n`);\n          var I = c(k.insertInto + \" \" + k.insertAt.before);\n          w.insertBefore(m, I);\n        }\n      }\n      function T(k) {\n        if (k.parentNode === null)\n          return !1;\n        k.parentNode.removeChild(k);\n        var m = p.indexOf(k);\n        m >= 0 && p.splice(m, 1);\n      }\n      function M(k) {\n        var m = document.createElement(\"style\");\n        return k.attrs.type === void 0 && (k.attrs.type = \"text/css\"), q(m, k.attrs), O(k, m), m;\n      }\n      function q(k, m) {\n        Object.keys(m).forEach(function(w) {\n          k.setAttribute(w, m[w]);\n        });\n      }\n      function F(k, m) {\n        var w, x, I, C;\n        if (m.transform && k.css) {\n          if (!(C = m.transform(k.css)))\n            return function() {\n            };\n          k.css = C;\n        }\n        if (m.singleton) {\n          var N = h++;\n          w = u || (u = M(m)), x = ie.bind(null, w, N, !1), I = ie.bind(null, w, N, !0);\n        } else\n          k.sourceMap && typeof URL == \"function\" && typeof URL.createObjectURL == \"function\" && typeof URL.revokeObjectURL == \"function\" && typeof Blob == \"function\" && typeof btoa == \"function\" ? (w = function(B) {\n            var W = document.createElement(\"link\");\n            return B.attrs.type === void 0 && (B.attrs.type = \"text/css\"), B.attrs.rel = \"stylesheet\", q(W, B.attrs), O(B, W), W;\n          }(m), x = (function(B, W, ve) {\n            var se = ve.css, tt = ve.sourceMap, Yn = W.convertToAbsoluteUrls === void 0 && tt;\n            (W.convertToAbsoluteUrls || Yn) && (se = g(se)), tt && (se += `\n/*# sourceMappingURL=data:application/json;base64,` + btoa(unescape(encodeURIComponent(JSON.stringify(tt)))) + \" */\");\n            var Kn = new Blob([se], { type: \"text/css\" }), ko = B.href;\n            B.href = URL.createObjectURL(Kn), ko && URL.revokeObjectURL(ko);\n          }).bind(null, w, m), I = function() {\n            T(w), w.href && URL.revokeObjectURL(w.href);\n          }) : (w = M(m), x = (function(B, W) {\n            var ve = W.css, se = W.media;\n            if (se && B.setAttribute(\"media\", se), B.styleSheet)\n              B.styleSheet.cssText = ve;\n            else {\n              for (; B.firstChild; )\n                B.removeChild(B.firstChild);\n              B.appendChild(document.createTextNode(ve));\n            }\n          }).bind(null, w), I = function() {\n            T(w);\n          });\n        return x(k), function(B) {\n          if (B) {\n            if (B.css === k.css && B.media === k.media && B.sourceMap === k.sourceMap)\n              return;\n            x(k = B);\n          } else\n            I();\n        };\n      }\n      t.exports = function(k, m) {\n        if (typeof DEBUG < \"u\" && DEBUG && typeof document != \"object\")\n          throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n        (m = m || {}).attrs = typeof m.attrs == \"object\" ? m.attrs : {}, m.singleton || typeof m.singleton == \"boolean\" || (m.singleton = l()), m.insertInto || (m.insertInto = \"head\"), m.insertAt || (m.insertAt = \"bottom\");\n        var w = v(k, m);\n        return f(w, m), function(x) {\n          for (var I = [], C = 0; C < w.length; C++) {\n            var N = w[C];\n            (B = a[N.id]).refs--, I.push(B);\n          }\n          for (x && f(v(x, m), m), C = 0; C < I.length; C++) {\n            var B;\n            if ((B = I[C]).refs === 0) {\n              for (var W = 0; W < B.parts.length; W++)\n                B.parts[W]();\n              delete a[B.id];\n            }\n          }\n        };\n      };\n      var H, Q = (H = [], function(k, m) {\n        return H[k] = m, H.filter(Boolean).join(`\n`);\n      });\n      function ie(k, m, w, x) {\n        var I = w ? \"\" : x.css;\n        if (k.styleSheet)\n          k.styleSheet.cssText = Q(m, I);\n        else {\n          var C = document.createTextNode(I), N = k.childNodes;\n          N[m] && k.removeChild(N[m]), N.length ? k.insertBefore(C, N[m]) : k.appendChild(C);\n        }\n      }\n    }, function(t, o) {\n      t.exports = function(i) {\n        var s = typeof window < \"u\" && window.location;\n        if (!s)\n          throw new Error(\"fixUrls requires window.location\");\n        if (!i || typeof i != \"string\")\n          return i;\n        var r = s.protocol + \"//\" + s.host, a = r + s.pathname.replace(/\\/[^\\/]*$/, \"/\");\n        return i.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function(l, c) {\n          var u, h = c.trim().replace(/^\"(.*)\"$/, function(p, g) {\n            return g;\n          }).replace(/^'(.*)'$/, function(p, g) {\n            return g;\n          });\n          return /^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/|\\s*$)/i.test(h) ? l : (u = h.indexOf(\"//\") === 0 ? h : h.indexOf(\"/\") === 0 ? r + h : a + h.replace(/^\\.\\//, \"\"), \"url(\" + JSON.stringify(u) + \")\");\n        });\n      };\n    }, function(t, o, i) {\n      var s, r, a, l, c, u, h, p, g;\n      t.exports = (s = \"cdx-notifies\", r = \"cdx-notify\", a = \"cdx-notify__cross\", l = \"cdx-notify__button--confirm\", c = \"cdx-notify__button--cancel\", u = \"cdx-notify__input\", h = \"cdx-notify__button\", p = \"cdx-notify__btns-wrapper\", { alert: g = function(f) {\n        var v = document.createElement(\"DIV\"), O = document.createElement(\"DIV\"), T = f.message, M = f.style;\n        return v.classList.add(r), M && v.classList.add(r + \"--\" + M), v.innerHTML = T, O.classList.add(a), O.addEventListener(\"click\", v.remove.bind(v)), v.appendChild(O), v;\n      }, confirm: function(f) {\n        var v = g(f), O = document.createElement(\"div\"), T = document.createElement(\"button\"), M = document.createElement(\"button\"), q = v.querySelector(\".\" + a), F = f.cancelHandler, H = f.okHandler;\n        return O.classList.add(p), T.innerHTML = f.okText || \"Confirm\", M.innerHTML = f.cancelText || \"Cancel\", T.classList.add(h), M.classList.add(h), T.classList.add(l), M.classList.add(c), F && typeof F == \"function\" && (M.addEventListener(\"click\", F), q.addEventListener(\"click\", F)), H && typeof H == \"function\" && T.addEventListener(\"click\", H), T.addEventListener(\"click\", v.remove.bind(v)), M.addEventListener(\"click\", v.remove.bind(v)), O.appendChild(T), O.appendChild(M), v.appendChild(O), v;\n      }, prompt: function(f) {\n        var v = g(f), O = document.createElement(\"div\"), T = document.createElement(\"button\"), M = document.createElement(\"input\"), q = v.querySelector(\".\" + a), F = f.cancelHandler, H = f.okHandler;\n        return O.classList.add(p), T.innerHTML = f.okText || \"Ok\", T.classList.add(h), T.classList.add(l), M.classList.add(u), f.placeholder && M.setAttribute(\"placeholder\", f.placeholder), f.default && (M.value = f.default), f.inputType && (M.type = f.inputType), F && typeof F == \"function\" && q.addEventListener(\"click\", F), H && typeof H == \"function\" && T.addEventListener(\"click\", function() {\n          H(M.value);\n        }), T.addEventListener(\"click\", v.remove.bind(v)), O.appendChild(M), O.appendChild(T), v.appendChild(O), v;\n      }, getWrapper: function() {\n        var f = document.createElement(\"DIV\");\n        return f.classList.add(s), f;\n      } });\n    }]);\n  });\n})(Ko);\nvar Ei = Ko.exports;\nconst xi = /* @__PURE__ */ Ke(Ei);\nclass Bi {\n  /**\n   * Show web notification\n   *\n   * @param {NotifierOptions | ConfirmNotifierOptions | PromptNotifierOptions} options - notification options\n   */\n  show(e) {\n    xi.show(e);\n  }\n}\nclass Ci extends E {\n  /**\n   * @param moduleConfiguration - Module Configuration\n   * @param moduleConfiguration.config - Editor's config\n   * @param moduleConfiguration.eventsDispatcher - Editor's event dispatcher\n   */\n  constructor({ config: e, eventsDispatcher: t }) {\n    super({\n      config: e,\n      eventsDispatcher: t\n    }), this.notifier = new Bi();\n  }\n  /**\n   * Available methods\n   */\n  get methods() {\n    return {\n      show: (e) => this.show(e)\n    };\n  }\n  /**\n   * Show notification\n   *\n   * @param {NotifierOptions} options - message option\n   */\n  show(e) {\n    return this.notifier.show(e);\n  }\n}\nclass Ti extends E {\n  /**\n   * Available methods\n   */\n  get methods() {\n    const e = () => this.isEnabled;\n    return {\n      toggle: (t) => this.toggle(t),\n      get isEnabled() {\n        return e();\n      }\n    };\n  }\n  /**\n   * Set or toggle read-only state\n   *\n   * @param {boolean|undefined} state - set or toggle state\n   * @returns {boolean} current value\n   */\n  toggle(e) {\n    return this.Editor.ReadOnly.toggle(e);\n  }\n  /**\n   * Returns current read-only state\n   */\n  get isEnabled() {\n    return this.Editor.ReadOnly.isEnabled;\n  }\n}\nvar Xo = { exports: {} };\n(function(n, e) {\n  (function(t, o) {\n    n.exports = o();\n  })(Ce, function() {\n    function t(h) {\n      var p = h.tags, g = Object.keys(p), f = g.map(function(v) {\n        return typeof p[v];\n      }).every(function(v) {\n        return v === \"object\" || v === \"boolean\" || v === \"function\";\n      });\n      if (!f)\n        throw new Error(\"The configuration was invalid\");\n      this.config = h;\n    }\n    var o = [\"P\", \"LI\", \"TD\", \"TH\", \"DIV\", \"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\", \"PRE\"];\n    function i(h) {\n      return o.indexOf(h.nodeName) !== -1;\n    }\n    var s = [\"A\", \"B\", \"STRONG\", \"I\", \"EM\", \"SUB\", \"SUP\", \"U\", \"STRIKE\"];\n    function r(h) {\n      return s.indexOf(h.nodeName) !== -1;\n    }\n    t.prototype.clean = function(h) {\n      const p = document.implementation.createHTMLDocument(), g = p.createElement(\"div\");\n      return g.innerHTML = h, this._sanitize(p, g), g.innerHTML;\n    }, t.prototype._sanitize = function(h, p) {\n      var g = a(h, p), f = g.firstChild();\n      if (f)\n        do {\n          if (f.nodeType === Node.TEXT_NODE)\n            if (f.data.trim() === \"\" && (f.previousElementSibling && i(f.previousElementSibling) || f.nextElementSibling && i(f.nextElementSibling))) {\n              p.removeChild(f), this._sanitize(h, p);\n              break;\n            } else\n              continue;\n          if (f.nodeType === Node.COMMENT_NODE) {\n            p.removeChild(f), this._sanitize(h, p);\n            break;\n          }\n          var v = r(f), O;\n          v && (O = Array.prototype.some.call(f.childNodes, i));\n          var T = !!p.parentNode, M = i(p) && i(f) && T, q = f.nodeName.toLowerCase(), F = l(this.config, q, f), H = v && O;\n          if (H || c(f, F) || !this.config.keepNestedBlockElements && M) {\n            if (!(f.nodeName === \"SCRIPT\" || f.nodeName === \"STYLE\"))\n              for (; f.childNodes.length > 0; )\n                p.insertBefore(f.childNodes[0], f);\n            p.removeChild(f), this._sanitize(h, p);\n            break;\n          }\n          for (var Q = 0; Q < f.attributes.length; Q += 1) {\n            var ie = f.attributes[Q];\n            u(ie, F, f) && (f.removeAttribute(ie.name), Q = Q - 1);\n          }\n          this._sanitize(h, f);\n        } while (f = g.nextSibling());\n    };\n    function a(h, p) {\n      return h.createTreeWalker(\n        p,\n        NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT,\n        null,\n        !1\n      );\n    }\n    function l(h, p, g) {\n      return typeof h.tags[p] == \"function\" ? h.tags[p](g) : h.tags[p];\n    }\n    function c(h, p) {\n      return typeof p > \"u\" ? !0 : typeof p == \"boolean\" ? !p : !1;\n    }\n    function u(h, p, g) {\n      var f = h.name.toLowerCase();\n      return p === !0 ? !1 : typeof p[f] == \"function\" ? !p[f](h.value, g) : typeof p[f] > \"u\" || p[f] === !1 ? !0 : typeof p[f] == \"string\" ? p[f] !== h.value : !1;\n    }\n    return t;\n  });\n})(Xo);\nvar Si = Xo.exports;\nconst Ii = /* @__PURE__ */ Ke(Si);\nfunction yt(n, e) {\n  return n.map((t) => {\n    const o = A(e) ? e(t.tool) : e;\n    return V(o) || (t.data = wt(t.data, o)), t;\n  });\n}\nfunction Z(n, e = {}) {\n  const t = {\n    tags: e\n  };\n  return new Ii(t).clean(n);\n}\nfunction wt(n, e) {\n  return Array.isArray(n) ? Oi(n, e) : D(n) ? _i(n, e) : te(n) ? Mi(n, e) : n;\n}\nfunction Oi(n, e) {\n  return n.map((t) => wt(t, e));\n}\nfunction _i(n, e) {\n  const t = {};\n  for (const o in n) {\n    if (!Object.prototype.hasOwnProperty.call(n, o))\n      continue;\n    const i = n[o], s = Ai(e[o]) ? e[o] : e;\n    t[o] = wt(i, s);\n  }\n  return t;\n}\nfunction Mi(n, e) {\n  return D(e) ? Z(n, e) : e === !1 ? Z(n, {}) : n;\n}\nfunction Ai(n) {\n  return D(n) || Gn(n) || A(n);\n}\nclass Li extends E {\n  /**\n   * Available methods\n   *\n   * @returns {SanitizerConfig}\n   */\n  get methods() {\n    return {\n      clean: (e, t) => this.clean(e, t)\n    };\n  }\n  /**\n   * Perform sanitizing of a string\n   *\n   * @param {string} taintString - what to sanitize\n   * @param {SanitizerConfig} config - sanitizer config\n   * @returns {string}\n   */\n  clean(e, t) {\n    return Z(e, t);\n  }\n}\nclass Pi extends E {\n  /**\n   * Available methods\n   *\n   * @returns {Saver}\n   */\n  get methods() {\n    return {\n      save: () => this.save()\n    };\n  }\n  /**\n   * Return Editor's data\n   *\n   * @returns {OutputData}\n   */\n  save() {\n    const e = \"Editor's content can not be saved in read-only mode\";\n    return this.Editor.ReadOnly.isEnabled ? (X(e, \"warn\"), Promise.reject(new Error(e))) : this.Editor.Saver.save();\n  }\n}\nclass Ni extends E {\n  constructor() {\n    super(...arguments), this.selectionUtils = new b();\n  }\n  /**\n   * Available methods\n   *\n   * @returns {SelectionAPIInterface}\n   */\n  get methods() {\n    return {\n      findParentTag: (e, t) => this.findParentTag(e, t),\n      expandToTag: (e) => this.expandToTag(e),\n      save: () => this.selectionUtils.save(),\n      restore: () => this.selectionUtils.restore(),\n      setFakeBackground: () => this.selectionUtils.setFakeBackground(),\n      removeFakeBackground: () => this.selectionUtils.removeFakeBackground()\n    };\n  }\n  /**\n   * Looks ahead from selection and find passed tag with class name\n   *\n   * @param {string} tagName - tag to find\n   * @param {string} className - tag's class name\n   * @returns {HTMLElement|null}\n   */\n  findParentTag(e, t) {\n    return this.selectionUtils.findParentTag(e, t);\n  }\n  /**\n   * Expand selection to passed tag\n   *\n   * @param {HTMLElement} node - tag that should contain selection\n   */\n  expandToTag(e) {\n    this.selectionUtils.expandToTag(e);\n  }\n}\nclass Ri extends E {\n  /**\n   * Available methods\n   */\n  get methods() {\n    return {\n      getBlockTools: () => Array.from(this.Editor.Tools.blockTools.values())\n    };\n  }\n}\nclass Di extends E {\n  /**\n   * Exported classes\n   */\n  get classes() {\n    return {\n      /**\n       * Base Block styles\n       */\n      block: \"cdx-block\",\n      /**\n       * Inline Tools styles\n       */\n      inlineToolButton: \"ce-inline-tool\",\n      inlineToolButtonActive: \"ce-inline-tool--active\",\n      /**\n       * UI elements\n       */\n      input: \"cdx-input\",\n      loader: \"cdx-loader\",\n      button: \"cdx-button\",\n      /**\n       * Settings styles\n       */\n      settingsButton: \"cdx-settings-button\",\n      settingsButtonActive: \"cdx-settings-button--active\"\n    };\n  }\n}\nclass Fi extends E {\n  /**\n   * Available methods\n   *\n   * @returns {Toolbar}\n   */\n  get methods() {\n    return {\n      close: () => this.close(),\n      open: () => this.open(),\n      toggleBlockSettings: (e) => this.toggleBlockSettings(e),\n      toggleToolbox: (e) => this.toggleToolbox(e)\n    };\n  }\n  /**\n   * Open toolbar\n   */\n  open() {\n    this.Editor.Toolbar.moveAndOpen();\n  }\n  /**\n   * Close toolbar and all included elements\n   */\n  close() {\n    this.Editor.Toolbar.close();\n  }\n  /**\n   * Toggles Block Setting of the current block\n   *\n   * @param {boolean} openingState —  opening state of Block Setting\n   */\n  toggleBlockSettings(e) {\n    if (this.Editor.BlockManager.currentBlockIndex === -1) {\n      X(\"Could't toggle the Toolbar because there is no block selected \", \"warn\");\n      return;\n    }\n    e ?? !this.Editor.BlockSettings.opened ? (this.Editor.Toolbar.moveAndOpen(), this.Editor.BlockSettings.open()) : this.Editor.BlockSettings.close();\n  }\n  /**\n   * Open toolbox\n   *\n   * @param {boolean} openingState - Opening state of toolbox\n   */\n  toggleToolbox(e) {\n    if (this.Editor.BlockManager.currentBlockIndex === -1) {\n      X(\"Could't toggle the Toolbox because there is no block selected \", \"warn\");\n      return;\n    }\n    e ?? !this.Editor.Toolbar.toolbox.opened ? (this.Editor.Toolbar.moveAndOpen(), this.Editor.Toolbar.toolbox.open()) : this.Editor.Toolbar.toolbox.close();\n  }\n}\nvar Vo = { exports: {} };\n/*!\n * CodeX.Tooltips\n * \n * @version 1.0.5\n * \n * @licence MIT\n * @author CodeX <https://codex.so>\n * \n * \n */\n(function(n, e) {\n  (function(t, o) {\n    n.exports = o();\n  })(window, function() {\n    return function(t) {\n      var o = {};\n      function i(s) {\n        if (o[s])\n          return o[s].exports;\n        var r = o[s] = { i: s, l: !1, exports: {} };\n        return t[s].call(r.exports, r, r.exports, i), r.l = !0, r.exports;\n      }\n      return i.m = t, i.c = o, i.d = function(s, r, a) {\n        i.o(s, r) || Object.defineProperty(s, r, { enumerable: !0, get: a });\n      }, i.r = function(s) {\n        typeof Symbol < \"u\" && Symbol.toStringTag && Object.defineProperty(s, Symbol.toStringTag, { value: \"Module\" }), Object.defineProperty(s, \"__esModule\", { value: !0 });\n      }, i.t = function(s, r) {\n        if (1 & r && (s = i(s)), 8 & r || 4 & r && typeof s == \"object\" && s && s.__esModule)\n          return s;\n        var a = /* @__PURE__ */ Object.create(null);\n        if (i.r(a), Object.defineProperty(a, \"default\", { enumerable: !0, value: s }), 2 & r && typeof s != \"string\")\n          for (var l in s)\n            i.d(a, l, (function(c) {\n              return s[c];\n            }).bind(null, l));\n        return a;\n      }, i.n = function(s) {\n        var r = s && s.__esModule ? function() {\n          return s.default;\n        } : function() {\n          return s;\n        };\n        return i.d(r, \"a\", r), r;\n      }, i.o = function(s, r) {\n        return Object.prototype.hasOwnProperty.call(s, r);\n      }, i.p = \"\", i(i.s = 0);\n    }([function(t, o, i) {\n      t.exports = i(1);\n    }, function(t, o, i) {\n      i.r(o), i.d(o, \"default\", function() {\n        return s;\n      });\n      class s {\n        constructor() {\n          this.nodes = { wrapper: null, content: null }, this.showed = !1, this.offsetTop = 10, this.offsetLeft = 10, this.offsetRight = 10, this.hidingDelay = 0, this.handleWindowScroll = () => {\n            this.showed && this.hide(!0);\n          }, this.loadStyles(), this.prepare(), window.addEventListener(\"scroll\", this.handleWindowScroll, { passive: !0 });\n        }\n        get CSS() {\n          return { tooltip: \"ct\", tooltipContent: \"ct__content\", tooltipShown: \"ct--shown\", placement: { left: \"ct--left\", bottom: \"ct--bottom\", right: \"ct--right\", top: \"ct--top\" } };\n        }\n        show(a, l, c) {\n          this.nodes.wrapper || this.prepare(), this.hidingTimeout && clearTimeout(this.hidingTimeout);\n          const u = Object.assign({ placement: \"bottom\", marginTop: 0, marginLeft: 0, marginRight: 0, marginBottom: 0, delay: 70, hidingDelay: 0 }, c);\n          if (u.hidingDelay && (this.hidingDelay = u.hidingDelay), this.nodes.content.innerHTML = \"\", typeof l == \"string\")\n            this.nodes.content.appendChild(document.createTextNode(l));\n          else {\n            if (!(l instanceof Node))\n              throw Error(\"[CodeX Tooltip] Wrong type of «content» passed. It should be an instance of Node or String. But \" + typeof l + \" given.\");\n            this.nodes.content.appendChild(l);\n          }\n          switch (this.nodes.wrapper.classList.remove(...Object.values(this.CSS.placement)), u.placement) {\n            case \"top\":\n              this.placeTop(a, u);\n              break;\n            case \"left\":\n              this.placeLeft(a, u);\n              break;\n            case \"right\":\n              this.placeRight(a, u);\n              break;\n            case \"bottom\":\n            default:\n              this.placeBottom(a, u);\n          }\n          u && u.delay ? this.showingTimeout = setTimeout(() => {\n            this.nodes.wrapper.classList.add(this.CSS.tooltipShown), this.showed = !0;\n          }, u.delay) : (this.nodes.wrapper.classList.add(this.CSS.tooltipShown), this.showed = !0);\n        }\n        hide(a = !1) {\n          if (this.hidingDelay && !a)\n            return this.hidingTimeout && clearTimeout(this.hidingTimeout), void (this.hidingTimeout = setTimeout(() => {\n              this.hide(!0);\n            }, this.hidingDelay));\n          this.nodes.wrapper.classList.remove(this.CSS.tooltipShown), this.showed = !1, this.showingTimeout && clearTimeout(this.showingTimeout);\n        }\n        onHover(a, l, c) {\n          a.addEventListener(\"mouseenter\", () => {\n            this.show(a, l, c);\n          }), a.addEventListener(\"mouseleave\", () => {\n            this.hide();\n          });\n        }\n        destroy() {\n          this.nodes.wrapper.remove(), window.removeEventListener(\"scroll\", this.handleWindowScroll);\n        }\n        prepare() {\n          this.nodes.wrapper = this.make(\"div\", this.CSS.tooltip), this.nodes.content = this.make(\"div\", this.CSS.tooltipContent), this.append(this.nodes.wrapper, this.nodes.content), this.append(document.body, this.nodes.wrapper);\n        }\n        loadStyles() {\n          const a = \"codex-tooltips-style\";\n          if (document.getElementById(a))\n            return;\n          const l = i(2), c = this.make(\"style\", null, { textContent: l.toString(), id: a });\n          this.prepend(document.head, c);\n        }\n        placeBottom(a, l) {\n          const c = a.getBoundingClientRect(), u = c.left + a.clientWidth / 2 - this.nodes.wrapper.offsetWidth / 2, h = c.bottom + window.pageYOffset + this.offsetTop + l.marginTop;\n          this.applyPlacement(\"bottom\", u, h);\n        }\n        placeTop(a, l) {\n          const c = a.getBoundingClientRect(), u = c.left + a.clientWidth / 2 - this.nodes.wrapper.offsetWidth / 2, h = c.top + window.pageYOffset - this.nodes.wrapper.clientHeight - this.offsetTop;\n          this.applyPlacement(\"top\", u, h);\n        }\n        placeLeft(a, l) {\n          const c = a.getBoundingClientRect(), u = c.left - this.nodes.wrapper.offsetWidth - this.offsetLeft - l.marginLeft, h = c.top + window.pageYOffset + a.clientHeight / 2 - this.nodes.wrapper.offsetHeight / 2;\n          this.applyPlacement(\"left\", u, h);\n        }\n        placeRight(a, l) {\n          const c = a.getBoundingClientRect(), u = c.right + this.offsetRight + l.marginRight, h = c.top + window.pageYOffset + a.clientHeight / 2 - this.nodes.wrapper.offsetHeight / 2;\n          this.applyPlacement(\"right\", u, h);\n        }\n        applyPlacement(a, l, c) {\n          this.nodes.wrapper.classList.add(this.CSS.placement[a]), this.nodes.wrapper.style.left = l + \"px\", this.nodes.wrapper.style.top = c + \"px\";\n        }\n        make(a, l = null, c = {}) {\n          const u = document.createElement(a);\n          Array.isArray(l) ? u.classList.add(...l) : l && u.classList.add(l);\n          for (const h in c)\n            c.hasOwnProperty(h) && (u[h] = c[h]);\n          return u;\n        }\n        append(a, l) {\n          Array.isArray(l) ? l.forEach((c) => a.appendChild(c)) : a.appendChild(l);\n        }\n        prepend(a, l) {\n          Array.isArray(l) ? (l = l.reverse()).forEach((c) => a.prepend(c)) : a.prepend(l);\n        }\n      }\n    }, function(t, o) {\n      t.exports = `.ct{z-index:999;opacity:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;pointer-events:none;-webkit-transition:opacity 50ms ease-in,-webkit-transform 70ms cubic-bezier(.215,.61,.355,1);transition:opacity 50ms ease-in,-webkit-transform 70ms cubic-bezier(.215,.61,.355,1);transition:opacity 50ms ease-in,transform 70ms cubic-bezier(.215,.61,.355,1);transition:opacity 50ms ease-in,transform 70ms cubic-bezier(.215,.61,.355,1),-webkit-transform 70ms cubic-bezier(.215,.61,.355,1);will-change:opacity,top,left;-webkit-box-shadow:0 8px 12px 0 rgba(29,32,43,.17),0 4px 5px -3px rgba(5,6,12,.49);box-shadow:0 8px 12px 0 rgba(29,32,43,.17),0 4px 5px -3px rgba(5,6,12,.49);border-radius:9px}.ct,.ct:before{position:absolute;top:0;left:0}.ct:before{content:\"\";bottom:0;right:0;background-color:#1d202b;z-index:-1;border-radius:4px}@supports(-webkit-mask-box-image:url(\"\")){.ct:before{border-radius:0;-webkit-mask-box-image:url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\"><path d=\"M10.71 0h2.58c3.02 0 4.64.42 6.1 1.2a8.18 8.18 0 013.4 3.4C23.6 6.07 24 7.7 24 10.71v2.58c0 3.02-.42 4.64-1.2 6.1a8.18 8.18 0 01-3.4 3.4c-1.47.8-3.1 1.21-6.11 1.21H10.7c-3.02 0-4.64-.42-6.1-1.2a8.18 8.18 0 01-3.4-3.4C.4 17.93 0 16.3 0 13.29V10.7c0-3.02.42-4.64 1.2-6.1a8.18 8.18 0 013.4-3.4C6.07.4 7.7 0 10.71 0z\"/></svg>') 48% 41% 37.9% 53.3%}}@media (--mobile){.ct{display:none}}.ct__content{padding:6px 10px;color:#cdd1e0;font-size:12px;text-align:center;letter-spacing:.02em;line-height:1em}.ct:after{content:\"\";width:8px;height:8px;position:absolute;background-color:#1d202b;z-index:-1}.ct--bottom{-webkit-transform:translateY(5px);transform:translateY(5px)}.ct--bottom:after{top:-3px;left:50%;-webkit-transform:translateX(-50%) rotate(-45deg);transform:translateX(-50%) rotate(-45deg)}.ct--top{-webkit-transform:translateY(-5px);transform:translateY(-5px)}.ct--top:after{top:auto;bottom:-3px;left:50%;-webkit-transform:translateX(-50%) rotate(-45deg);transform:translateX(-50%) rotate(-45deg)}.ct--left{-webkit-transform:translateX(-5px);transform:translateX(-5px)}.ct--left:after{top:50%;left:auto;right:0;-webkit-transform:translate(41.6%,-50%) rotate(-45deg);transform:translate(41.6%,-50%) rotate(-45deg)}.ct--right{-webkit-transform:translateX(5px);transform:translateX(5px)}.ct--right:after{top:50%;left:0;-webkit-transform:translate(-41.6%,-50%) rotate(-45deg);transform:translate(-41.6%,-50%) rotate(-45deg)}.ct--shown{opacity:1;-webkit-transform:none;transform:none}`;\n    }]).default;\n  });\n})(Vo);\nvar ji = Vo.exports;\nconst Hi = /* @__PURE__ */ Ke(ji);\nlet U = null;\nfunction Et() {\n  U || (U = new Hi());\n}\nfunction $i(n, e, t) {\n  Et(), U == null || U.show(n, e, t);\n}\nfunction $e(n = !1) {\n  Et(), U == null || U.hide(n);\n}\nfunction ze(n, e, t) {\n  Et(), U == null || U.onHover(n, e, t);\n}\nfunction zi() {\n  U == null || U.destroy(), U = null;\n}\nclass Ui extends E {\n  /**\n   * @class\n   * @param moduleConfiguration - Module Configuration\n   * @param moduleConfiguration.config - Editor's config\n   * @param moduleConfiguration.eventsDispatcher - Editor's event dispatcher\n   */\n  constructor({ config: e, eventsDispatcher: t }) {\n    super({\n      config: e,\n      eventsDispatcher: t\n    });\n  }\n  /**\n   * Available methods\n   */\n  get methods() {\n    return {\n      show: (e, t, o) => this.show(e, t, o),\n      hide: () => this.hide(),\n      onHover: (e, t, o) => this.onHover(e, t, o)\n    };\n  }\n  /**\n   * Method show tooltip on element with passed HTML content\n   *\n   * @param {HTMLElement} element - element on which tooltip should be shown\n   * @param {TooltipContent} content - tooltip content\n   * @param {TooltipOptions} options - tooltip options\n   */\n  show(e, t, o) {\n    $i(e, t, o);\n  }\n  /**\n   * Method hides tooltip on HTML page\n   */\n  hide() {\n    $e();\n  }\n  /**\n   * Decorator for showing Tooltip by mouseenter/mouseleave\n   *\n   * @param {HTMLElement} element - element on which tooltip should be shown\n   * @param {TooltipContent} content - tooltip content\n   * @param {TooltipOptions} options - tooltip options\n   */\n  onHover(e, t, o) {\n    ze(e, t, o);\n  }\n}\nclass Wi extends E {\n  /**\n   * Available methods / getters\n   */\n  get methods() {\n    return {\n      nodes: this.editorNodes\n      /**\n       * There can be added some UI methods, like toggleThinMode() etc\n       */\n    };\n  }\n  /**\n   * Exported classes\n   */\n  get editorNodes() {\n    return {\n      /**\n       * Top-level editor instance wrapper\n       */\n      wrapper: this.Editor.UI.nodes.wrapper,\n      /**\n       * Element that holds all the Blocks\n       */\n      redactor: this.Editor.UI.nodes.redactor\n    };\n  }\n}\nfunction qo(n, e) {\n  const t = {};\n  return Object.entries(n).forEach(([o, i]) => {\n    if (D(i)) {\n      const s = e ? `${e}.${o}` : o;\n      Object.values(i).every((a) => te(a)) ? t[o] = s : t[o] = qo(i, s);\n      return;\n    }\n    t[o] = i;\n  }), t;\n}\nconst K = qo(Fo);\nfunction Yi(n, e) {\n  const t = {};\n  return Object.keys(n).forEach((o) => {\n    const i = e[o];\n    i !== void 0 ? t[i] = n[o] : t[o] = n[o];\n  }), t;\n}\nconst Zo = class Ee {\n  /**\n   * @param {HTMLElement[]} nodeList — the list of iterable HTML-items\n   * @param {string} focusedCssClass - user-provided CSS-class that will be set in flipping process\n   */\n  constructor(e, t) {\n    this.cursor = -1, this.items = [], this.items = e || [], this.focusedCssClass = t;\n  }\n  /**\n   * Returns Focused button Node\n   *\n   * @returns {HTMLElement}\n   */\n  get currentItem() {\n    return this.cursor === -1 ? null : this.items[this.cursor];\n  }\n  /**\n   * Sets cursor to specified position\n   *\n   * @param cursorPosition - new cursor position\n   */\n  setCursor(e) {\n    e < this.items.length && e >= -1 && (this.dropCursor(), this.cursor = e, this.items[this.cursor].classList.add(this.focusedCssClass));\n  }\n  /**\n   * Sets items. Can be used when iterable items changed dynamically\n   *\n   * @param {HTMLElement[]} nodeList - nodes to iterate\n   */\n  setItems(e) {\n    this.items = e;\n  }\n  /**\n   * Sets cursor next to the current\n   */\n  next() {\n    this.cursor = this.leafNodesAndReturnIndex(Ee.directions.RIGHT);\n  }\n  /**\n   * Sets cursor before current\n   */\n  previous() {\n    this.cursor = this.leafNodesAndReturnIndex(Ee.directions.LEFT);\n  }\n  /**\n   * Sets cursor to the default position and removes CSS-class from previously focused item\n   */\n  dropCursor() {\n    this.cursor !== -1 && (this.items[this.cursor].classList.remove(this.focusedCssClass), this.cursor = -1);\n  }\n  /**\n   * Leafs nodes inside the target list from active element\n   *\n   * @param {string} direction - leaf direction. Can be 'left' or 'right'\n   * @returns {number} index of focused node\n   */\n  leafNodesAndReturnIndex(e) {\n    if (this.items.length === 0)\n      return this.cursor;\n    let t = this.cursor;\n    return t === -1 ? t = e === Ee.directions.RIGHT ? -1 : 0 : this.items[t].classList.remove(this.focusedCssClass), e === Ee.directions.RIGHT ? t = (t + 1) % this.items.length : t = (this.items.length + t - 1) % this.items.length, d.canSetCaret(this.items[t]) && Fe(() => b.setCursor(this.items[t]), 50)(), this.items[t].classList.add(this.focusedCssClass), t;\n  }\n};\nZo.directions = {\n  RIGHT: \"right\",\n  LEFT: \"left\"\n};\nlet ke = Zo;\nclass ce {\n  /**\n   * @param options - different constructing settings\n   */\n  constructor(e) {\n    this.iterator = null, this.activated = !1, this.flipCallbacks = [], this.onKeyDown = (t) => {\n      if (this.isEventReadyForHandling(t))\n        switch (ce.usedKeys.includes(t.keyCode) && t.preventDefault(), t.keyCode) {\n          case y.TAB:\n            this.handleTabPress(t);\n            break;\n          case y.LEFT:\n          case y.UP:\n            this.flipLeft();\n            break;\n          case y.RIGHT:\n          case y.DOWN:\n            this.flipRight();\n            break;\n          case y.ENTER:\n            this.handleEnterPress(t);\n            break;\n        }\n    }, this.iterator = new ke(e.items, e.focusedItemClass), this.activateCallback = e.activateCallback, this.allowedKeys = e.allowedKeys || ce.usedKeys;\n  }\n  /**\n   * True if flipper is currently activated\n   */\n  get isActivated() {\n    return this.activated;\n  }\n  /**\n   * Array of keys (codes) that is handled by Flipper\n   * Used to:\n   *  - preventDefault only for this keys, not all keydowns (@see constructor)\n   *  - to skip external behaviours only for these keys, when filler is activated (@see BlockEvents@arrowRightAndDown)\n   */\n  static get usedKeys() {\n    return [\n      y.TAB,\n      y.LEFT,\n      y.RIGHT,\n      y.ENTER,\n      y.UP,\n      y.DOWN\n    ];\n  }\n  /**\n   * Active tab/arrows handling by flipper\n   *\n   * @param items - Some modules (like, InlineToolbar, BlockSettings) might refresh buttons dynamically\n   * @param cursorPosition - index of the item that should be focused once flipper is activated\n   */\n  activate(e, t) {\n    this.activated = !0, e && this.iterator.setItems(e), t !== void 0 && this.iterator.setCursor(t), document.addEventListener(\"keydown\", this.onKeyDown, !0);\n  }\n  /**\n   * Disable tab/arrows handling by flipper\n   */\n  deactivate() {\n    this.activated = !1, this.dropCursor(), document.removeEventListener(\"keydown\", this.onKeyDown);\n  }\n  /**\n   * Focus first item\n   */\n  focusFirst() {\n    this.dropCursor(), this.flipRight();\n  }\n  /**\n   * Focuses previous flipper iterator item\n   */\n  flipLeft() {\n    this.iterator.previous(), this.flipCallback();\n  }\n  /**\n   * Focuses next flipper iterator item\n   */\n  flipRight() {\n    this.iterator.next(), this.flipCallback();\n  }\n  /**\n   * Return true if some button is focused\n   */\n  hasFocus() {\n    return !!this.iterator.currentItem;\n  }\n  /**\n   * Registeres function that should be executed on each navigation action\n   *\n   * @param cb - function to execute\n   */\n  onFlip(e) {\n    this.flipCallbacks.push(e);\n  }\n  /**\n   * Unregisteres function that is executed on each navigation action\n   *\n   * @param cb - function to stop executing\n   */\n  removeOnFlip(e) {\n    this.flipCallbacks = this.flipCallbacks.filter((t) => t !== e);\n  }\n  /**\n   * Drops flipper's iterator cursor\n   *\n   * @see DomIterator#dropCursor\n   */\n  dropCursor() {\n    this.iterator.dropCursor();\n  }\n  /**\n   * This function is fired before handling flipper keycodes\n   * The result of this function defines if it is need to be handled or not\n   *\n   * @param {KeyboardEvent} event - keydown keyboard event\n   * @returns {boolean}\n   */\n  isEventReadyForHandling(e) {\n    return this.activated && this.allowedKeys.includes(e.keyCode);\n  }\n  /**\n   * When flipper is activated tab press will leaf the items\n   *\n   * @param {KeyboardEvent} event - tab keydown event\n   */\n  handleTabPress(e) {\n    switch (e.shiftKey ? ke.directions.LEFT : ke.directions.RIGHT) {\n      case ke.directions.RIGHT:\n        this.flipRight();\n        break;\n      case ke.directions.LEFT:\n        this.flipLeft();\n        break;\n    }\n  }\n  /**\n   * Enter press will click current item if flipper is activated\n   *\n   * @param {KeyboardEvent} event - enter keydown event\n   */\n  handleEnterPress(e) {\n    this.activated && (this.iterator.currentItem && (e.stopPropagation(), e.preventDefault(), this.iterator.currentItem.click()), A(this.activateCallback) && this.activateCallback(this.iterator.currentItem));\n  }\n  /**\n   * Fired after flipping in any direction\n   */\n  flipCallback() {\n    this.iterator.currentItem && this.iterator.currentItem.scrollIntoViewIfNeeded(), this.flipCallbacks.forEach((e) => e());\n  }\n}\nconst Ki = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M9 12L9 7.1C9 7.04477 9.04477 7 9.1 7H10.4C11.5 7 14 7.1 14 9.5C14 9.5 14 12 11 12M9 12V16.8C9 16.9105 9.08954 17 9.2 17H12.5C14 17 15 16 15 14.5C15 11.7046 11 12 11 12M9 12H11\"/></svg>', Xi = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M7 10L11.8586 14.8586C11.9367 14.9367 12.0633 14.9367 12.1414 14.8586L17 10\"/></svg>', Vi = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M14.5 17.5L9.64142 12.6414C9.56331 12.5633 9.56331 12.4367 9.64142 12.3586L14.5 7.5\"/></svg>', qi = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M9.58284 17.5L14.4414 12.6414C14.5195 12.5633 14.5195 12.4367 14.4414 12.3586L9.58284 7.5\"/></svg>', Zi = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M7 15L11.8586 10.1414C11.9367 10.0633 12.0633 10.0633 12.1414 10.1414L17 15\"/></svg>', Gi = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M8 8L12 12M12 12L16 16M12 12L16 8M12 12L8 16\"/></svg>', Qi = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><circle cx=\"12\" cy=\"12\" r=\"4\" stroke=\"currentColor\" stroke-width=\"2\"/></svg>', Ji = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M13.34 10C12.4223 12.7337 11 17 11 17\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M14.21 7H14.2\"/></svg>', Co = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M7.69998 12.6L7.67896 12.62C6.53993 13.7048 6.52012 15.5155 7.63516 16.625V16.625C8.72293 17.7073 10.4799 17.7102 11.5712 16.6314L13.0263 15.193C14.0703 14.1609 14.2141 12.525 13.3662 11.3266L13.22 11.12\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M16.22 11.12L16.3564 10.9805C17.2895 10.0265 17.3478 8.5207 16.4914 7.49733V7.49733C15.5691 6.39509 13.9269 6.25143 12.8271 7.17675L11.3901 8.38588C10.0935 9.47674 9.95706 11.4241 11.0888 12.6852L11.12 12.72\"/></svg>', es = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M9.40999 7.29999H9.4\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M14.6 7.29999H14.59\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M9.30999 12H9.3\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M14.6 12H14.59\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M9.40999 16.7H9.4\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M14.6 16.7H14.59\"/></svg>', ts = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M12 7V12M12 17V12M17 12H12M12 12H7\"/></svg>', Go = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M11.5 17.5L5 11M5 11V15.5M5 11H9.5\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M12.5 6.5L19 13M19 13V8.5M19 13H14.5\"/></svg>', os = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><circle cx=\"10.5\" cy=\"10.5\" r=\"5.5\" stroke=\"currentColor\" stroke-width=\"2\"/><line x1=\"15.4142\" x2=\"19\" y1=\"15\" y2=\"18.5858\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/></svg>', ns = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M15.7795 11.5C15.7795 11.5 16.053 11.1962 16.5497 10.6722C17.4442 9.72856 17.4701 8.2475 16.5781 7.30145V7.30145C15.6482 6.31522 14.0873 6.29227 13.1288 7.25073L11.8796 8.49999\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M8.24517 12.3883C8.24517 12.3883 7.97171 12.6922 7.47504 13.2161C6.58051 14.1598 6.55467 15.6408 7.44666 16.5869V16.5869C8.37653 17.5731 9.93744 17.5961 10.8959 16.6376L12.1452 15.3883\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M17.7802 15.1032L16.597 14.9422C16.0109 14.8624 15.4841 15.3059 15.4627 15.8969L15.4199 17.0818\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M6.39064 9.03238L7.58432 9.06668C8.17551 9.08366 8.6522 8.58665 8.61056 7.99669L8.5271 6.81397\"/><line x1=\"12.1142\" x2=\"11.7\" y1=\"12.2\" y2=\"11.7858\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/></svg>', is = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><rect width=\"14\" height=\"14\" x=\"5\" y=\"5\" stroke=\"currentColor\" stroke-width=\"2\" rx=\"4\"/><line x1=\"12\" x2=\"12\" y1=\"9\" y2=\"12\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M12 15.02V15.01\"/></svg>', ss = \"__\", rs = \"--\";\nfunction ne(n) {\n  return (e, t) => [[n, e].filter((i) => !!i).join(ss), t].filter((i) => !!i).join(rs);\n}\nconst ye = ne(\"ce-hint\"), we = {\n  root: ye(),\n  alignedStart: ye(null, \"align-left\"),\n  alignedCenter: ye(null, \"align-center\"),\n  title: ye(\"title\"),\n  description: ye(\"description\")\n};\nclass as {\n  /**\n   * Constructs the hint content instance\n   *\n   * @param params - hint content parameters\n   */\n  constructor(e) {\n    this.nodes = {\n      root: d.make(\"div\", [we.root, e.alignment === \"center\" ? we.alignedCenter : we.alignedStart]),\n      title: d.make(\"div\", we.title, { textContent: e.title })\n    }, this.nodes.root.appendChild(this.nodes.title), e.description !== void 0 && (this.nodes.description = d.make(\"div\", we.description, { textContent: e.description }), this.nodes.root.appendChild(this.nodes.description));\n  }\n  /**\n   * Returns the root element of the hint content\n   */\n  getElement() {\n    return this.nodes.root;\n  }\n}\nclass xt {\n  /**\n   * Constructs the instance\n   *\n   * @param params - instance parameters\n   */\n  constructor(e) {\n    this.params = e;\n  }\n  /**\n   * Item name if exists\n   */\n  get name() {\n    if (this.params !== void 0 && \"name\" in this.params)\n      return this.params.name;\n  }\n  /**\n   * Destroys the instance\n   */\n  destroy() {\n    $e();\n  }\n  /**\n   * Called when children popover is opened (if exists)\n   */\n  onChildrenOpen() {\n    var e;\n    this.params !== void 0 && \"children\" in this.params && typeof ((e = this.params.children) == null ? void 0 : e.onOpen) == \"function\" && this.params.children.onOpen();\n  }\n  /**\n   * Called when children popover is closed (if exists)\n   */\n  onChildrenClose() {\n    var e;\n    this.params !== void 0 && \"children\" in this.params && typeof ((e = this.params.children) == null ? void 0 : e.onClose) == \"function\" && this.params.children.onClose();\n  }\n  /**\n   * Called on popover item click\n   */\n  handleClick() {\n    var e, t;\n    this.params !== void 0 && \"onActivate\" in this.params && ((t = (e = this.params).onActivate) == null || t.call(e, this.params));\n  }\n  /**\n   * Adds hint to the item element if hint data is provided\n   *\n   * @param itemElement - popover item root element to add hint to\n   * @param hintData - hint data\n   */\n  addHint(e, t) {\n    const o = new as(t);\n    ze(e, o.getElement(), {\n      placement: t.position,\n      hidingDelay: 100\n    });\n  }\n  /**\n   * Returns item children that are represented as popover items\n   */\n  get children() {\n    var e;\n    return this.params !== void 0 && \"children\" in this.params && ((e = this.params.children) == null ? void 0 : e.items) !== void 0 ? this.params.children.items : [];\n  }\n  /**\n   * Returns true if item has any type of children\n   */\n  get hasChildren() {\n    return this.children.length > 0;\n  }\n  /**\n   * Returns true if item children should be open instantly after popover is opened and not on item click/hover\n   */\n  get isChildrenOpen() {\n    var e;\n    return this.params !== void 0 && \"children\" in this.params && ((e = this.params.children) == null ? void 0 : e.isOpen) === !0;\n  }\n  /**\n   * True if item children items should be navigatable via keyboard\n   */\n  get isChildrenFlippable() {\n    var e;\n    return !(this.params === void 0 || !(\"children\" in this.params) || ((e = this.params.children) == null ? void 0 : e.isFlippable) === !1);\n  }\n  /**\n   * Returns true if item has children that should be searchable\n   */\n  get isChildrenSearchable() {\n    var e;\n    return this.params !== void 0 && \"children\" in this.params && ((e = this.params.children) == null ? void 0 : e.searchable) === !0;\n  }\n  /**\n   * True if popover should close once item is activated\n   */\n  get closeOnActivate() {\n    return this.params !== void 0 && \"closeOnActivate\" in this.params && this.params.closeOnActivate;\n  }\n  /**\n   * True if item is active\n   */\n  get isActive() {\n    return this.params === void 0 || !(\"isActive\" in this.params) ? !1 : typeof this.params.isActive == \"function\" ? this.params.isActive() : this.params.isActive === !0;\n  }\n}\nconst Y = ne(\"ce-popover-item\"), L = {\n  container: Y(),\n  active: Y(null, \"active\"),\n  disabled: Y(null, \"disabled\"),\n  focused: Y(null, \"focused\"),\n  hidden: Y(null, \"hidden\"),\n  confirmationState: Y(null, \"confirmation\"),\n  noHover: Y(null, \"no-hover\"),\n  noFocus: Y(null, \"no-focus\"),\n  title: Y(\"title\"),\n  secondaryTitle: Y(\"secondary-title\"),\n  icon: Y(\"icon\"),\n  iconTool: Y(\"icon\", \"tool\"),\n  iconChevronRight: Y(\"icon\", \"chevron-right\"),\n  wobbleAnimation: ne(\"wobble\")()\n};\nclass re extends xt {\n  /**\n   * Constructs popover item instance\n   *\n   * @param params - popover item construction params\n   * @param renderParams - popover item render params.\n   * The parameters that are not set by user via popover api but rather depend on technical implementation\n   */\n  constructor(e, t) {\n    super(e), this.params = e, this.nodes = {\n      root: null,\n      icon: null\n    }, this.confirmationState = null, this.removeSpecialFocusBehavior = () => {\n      var o;\n      (o = this.nodes.root) == null || o.classList.remove(L.noFocus);\n    }, this.removeSpecialHoverBehavior = () => {\n      var o;\n      (o = this.nodes.root) == null || o.classList.remove(L.noHover);\n    }, this.onErrorAnimationEnd = () => {\n      var o, i;\n      (o = this.nodes.icon) == null || o.classList.remove(L.wobbleAnimation), (i = this.nodes.icon) == null || i.removeEventListener(\"animationend\", this.onErrorAnimationEnd);\n    }, this.nodes.root = this.make(e, t);\n  }\n  /**\n   * True if item is disabled and hence not clickable\n   */\n  get isDisabled() {\n    return this.params.isDisabled === !0;\n  }\n  /**\n   * Exposes popover item toggle parameter\n   */\n  get toggle() {\n    return this.params.toggle;\n  }\n  /**\n   * Item title\n   */\n  get title() {\n    return this.params.title;\n  }\n  /**\n   * True if confirmation state is enabled for popover item\n   */\n  get isConfirmationStateEnabled() {\n    return this.confirmationState !== null;\n  }\n  /**\n   * True if item is focused in keyboard navigation process\n   */\n  get isFocused() {\n    return this.nodes.root === null ? !1 : this.nodes.root.classList.contains(L.focused);\n  }\n  /**\n   * Returns popover item root element\n   */\n  getElement() {\n    return this.nodes.root;\n  }\n  /**\n   * Called on popover item click\n   */\n  handleClick() {\n    if (this.isConfirmationStateEnabled && this.confirmationState !== null) {\n      this.activateOrEnableConfirmationMode(this.confirmationState);\n      return;\n    }\n    this.activateOrEnableConfirmationMode(this.params);\n  }\n  /**\n   * Toggles item active state\n   *\n   * @param isActive - true if item should strictly should become active\n   */\n  toggleActive(e) {\n    var t;\n    (t = this.nodes.root) == null || t.classList.toggle(L.active, e);\n  }\n  /**\n   * Toggles item hidden state\n   *\n   * @param isHidden - true if item should be hidden\n   */\n  toggleHidden(e) {\n    var t;\n    (t = this.nodes.root) == null || t.classList.toggle(L.hidden, e);\n  }\n  /**\n   * Resets popover item to its original state\n   */\n  reset() {\n    this.isConfirmationStateEnabled && this.disableConfirmationMode();\n  }\n  /**\n   * Method called once item becomes focused during keyboard navigation\n   */\n  onFocus() {\n    this.disableSpecialHoverAndFocusBehavior();\n  }\n  /**\n   * Constructs HTML element corresponding to popover item params\n   *\n   * @param params - item construction params\n   * @param renderParams - popover item render params\n   */\n  make(e, t) {\n    var s, r;\n    const o = (t == null ? void 0 : t.wrapperTag) || \"div\", i = d.make(o, L.container, {\n      type: o === \"button\" ? \"button\" : void 0\n    });\n    return e.name && (i.dataset.itemName = e.name), this.nodes.icon = d.make(\"div\", [L.icon, L.iconTool], {\n      innerHTML: e.icon || Qi\n    }), i.appendChild(this.nodes.icon), e.title !== void 0 && i.appendChild(d.make(\"div\", L.title, {\n      innerHTML: e.title || \"\"\n    })), e.secondaryLabel && i.appendChild(d.make(\"div\", L.secondaryTitle, {\n      textContent: e.secondaryLabel\n    })), this.hasChildren && i.appendChild(d.make(\"div\", [L.icon, L.iconChevronRight], {\n      innerHTML: qi\n    })), this.isActive && i.classList.add(L.active), e.isDisabled && i.classList.add(L.disabled), e.hint !== void 0 && ((s = t == null ? void 0 : t.hint) == null ? void 0 : s.enabled) !== !1 && this.addHint(i, {\n      ...e.hint,\n      position: ((r = t == null ? void 0 : t.hint) == null ? void 0 : r.position) || \"right\"\n    }), i;\n  }\n  /**\n   * Activates confirmation mode for the item.\n   *\n   * @param newState - new popover item params that should be applied\n   */\n  enableConfirmationMode(e) {\n    if (this.nodes.root === null)\n      return;\n    const t = {\n      ...this.params,\n      ...e,\n      confirmation: \"confirmation\" in e ? e.confirmation : void 0\n    }, o = this.make(t);\n    this.nodes.root.innerHTML = o.innerHTML, this.nodes.root.classList.add(L.confirmationState), this.confirmationState = e, this.enableSpecialHoverAndFocusBehavior();\n  }\n  /**\n   * Returns item to its original state\n   */\n  disableConfirmationMode() {\n    if (this.nodes.root === null)\n      return;\n    const e = this.make(this.params);\n    this.nodes.root.innerHTML = e.innerHTML, this.nodes.root.classList.remove(L.confirmationState), this.confirmationState = null, this.disableSpecialHoverAndFocusBehavior();\n  }\n  /**\n   * Enables special focus and hover behavior for item in confirmation state.\n   * This is needed to prevent item from being highlighted as hovered/focused just after click.\n   */\n  enableSpecialHoverAndFocusBehavior() {\n    var e, t, o;\n    (e = this.nodes.root) == null || e.classList.add(L.noHover), (t = this.nodes.root) == null || t.classList.add(L.noFocus), (o = this.nodes.root) == null || o.addEventListener(\"mouseleave\", this.removeSpecialHoverBehavior, { once: !0 });\n  }\n  /**\n   * Disables special focus and hover behavior\n   */\n  disableSpecialHoverAndFocusBehavior() {\n    var e;\n    this.removeSpecialFocusBehavior(), this.removeSpecialHoverBehavior(), (e = this.nodes.root) == null || e.removeEventListener(\"mouseleave\", this.removeSpecialHoverBehavior);\n  }\n  /**\n   * Executes item's onActivate callback if the item has no confirmation configured\n   *\n   * @param item - item to activate or bring to confirmation mode\n   */\n  activateOrEnableConfirmationMode(e) {\n    var t;\n    if (!(\"confirmation\" in e) || e.confirmation === void 0)\n      try {\n        (t = e.onActivate) == null || t.call(e, e), this.disableConfirmationMode();\n      } catch {\n        this.animateError();\n      }\n    else\n      this.enableConfirmationMode(e.confirmation);\n  }\n  /**\n   * Animates item which symbolizes that error occured while executing 'onActivate()' callback\n   */\n  animateError() {\n    var e, t, o;\n    (e = this.nodes.icon) != null && e.classList.contains(L.wobbleAnimation) || ((t = this.nodes.icon) == null || t.classList.add(L.wobbleAnimation), (o = this.nodes.icon) == null || o.addEventListener(\"animationend\", this.onErrorAnimationEnd));\n  }\n}\nconst nt = ne(\"ce-popover-item-separator\"), it = {\n  container: nt(),\n  line: nt(\"line\"),\n  hidden: nt(null, \"hidden\")\n};\nclass Qo extends xt {\n  /**\n   * Constructs the instance\n   */\n  constructor() {\n    super(), this.nodes = {\n      root: d.make(\"div\", it.container),\n      line: d.make(\"div\", it.line)\n    }, this.nodes.root.appendChild(this.nodes.line);\n  }\n  /**\n   * Returns popover separator root element\n   */\n  getElement() {\n    return this.nodes.root;\n  }\n  /**\n   * Toggles item hidden state\n   *\n   * @param isHidden - true if item should be hidden\n   */\n  toggleHidden(e) {\n    var t;\n    (t = this.nodes.root) == null || t.classList.toggle(it.hidden, e);\n  }\n}\nvar G = /* @__PURE__ */ ((n) => (n.Closed = \"closed\", n.ClosedOnActivate = \"closed-on-activate\", n))(G || {});\nconst $ = ne(\"ce-popover\"), P = {\n  popover: $(),\n  popoverContainer: $(\"container\"),\n  popoverOpenTop: $(null, \"open-top\"),\n  popoverOpenLeft: $(null, \"open-left\"),\n  popoverOpened: $(null, \"opened\"),\n  search: $(\"search\"),\n  nothingFoundMessage: $(\"nothing-found-message\"),\n  nothingFoundMessageDisplayed: $(\"nothing-found-message\", \"displayed\"),\n  items: $(\"items\"),\n  overlay: $(\"overlay\"),\n  overlayHidden: $(\"overlay\", \"hidden\"),\n  popoverNested: $(null, \"nested\"),\n  getPopoverNestedClass: (n) => $(null, `nested-level-${n.toString()}`),\n  popoverInline: $(null, \"inline\"),\n  popoverHeader: $(\"header\")\n};\nvar fe = /* @__PURE__ */ ((n) => (n.NestingLevel = \"--nesting-level\", n.PopoverHeight = \"--popover-height\", n.InlinePopoverWidth = \"--inline-popover-width\", n.TriggerItemLeft = \"--trigger-item-left\", n.TriggerItemTop = \"--trigger-item-top\", n))(fe || {});\nconst To = ne(\"ce-popover-item-html\"), So = {\n  root: To(),\n  hidden: To(null, \"hidden\")\n};\nclass Se extends xt {\n  /**\n   * Constructs the instance\n   *\n   * @param params – instance parameters\n   * @param renderParams – popover item render params.\n   * The parameters that are not set by user via popover api but rather depend on technical implementation\n   */\n  constructor(e, t) {\n    var o, i;\n    super(e), this.nodes = {\n      root: d.make(\"div\", So.root)\n    }, this.nodes.root.appendChild(e.element), e.name && (this.nodes.root.dataset.itemName = e.name), e.hint !== void 0 && ((o = t == null ? void 0 : t.hint) == null ? void 0 : o.enabled) !== !1 && this.addHint(this.nodes.root, {\n      ...e.hint,\n      position: ((i = t == null ? void 0 : t.hint) == null ? void 0 : i.position) || \"right\"\n    });\n  }\n  /**\n   * Returns popover item root element\n   */\n  getElement() {\n    return this.nodes.root;\n  }\n  /**\n   * Toggles item hidden state\n   *\n   * @param isHidden - true if item should be hidden\n   */\n  toggleHidden(e) {\n    var t;\n    (t = this.nodes.root) == null || t.classList.toggle(So.hidden, e);\n  }\n  /**\n   * Returns list of buttons and inputs inside custom content\n   */\n  getControls() {\n    const e = this.nodes.root.querySelectorAll(\n      `button, ${d.allInputsSelector}`\n    );\n    return Array.from(e);\n  }\n}\nclass Jo extends Oe {\n  /**\n   * Constructs the instance\n   *\n   * @param params - popover construction params\n   * @param itemsRenderParams - popover item render params.\n   * The parameters that are not set by user via popover api but rather depend on technical implementation\n   */\n  constructor(e, t = {}) {\n    super(), this.params = e, this.itemsRenderParams = t, this.listeners = new _e(), this.messages = {\n      nothingFound: \"Nothing found\",\n      search: \"Search\"\n    }, this.items = this.buildItems(e.items), e.messages && (this.messages = {\n      ...this.messages,\n      ...e.messages\n    }), this.nodes = {}, this.nodes.popoverContainer = d.make(\"div\", [P.popoverContainer]), this.nodes.nothingFoundMessage = d.make(\"div\", [P.nothingFoundMessage], {\n      textContent: this.messages.nothingFound\n    }), this.nodes.popoverContainer.appendChild(this.nodes.nothingFoundMessage), this.nodes.items = d.make(\"div\", [P.items]), this.items.forEach((o) => {\n      const i = o.getElement();\n      i !== null && this.nodes.items.appendChild(i);\n    }), this.nodes.popoverContainer.appendChild(this.nodes.items), this.listeners.on(this.nodes.popoverContainer, \"click\", (o) => this.handleClick(o)), this.nodes.popover = d.make(\"div\", [\n      P.popover,\n      this.params.class\n    ]), this.nodes.popover.appendChild(this.nodes.popoverContainer);\n  }\n  /**\n   * List of default popover items that are searchable and may have confirmation state\n   */\n  get itemsDefault() {\n    return this.items.filter((e) => e instanceof re);\n  }\n  /**\n   * Returns HTML element corresponding to the popover\n   */\n  getElement() {\n    return this.nodes.popover;\n  }\n  /**\n   * Open popover\n   */\n  show() {\n    this.nodes.popover.classList.add(P.popoverOpened), this.search !== void 0 && this.search.focus();\n  }\n  /**\n   * Closes popover\n   */\n  hide() {\n    this.nodes.popover.classList.remove(P.popoverOpened), this.nodes.popover.classList.remove(P.popoverOpenTop), this.itemsDefault.forEach((e) => e.reset()), this.search !== void 0 && this.search.clear(), this.emit(G.Closed);\n  }\n  /**\n   * Clears memory\n   */\n  destroy() {\n    var e;\n    this.items.forEach((t) => t.destroy()), this.nodes.popover.remove(), this.listeners.removeAll(), (e = this.search) == null || e.destroy();\n  }\n  /**\n   * Looks for the item by name and imitates click on it\n   *\n   * @param name - name of the item to activate\n   */\n  activateItemByName(e) {\n    const t = this.items.find((o) => o.name === e);\n    this.handleItemClick(t);\n  }\n  /**\n   * Factory method for creating popover items\n   *\n   * @param items - list of items params\n   */\n  buildItems(e) {\n    return e.map((t) => {\n      switch (t.type) {\n        case _.Separator:\n          return new Qo();\n        case _.Html:\n          return new Se(t, this.itemsRenderParams[_.Html]);\n        default:\n          return new re(t, this.itemsRenderParams[_.Default]);\n      }\n    });\n  }\n  /**\n   * Retrieves popover item that is the target of the specified event\n   *\n   * @param event - event to retrieve popover item from\n   */\n  getTargetItem(e) {\n    return this.items.filter((t) => t instanceof re || t instanceof Se).find((t) => {\n      const o = t.getElement();\n      return o === null ? !1 : e.composedPath().includes(o);\n    });\n  }\n  /**\n   * Handles popover item click\n   *\n   * @param item - item to handle click of\n   */\n  handleItemClick(e) {\n    if (!(\"isDisabled\" in e && e.isDisabled)) {\n      if (e.hasChildren) {\n        this.showNestedItems(e), \"handleClick\" in e && typeof e.handleClick == \"function\" && e.handleClick();\n        return;\n      }\n      this.itemsDefault.filter((t) => t !== e).forEach((t) => t.reset()), \"handleClick\" in e && typeof e.handleClick == \"function\" && e.handleClick(), this.toggleItemActivenessIfNeeded(e), e.closeOnActivate && (this.hide(), this.emit(G.ClosedOnActivate));\n    }\n  }\n  /**\n   * Handles clicks inside popover\n   *\n   * @param event - item to handle click of\n   */\n  handleClick(e) {\n    const t = this.getTargetItem(e);\n    t !== void 0 && this.handleItemClick(t);\n  }\n  /**\n   * - Toggles item active state, if clicked popover item has property 'toggle' set to true.\n   *\n   * - Performs radiobutton-like behavior if the item has property 'toggle' set to string key.\n   * (All the other items with the same key get inactive, and the item gets active)\n   *\n   * @param clickedItem - popover item that was clicked\n   */\n  toggleItemActivenessIfNeeded(e) {\n    if (e instanceof re && (e.toggle === !0 && e.toggleActive(), typeof e.toggle == \"string\")) {\n      const t = this.itemsDefault.filter((o) => o.toggle === e.toggle);\n      if (t.length === 1) {\n        e.toggleActive();\n        return;\n      }\n      t.forEach((o) => {\n        o.toggleActive(o === e);\n      });\n    }\n  }\n}\nvar Ue = /* @__PURE__ */ ((n) => (n.Search = \"search\", n))(Ue || {});\nconst st = ne(\"cdx-search-field\"), rt = {\n  wrapper: st(),\n  icon: st(\"icon\"),\n  input: st(\"input\")\n};\nclass ls extends Oe {\n  /**\n   * @param options - available config\n   * @param options.items - searchable items list\n   * @param options.placeholder - input placeholder\n   */\n  constructor({ items: e, placeholder: t }) {\n    super(), this.listeners = new _e(), this.items = e, this.wrapper = d.make(\"div\", rt.wrapper);\n    const o = d.make(\"div\", rt.icon, {\n      innerHTML: os\n    });\n    this.input = d.make(\"input\", rt.input, {\n      placeholder: t,\n      /**\n       * Used to prevent focusing on the input by Tab key\n       * (Popover in the Toolbar lays below the blocks,\n       * so Tab in the last block will focus this hidden input if this property is not set)\n       */\n      tabIndex: -1\n    }), this.wrapper.appendChild(o), this.wrapper.appendChild(this.input), this.listeners.on(this.input, \"input\", () => {\n      this.searchQuery = this.input.value, this.emit(Ue.Search, {\n        query: this.searchQuery,\n        items: this.foundItems\n      });\n    });\n  }\n  /**\n   * Returns search field element\n   */\n  getElement() {\n    return this.wrapper;\n  }\n  /**\n   * Sets focus to the input\n   */\n  focus() {\n    this.input.focus();\n  }\n  /**\n   * Clears search query and results\n   */\n  clear() {\n    this.input.value = \"\", this.searchQuery = \"\", this.emit(Ue.Search, {\n      query: \"\",\n      items: this.foundItems\n    });\n  }\n  /**\n   * Clears memory\n   */\n  destroy() {\n    this.listeners.removeAll();\n  }\n  /**\n   * Returns list of found items for the current search query\n   */\n  get foundItems() {\n    return this.items.filter((e) => this.checkItem(e));\n  }\n  /**\n   * Contains logic for checking whether passed item conforms the search query\n   *\n   * @param item - item to be checked\n   */\n  checkItem(e) {\n    var i, s;\n    const t = ((i = e.title) == null ? void 0 : i.toLowerCase()) || \"\", o = (s = this.searchQuery) == null ? void 0 : s.toLowerCase();\n    return o !== void 0 ? t.includes(o) : !1;\n  }\n}\nvar cs = Object.defineProperty, ds = Object.getOwnPropertyDescriptor, us = (n, e, t, o) => {\n  for (var i = o > 1 ? void 0 : o ? ds(e, t) : e, s = n.length - 1, r; s >= 0; s--)\n    (r = n[s]) && (i = (o ? r(e, t, i) : r(i)) || i);\n  return o && i && cs(e, t, i), i;\n};\nconst en = class tn extends Jo {\n  /**\n   * Construct the instance\n   *\n   * @param params - popover params\n   * @param itemsRenderParams – popover item render params.\n   * The parameters that are not set by user via popover api but rather depend on technical implementation\n   */\n  constructor(e, t) {\n    super(e, t), this.nestingLevel = 0, this.nestedPopoverTriggerItem = null, this.previouslyHoveredItem = null, this.scopeElement = document.body, this.hide = () => {\n      var o;\n      super.hide(), this.destroyNestedPopoverIfExists(), (o = this.flipper) == null || o.deactivate(), this.previouslyHoveredItem = null;\n    }, this.onFlip = () => {\n      const o = this.itemsDefault.find((i) => i.isFocused);\n      o == null || o.onFocus();\n    }, this.onSearch = (o) => {\n      var a;\n      const i = o.query === \"\", s = o.items.length === 0;\n      this.items.forEach((l) => {\n        let c = !1;\n        l instanceof re ? c = !o.items.includes(l) : (l instanceof Qo || l instanceof Se) && (c = s || !i), l.toggleHidden(c);\n      }), this.toggleNothingFoundMessage(s);\n      const r = o.query === \"\" ? this.flippableElements : o.items.map((l) => l.getElement());\n      (a = this.flipper) != null && a.isActivated && (this.flipper.deactivate(), this.flipper.activate(r));\n    }, e.nestingLevel !== void 0 && (this.nestingLevel = e.nestingLevel), this.nestingLevel > 0 && this.nodes.popover.classList.add(P.popoverNested), e.scopeElement !== void 0 && (this.scopeElement = e.scopeElement), this.nodes.popoverContainer !== null && this.listeners.on(this.nodes.popoverContainer, \"mouseover\", (o) => this.handleHover(o)), e.searchable && this.addSearch(), e.flippable !== !1 && (this.flipper = new ce({\n      items: this.flippableElements,\n      focusedItemClass: L.focused,\n      allowedKeys: [\n        y.TAB,\n        y.UP,\n        y.DOWN,\n        y.ENTER\n      ]\n    }), this.flipper.onFlip(this.onFlip));\n  }\n  /**\n   * Returns true if some item inside popover is focused\n   */\n  hasFocus() {\n    return this.flipper === void 0 ? !1 : this.flipper.hasFocus();\n  }\n  /**\n   * Scroll position inside items container of the popover\n   */\n  get scrollTop() {\n    return this.nodes.items === null ? 0 : this.nodes.items.scrollTop;\n  }\n  /**\n   * Returns visible element offset top\n   */\n  get offsetTop() {\n    return this.nodes.popoverContainer === null ? 0 : this.nodes.popoverContainer.offsetTop;\n  }\n  /**\n   * Open popover\n   */\n  show() {\n    var e;\n    this.nodes.popover.style.setProperty(fe.PopoverHeight, this.size.height + \"px\"), this.shouldOpenBottom || this.nodes.popover.classList.add(P.popoverOpenTop), this.shouldOpenRight || this.nodes.popover.classList.add(P.popoverOpenLeft), super.show(), (e = this.flipper) == null || e.activate(this.flippableElements);\n  }\n  /**\n   * Clears memory\n   */\n  destroy() {\n    this.hide(), super.destroy();\n  }\n  /**\n   * Handles displaying nested items for the item.\n   *\n   * @param item – item to show nested popover for\n   */\n  showNestedItems(e) {\n    this.nestedPopover !== null && this.nestedPopover !== void 0 || (this.nestedPopoverTriggerItem = e, this.showNestedPopoverForItem(e));\n  }\n  /**\n   * Handles hover events inside popover items container\n   *\n   * @param event - hover event data\n   */\n  handleHover(e) {\n    const t = this.getTargetItem(e);\n    t !== void 0 && this.previouslyHoveredItem !== t && (this.destroyNestedPopoverIfExists(), this.previouslyHoveredItem = t, t.hasChildren && this.showNestedPopoverForItem(t));\n  }\n  /**\n   * Sets CSS variable with position of item near which nested popover should be displayed.\n   * Is used for correct positioning of the nested popover\n   *\n   * @param nestedPopoverEl - nested popover element\n   * @param item – item near which nested popover should be displayed\n   */\n  setTriggerItemPosition(e, t) {\n    const o = t.getElement(), i = (o ? o.offsetTop : 0) - this.scrollTop, s = this.offsetTop + i;\n    e.style.setProperty(fe.TriggerItemTop, s + \"px\");\n  }\n  /**\n   * Destroys existing nested popover\n   */\n  destroyNestedPopoverIfExists() {\n    var e, t;\n    this.nestedPopover === void 0 || this.nestedPopover === null || (this.nestedPopover.off(G.ClosedOnActivate, this.hide), this.nestedPopover.hide(), this.nestedPopover.destroy(), this.nestedPopover.getElement().remove(), this.nestedPopover = null, (e = this.flipper) == null || e.activate(this.flippableElements), (t = this.nestedPopoverTriggerItem) == null || t.onChildrenClose());\n  }\n  /**\n   * Creates and displays nested popover for specified item.\n   * Is used only on desktop\n   *\n   * @param item - item to display nested popover by\n   */\n  showNestedPopoverForItem(e) {\n    var o;\n    this.nestedPopover = new tn({\n      searchable: e.isChildrenSearchable,\n      items: e.children,\n      nestingLevel: this.nestingLevel + 1,\n      flippable: e.isChildrenFlippable,\n      messages: this.messages\n    }), e.onChildrenOpen(), this.nestedPopover.on(G.ClosedOnActivate, this.hide);\n    const t = this.nestedPopover.getElement();\n    return this.nodes.popover.appendChild(t), this.setTriggerItemPosition(t, e), t.style.setProperty(fe.NestingLevel, this.nestedPopover.nestingLevel.toString()), this.nestedPopover.show(), (o = this.flipper) == null || o.deactivate(), this.nestedPopover;\n  }\n  /**\n   * Checks if popover should be opened bottom.\n   * It should happen when there is enough space below or not enough space above\n   */\n  get shouldOpenBottom() {\n    if (this.nodes.popover === void 0 || this.nodes.popover === null)\n      return !1;\n    const e = this.nodes.popoverContainer.getBoundingClientRect(), t = this.scopeElement.getBoundingClientRect(), o = this.size.height, i = e.top + o, s = e.top - o, r = Math.min(window.innerHeight, t.bottom);\n    return s < t.top || i <= r;\n  }\n  /**\n   * Checks if popover should be opened left.\n   * It should happen when there is enough space in the right or not enough space in the left\n   */\n  get shouldOpenRight() {\n    if (this.nodes.popover === void 0 || this.nodes.popover === null)\n      return !1;\n    const e = this.nodes.popover.getBoundingClientRect(), t = this.scopeElement.getBoundingClientRect(), o = this.size.width, i = e.right + o, s = e.left - o, r = Math.min(window.innerWidth, t.right);\n    return s < t.left || i <= r;\n  }\n  get size() {\n    var i;\n    const e = {\n      height: 0,\n      width: 0\n    };\n    if (this.nodes.popover === null)\n      return e;\n    const t = this.nodes.popover.cloneNode(!0);\n    t.style.visibility = \"hidden\", t.style.position = \"absolute\", t.style.top = \"-1000px\", t.classList.add(P.popoverOpened), (i = t.querySelector(\".\" + P.popoverNested)) == null || i.remove(), document.body.appendChild(t);\n    const o = t.querySelector(\".\" + P.popoverContainer);\n    return e.height = o.offsetHeight, e.width = o.offsetWidth, t.remove(), e;\n  }\n  /**\n   * Returns list of elements available for keyboard navigation.\n   */\n  get flippableElements() {\n    return this.items.map((t) => {\n      if (t instanceof re)\n        return t.getElement();\n      if (t instanceof Se)\n        return t.getControls();\n    }).flat().filter((t) => t != null);\n  }\n  /**\n   * Adds search to the popover\n   */\n  addSearch() {\n    this.search = new ls({\n      items: this.itemsDefault,\n      placeholder: this.messages.search\n    }), this.search.on(Ue.Search, this.onSearch);\n    const e = this.search.getElement();\n    e.classList.add(P.search), this.nodes.popoverContainer.insertBefore(e, this.nodes.popoverContainer.firstChild);\n  }\n  /**\n   * Toggles nothing found message visibility\n   *\n   * @param isDisplayed - true if the message should be displayed\n   */\n  toggleNothingFoundMessage(e) {\n    this.nodes.nothingFoundMessage.classList.toggle(P.nothingFoundMessageDisplayed, e);\n  }\n};\nus([\n  me\n], en.prototype, \"size\", 1);\nlet Bt = en;\nclass hs extends Bt {\n  /**\n   * Constructs the instance\n   *\n   * @param params - instance parameters\n   */\n  constructor(e) {\n    const t = !be();\n    super(\n      {\n        ...e,\n        class: P.popoverInline\n      },\n      {\n        [_.Default]: {\n          /**\n           * We use button instead of div here to fix bug associated with focus loss (which leads to selection change) on click in safari\n           *\n           * @todo figure out better way to solve the issue\n           */\n          wrapperTag: \"button\",\n          hint: {\n            position: \"top\",\n            alignment: \"center\",\n            enabled: t\n          }\n        },\n        [_.Html]: {\n          hint: {\n            position: \"top\",\n            alignment: \"center\",\n            enabled: t\n          }\n        }\n      }\n    ), this.items.forEach((o) => {\n      !(o instanceof re) && !(o instanceof Se) || o.hasChildren && o.isChildrenOpen && this.showNestedItems(o);\n    });\n  }\n  /**\n   * Returns visible element offset top\n   */\n  get offsetLeft() {\n    return this.nodes.popoverContainer === null ? 0 : this.nodes.popoverContainer.offsetLeft;\n  }\n  /**\n   * Open popover\n   */\n  show() {\n    this.nestingLevel === 0 && this.nodes.popover.style.setProperty(\n      fe.InlinePopoverWidth,\n      this.size.width + \"px\"\n    ), super.show();\n  }\n  /**\n   * Disable hover event handling.\n   * Overrides parent's class behavior\n   */\n  handleHover() {\n  }\n  /**\n   * Sets CSS variable with position of item near which nested popover should be displayed.\n   * Is used to position nested popover right below clicked item\n   *\n   * @param nestedPopoverEl - nested popover element\n   * @param item – item near which nested popover should be displayed\n   */\n  setTriggerItemPosition(e, t) {\n    const o = t.getElement(), i = o ? o.offsetLeft : 0, s = this.offsetLeft + i;\n    e.style.setProperty(\n      fe.TriggerItemLeft,\n      s + \"px\"\n    );\n  }\n  /**\n   * Handles displaying nested items for the item.\n   * Overriding in order to add toggling behaviour\n   *\n   * @param item – item to toggle nested popover for\n   */\n  showNestedItems(e) {\n    if (this.nestedPopoverTriggerItem === e) {\n      this.destroyNestedPopoverIfExists(), this.nestedPopoverTriggerItem = null;\n      return;\n    }\n    super.showNestedItems(e);\n  }\n  /**\n   * Creates and displays nested popover for specified item.\n   * Is used only on desktop\n   *\n   * @param item - item to display nested popover by\n   */\n  showNestedPopoverForItem(e) {\n    const t = super.showNestedPopoverForItem(e);\n    return t.getElement().classList.add(P.getPopoverNestedClass(t.nestingLevel)), t;\n  }\n  /**\n   * Overrides default item click handling.\n   * Helps to close nested popover once other item is clicked.\n   *\n   * @param item - clicked item\n   */\n  handleItemClick(e) {\n    var t;\n    e !== this.nestedPopoverTriggerItem && ((t = this.nestedPopoverTriggerItem) == null || t.handleClick(), super.destroyNestedPopoverIfExists()), super.handleItemClick(e);\n  }\n}\nconst on = class xe {\n  constructor() {\n    this.scrollPosition = null;\n  }\n  /**\n   * Locks body element scroll\n   */\n  lock() {\n    pt ? this.lockHard() : document.body.classList.add(xe.CSS.scrollLocked);\n  }\n  /**\n   * Unlocks body element scroll\n   */\n  unlock() {\n    pt ? this.unlockHard() : document.body.classList.remove(xe.CSS.scrollLocked);\n  }\n  /**\n   * Locks scroll in a hard way (via setting fixed position to body element)\n   */\n  lockHard() {\n    this.scrollPosition = window.pageYOffset, document.documentElement.style.setProperty(\n      \"--window-scroll-offset\",\n      `${this.scrollPosition}px`\n    ), document.body.classList.add(xe.CSS.scrollLockedHard);\n  }\n  /**\n   * Unlocks hard scroll lock\n   */\n  unlockHard() {\n    document.body.classList.remove(xe.CSS.scrollLockedHard), this.scrollPosition !== null && window.scrollTo(0, this.scrollPosition), this.scrollPosition = null;\n  }\n};\non.CSS = {\n  scrollLocked: \"ce-scroll-locked\",\n  scrollLockedHard: \"ce-scroll-locked--hard\"\n};\nlet ps = on;\nconst at = ne(\"ce-popover-header\"), lt = {\n  root: at(),\n  text: at(\"text\"),\n  backButton: at(\"back-button\")\n};\nclass fs {\n  /**\n   * Constructs the instance\n   *\n   * @param params - popover header params\n   */\n  constructor({ text: e, onBackButtonClick: t }) {\n    this.listeners = new _e(), this.text = e, this.onBackButtonClick = t, this.nodes = {\n      root: d.make(\"div\", [lt.root]),\n      backButton: d.make(\"button\", [lt.backButton]),\n      text: d.make(\"div\", [lt.text])\n    }, this.nodes.backButton.innerHTML = Vi, this.nodes.root.appendChild(this.nodes.backButton), this.listeners.on(this.nodes.backButton, \"click\", this.onBackButtonClick), this.nodes.text.innerText = this.text, this.nodes.root.appendChild(this.nodes.text);\n  }\n  /**\n   * Returns popover header root html element\n   */\n  getElement() {\n    return this.nodes.root;\n  }\n  /**\n   * Destroys the instance\n   */\n  destroy() {\n    this.nodes.root.remove(), this.listeners.destroy();\n  }\n}\nclass gs {\n  constructor() {\n    this.history = [];\n  }\n  /**\n   * Push new popover state\n   *\n   * @param state - new state\n   */\n  push(e) {\n    this.history.push(e);\n  }\n  /**\n   * Pop last popover state\n   */\n  pop() {\n    return this.history.pop();\n  }\n  /**\n   * Title retrieved from the current state\n   */\n  get currentTitle() {\n    return this.history.length === 0 ? \"\" : this.history[this.history.length - 1].title;\n  }\n  /**\n   * Items list retrieved from the current state\n   */\n  get currentItems() {\n    return this.history.length === 0 ? [] : this.history[this.history.length - 1].items;\n  }\n  /**\n   * Returns history to initial popover state\n   */\n  reset() {\n    for (; this.history.length > 1; )\n      this.pop();\n  }\n}\nclass nn extends Jo {\n  /**\n   * Construct the instance\n   *\n   * @param params - popover params\n   */\n  constructor(e) {\n    super(e, {\n      [_.Default]: {\n        hint: {\n          enabled: !1\n        }\n      },\n      [_.Html]: {\n        hint: {\n          enabled: !1\n        }\n      }\n    }), this.scrollLocker = new ps(), this.history = new gs(), this.isHidden = !0, this.nodes.overlay = d.make(\"div\", [P.overlay, P.overlayHidden]), this.nodes.popover.insertBefore(this.nodes.overlay, this.nodes.popover.firstChild), this.listeners.on(this.nodes.overlay, \"click\", () => {\n      this.hide();\n    }), this.history.push({ items: e.items });\n  }\n  /**\n   * Open popover\n   */\n  show() {\n    this.nodes.overlay.classList.remove(P.overlayHidden), super.show(), this.scrollLocker.lock(), this.isHidden = !1;\n  }\n  /**\n   * Closes popover\n   */\n  hide() {\n    this.isHidden || (super.hide(), this.nodes.overlay.classList.add(P.overlayHidden), this.scrollLocker.unlock(), this.history.reset(), this.isHidden = !0);\n  }\n  /**\n   * Clears memory\n   */\n  destroy() {\n    super.destroy(), this.scrollLocker.unlock();\n  }\n  /**\n   * Handles displaying nested items for the item\n   *\n   * @param item – item to show nested popover for\n   */\n  showNestedItems(e) {\n    this.updateItemsAndHeader(e.children, e.title), this.history.push({\n      title: e.title,\n      items: e.children\n    });\n  }\n  /**\n   * Removes rendered popover items and header and displays new ones\n   *\n   * @param items - new popover items\n   * @param title - new popover header text\n   */\n  updateItemsAndHeader(e, t) {\n    if (this.header !== null && this.header !== void 0 && (this.header.destroy(), this.header = null), t !== void 0) {\n      this.header = new fs({\n        text: t,\n        onBackButtonClick: () => {\n          this.history.pop(), this.updateItemsAndHeader(this.history.currentItems, this.history.currentTitle);\n        }\n      });\n      const o = this.header.getElement();\n      o !== null && this.nodes.popoverContainer.insertBefore(o, this.nodes.popoverContainer.firstChild);\n    }\n    this.items.forEach((o) => {\n      var i;\n      return (i = o.getElement()) == null ? void 0 : i.remove();\n    }), this.items = this.buildItems(e), this.items.forEach((o) => {\n      var s;\n      const i = o.getElement();\n      i !== null && ((s = this.nodes.items) == null || s.appendChild(i));\n    });\n  }\n}\nclass ms extends E {\n  constructor() {\n    super(...arguments), this.opened = !1, this.selection = new b(), this.popover = null, this.close = () => {\n      this.opened && (this.opened = !1, b.isAtEditor || this.selection.restore(), this.selection.clearSaved(), !this.Editor.CrossBlockSelection.isCrossBlockSelectionStarted && this.Editor.BlockManager.currentBlock && this.Editor.BlockSelection.unselectBlock(this.Editor.BlockManager.currentBlock), this.eventsDispatcher.emit(this.events.closed), this.popover && (this.popover.off(G.Closed, this.onPopoverClose), this.popover.destroy(), this.popover.getElement().remove(), this.popover = null));\n    }, this.onPopoverClose = () => {\n      this.close();\n    };\n  }\n  /**\n   * Module Events\n   */\n  get events() {\n    return {\n      opened: \"block-settings-opened\",\n      closed: \"block-settings-closed\"\n    };\n  }\n  /**\n   * Block Settings CSS\n   */\n  get CSS() {\n    return {\n      settings: \"ce-settings\"\n    };\n  }\n  /**\n   * Getter for inner popover's flipper instance\n   *\n   * @todo remove once BlockSettings becomes standalone non-module class\n   */\n  get flipper() {\n    var e;\n    if (this.popover !== null)\n      return \"flipper\" in this.popover ? (e = this.popover) == null ? void 0 : e.flipper : void 0;\n  }\n  /**\n   * Panel with block settings with 2 sections:\n   *  - Tool's Settings\n   *  - Default Settings [Move, Remove, etc]\n   */\n  make() {\n    this.nodes.wrapper = d.make(\"div\", [this.CSS.settings]), this.nodes.wrapper.setAttribute(\"data-cy\", \"block-tunes\"), this.eventsDispatcher.on(Te, this.close);\n  }\n  /**\n   * Destroys module\n   */\n  destroy() {\n    this.removeAllNodes(), this.listeners.destroy(), this.eventsDispatcher.off(Te, this.close);\n  }\n  /**\n   * Open Block Settings pane\n   *\n   * @param targetBlock - near which Block we should open BlockSettings\n   */\n  async open(e = this.Editor.BlockManager.currentBlock) {\n    var s;\n    this.opened = !0, this.selection.save(), this.Editor.BlockSelection.selectBlock(e), this.Editor.BlockSelection.clearCache();\n    const { toolTunes: t, commonTunes: o } = e.getTunes();\n    this.eventsDispatcher.emit(this.events.opened);\n    const i = be() ? nn : Bt;\n    this.popover = new i({\n      searchable: !0,\n      items: await this.getTunesItems(e, o, t),\n      scopeElement: this.Editor.API.methods.ui.nodes.redactor,\n      messages: {\n        nothingFound: z.ui(K.ui.popover, \"Nothing found\"),\n        search: z.ui(K.ui.popover, \"Filter\")\n      }\n    }), this.popover.on(G.Closed, this.onPopoverClose), (s = this.nodes.wrapper) == null || s.append(this.popover.getElement()), this.popover.show();\n  }\n  /**\n   * Returns root block settings element\n   */\n  getElement() {\n    return this.nodes.wrapper;\n  }\n  /**\n   * Returns list of items to be displayed in block tunes menu.\n   * Merges tool specific tunes, conversion menu and common tunes in one list in predefined order\n   *\n   * @param currentBlock –  block we are about to open block tunes for\n   * @param commonTunes – common tunes\n   * @param toolTunes - tool specific tunes\n   */\n  async getTunesItems(e, t, o) {\n    const i = [];\n    o !== void 0 && o.length > 0 && (i.push(...o), i.push({\n      type: _.Separator\n    }));\n    const s = Array.from(this.Editor.Tools.blockTools.values()), a = (await Yo(e, s)).reduce((l, c) => (c.toolbox.forEach((u) => {\n      l.push({\n        icon: u.icon,\n        title: z.t(K.toolNames, u.title),\n        name: c.name,\n        closeOnActivate: !0,\n        onActivate: async () => {\n          const { BlockManager: h, Caret: p, Toolbar: g } = this.Editor, f = await h.convert(e, c.name, u.data);\n          g.close(), p.setToBlock(f, p.positions.END);\n        }\n      });\n    }), l), []);\n    return a.length > 0 && (i.push({\n      icon: Go,\n      name: \"convert-to\",\n      title: z.ui(K.ui.popover, \"Convert to\"),\n      children: {\n        searchable: !0,\n        items: a\n      }\n    }), i.push({\n      type: _.Separator\n    })), i.push(...t), i.map((l) => this.resolveTuneAliases(l));\n  }\n  /**\n   * Resolves aliases in tunes menu items\n   *\n   * @param item - item with resolved aliases\n   */\n  resolveTuneAliases(e) {\n    if (e.type === _.Separator || e.type === _.Html)\n      return e;\n    const t = Yi(e, { label: \"title\" });\n    return e.confirmation && (t.confirmation = this.resolveTuneAliases(e.confirmation)), t;\n  }\n}\nvar sn = { exports: {} };\n/*!\n * Library for handling keyboard shortcuts\n * @copyright CodeX (https://codex.so)\n * @license MIT\n * @author CodeX (https://codex.so)\n * @version 1.2.0\n */\n(function(n, e) {\n  (function(t, o) {\n    n.exports = o();\n  })(window, function() {\n    return function(t) {\n      var o = {};\n      function i(s) {\n        if (o[s])\n          return o[s].exports;\n        var r = o[s] = { i: s, l: !1, exports: {} };\n        return t[s].call(r.exports, r, r.exports, i), r.l = !0, r.exports;\n      }\n      return i.m = t, i.c = o, i.d = function(s, r, a) {\n        i.o(s, r) || Object.defineProperty(s, r, { enumerable: !0, get: a });\n      }, i.r = function(s) {\n        typeof Symbol < \"u\" && Symbol.toStringTag && Object.defineProperty(s, Symbol.toStringTag, { value: \"Module\" }), Object.defineProperty(s, \"__esModule\", { value: !0 });\n      }, i.t = function(s, r) {\n        if (1 & r && (s = i(s)), 8 & r || 4 & r && typeof s == \"object\" && s && s.__esModule)\n          return s;\n        var a = /* @__PURE__ */ Object.create(null);\n        if (i.r(a), Object.defineProperty(a, \"default\", { enumerable: !0, value: s }), 2 & r && typeof s != \"string\")\n          for (var l in s)\n            i.d(a, l, (function(c) {\n              return s[c];\n            }).bind(null, l));\n        return a;\n      }, i.n = function(s) {\n        var r = s && s.__esModule ? function() {\n          return s.default;\n        } : function() {\n          return s;\n        };\n        return i.d(r, \"a\", r), r;\n      }, i.o = function(s, r) {\n        return Object.prototype.hasOwnProperty.call(s, r);\n      }, i.p = \"\", i(i.s = 0);\n    }([function(t, o, i) {\n      function s(l, c) {\n        for (var u = 0; u < c.length; u++) {\n          var h = c[u];\n          h.enumerable = h.enumerable || !1, h.configurable = !0, \"value\" in h && (h.writable = !0), Object.defineProperty(l, h.key, h);\n        }\n      }\n      function r(l, c, u) {\n        return c && s(l.prototype, c), u && s(l, u), l;\n      }\n      i.r(o);\n      var a = function() {\n        function l(c) {\n          var u = this;\n          (function(h, p) {\n            if (!(h instanceof p))\n              throw new TypeError(\"Cannot call a class as a function\");\n          })(this, l), this.commands = {}, this.keys = {}, this.name = c.name, this.parseShortcutName(c.name), this.element = c.on, this.callback = c.callback, this.executeShortcut = function(h) {\n            u.execute(h);\n          }, this.element.addEventListener(\"keydown\", this.executeShortcut, !1);\n        }\n        return r(l, null, [{ key: \"supportedCommands\", get: function() {\n          return { SHIFT: [\"SHIFT\"], CMD: [\"CMD\", \"CONTROL\", \"COMMAND\", \"WINDOWS\", \"CTRL\"], ALT: [\"ALT\", \"OPTION\"] };\n        } }, { key: \"keyCodes\", get: function() {\n          return { 0: 48, 1: 49, 2: 50, 3: 51, 4: 52, 5: 53, 6: 54, 7: 55, 8: 56, 9: 57, A: 65, B: 66, C: 67, D: 68, E: 69, F: 70, G: 71, H: 72, I: 73, J: 74, K: 75, L: 76, M: 77, N: 78, O: 79, P: 80, Q: 81, R: 82, S: 83, T: 84, U: 85, V: 86, W: 87, X: 88, Y: 89, Z: 90, BACKSPACE: 8, ENTER: 13, ESCAPE: 27, LEFT: 37, UP: 38, RIGHT: 39, DOWN: 40, INSERT: 45, DELETE: 46, \".\": 190 };\n        } }]), r(l, [{ key: \"parseShortcutName\", value: function(c) {\n          c = c.split(\"+\");\n          for (var u = 0; u < c.length; u++) {\n            c[u] = c[u].toUpperCase();\n            var h = !1;\n            for (var p in l.supportedCommands)\n              if (l.supportedCommands[p].includes(c[u])) {\n                h = this.commands[p] = !0;\n                break;\n              }\n            h || (this.keys[c[u]] = !0);\n          }\n          for (var g in l.supportedCommands)\n            this.commands[g] || (this.commands[g] = !1);\n        } }, { key: \"execute\", value: function(c) {\n          var u, h = { CMD: c.ctrlKey || c.metaKey, SHIFT: c.shiftKey, ALT: c.altKey }, p = !0;\n          for (u in this.commands)\n            this.commands[u] !== h[u] && (p = !1);\n          var g, f = !0;\n          for (g in this.keys)\n            f = f && c.keyCode === l.keyCodes[g];\n          p && f && this.callback(c);\n        } }, { key: \"remove\", value: function() {\n          this.element.removeEventListener(\"keydown\", this.executeShortcut);\n        } }]), l;\n      }();\n      o.default = a;\n    }]).default;\n  });\n})(sn);\nvar bs = sn.exports;\nconst vs = /* @__PURE__ */ Ke(bs);\nclass ks {\n  constructor() {\n    this.registeredShortcuts = /* @__PURE__ */ new Map();\n  }\n  /**\n   * Register shortcut\n   *\n   * @param shortcut - shortcut options\n   */\n  add(e) {\n    if (this.findShortcut(e.on, e.name))\n      throw Error(\n        `Shortcut ${e.name} is already registered for ${e.on}. Please remove it before add a new handler.`\n      );\n    const o = new vs({\n      name: e.name,\n      on: e.on,\n      callback: e.handler\n    }), i = this.registeredShortcuts.get(e.on) || [];\n    this.registeredShortcuts.set(e.on, [...i, o]);\n  }\n  /**\n   * Remove shortcut\n   *\n   * @param element - Element shortcut is set for\n   * @param name - shortcut name\n   */\n  remove(e, t) {\n    const o = this.findShortcut(e, t);\n    if (!o)\n      return;\n    o.remove();\n    const i = this.registeredShortcuts.get(e);\n    this.registeredShortcuts.set(e, i.filter((s) => s !== o));\n  }\n  /**\n   * Get Shortcut instance if exist\n   *\n   * @param element - Element shorcut is set for\n   * @param shortcut - shortcut name\n   * @returns {number} index - shortcut index if exist\n   */\n  findShortcut(e, t) {\n    return (this.registeredShortcuts.get(e) || []).find(({ name: i }) => i === t);\n  }\n}\nconst ge = new ks();\nvar ys = Object.defineProperty, ws = Object.getOwnPropertyDescriptor, rn = (n, e, t, o) => {\n  for (var i = o > 1 ? void 0 : o ? ws(e, t) : e, s = n.length - 1, r; s >= 0; s--)\n    (r = n[s]) && (i = (o ? r(e, t, i) : r(i)) || i);\n  return o && i && ys(e, t, i), i;\n}, Le = /* @__PURE__ */ ((n) => (n.Opened = \"toolbox-opened\", n.Closed = \"toolbox-closed\", n.BlockAdded = \"toolbox-block-added\", n))(Le || {});\nconst Ct = class an extends Oe {\n  /**\n   * Toolbox constructor\n   *\n   * @param options - available parameters\n   * @param options.api - Editor API methods\n   * @param options.tools - Tools available to check whether some of them should be displayed at the Toolbox or not\n   */\n  constructor({ api: e, tools: t, i18nLabels: o }) {\n    super(), this.opened = !1, this.listeners = new _e(), this.popover = null, this.handleMobileLayoutToggle = () => {\n      this.destroyPopover(), this.initPopover();\n    }, this.onPopoverClose = () => {\n      this.opened = !1, this.emit(\n        \"toolbox-closed\"\n        /* Closed */\n      );\n    }, this.api = e, this.tools = t, this.i18nLabels = o, this.enableShortcuts(), this.nodes = {\n      toolbox: d.make(\"div\", an.CSS.toolbox)\n    }, this.initPopover(), this.nodes.toolbox.setAttribute(\"data-cy\", \"toolbox\"), this.api.events.on(Te, this.handleMobileLayoutToggle);\n  }\n  /**\n   * Returns True if Toolbox is Empty and nothing to show\n   *\n   * @returns {boolean}\n   */\n  get isEmpty() {\n    return this.toolsToBeDisplayed.length === 0;\n  }\n  /**\n   * CSS styles\n   */\n  static get CSS() {\n    return {\n      toolbox: \"ce-toolbox\"\n    };\n  }\n  /**\n   * Returns root block settings element\n   */\n  getElement() {\n    return this.nodes.toolbox;\n  }\n  /**\n   * Returns true if the Toolbox has the Flipper activated and the Flipper has selected button\n   */\n  hasFocus() {\n    if (this.popover !== null)\n      return \"hasFocus\" in this.popover ? this.popover.hasFocus() : void 0;\n  }\n  /**\n   * Destroy Module\n   */\n  destroy() {\n    var e;\n    super.destroy(), this.nodes && this.nodes.toolbox && this.nodes.toolbox.remove(), this.removeAllShortcuts(), (e = this.popover) == null || e.off(G.Closed, this.onPopoverClose), this.listeners.destroy(), this.api.events.off(Te, this.handleMobileLayoutToggle);\n  }\n  /**\n   * Toolbox Tool's button click handler\n   *\n   * @param toolName - tool type to be activated\n   * @param blockDataOverrides - Block data predefined by the activated Toolbox item\n   */\n  toolButtonActivated(e, t) {\n    this.insertNewBlock(e, t);\n  }\n  /**\n   * Open Toolbox with Tools\n   */\n  open() {\n    var e;\n    this.isEmpty || ((e = this.popover) == null || e.show(), this.opened = !0, this.emit(\n      \"toolbox-opened\"\n      /* Opened */\n    ));\n  }\n  /**\n   * Close Toolbox\n   */\n  close() {\n    var e;\n    (e = this.popover) == null || e.hide(), this.opened = !1, this.emit(\n      \"toolbox-closed\"\n      /* Closed */\n    );\n  }\n  /**\n   * Close Toolbox\n   */\n  toggle() {\n    this.opened ? this.close() : this.open();\n  }\n  /**\n   * Creates toolbox popover and appends it inside wrapper element\n   */\n  initPopover() {\n    var t;\n    const e = be() ? nn : Bt;\n    this.popover = new e({\n      scopeElement: this.api.ui.nodes.redactor,\n      searchable: !0,\n      messages: {\n        nothingFound: this.i18nLabels.nothingFound,\n        search: this.i18nLabels.filter\n      },\n      items: this.toolboxItemsToBeDisplayed\n    }), this.popover.on(G.Closed, this.onPopoverClose), (t = this.nodes.toolbox) == null || t.append(this.popover.getElement());\n  }\n  /**\n   * Destroys popover instance and removes it from DOM\n   */\n  destroyPopover() {\n    this.popover !== null && (this.popover.hide(), this.popover.off(G.Closed, this.onPopoverClose), this.popover.destroy(), this.popover = null), this.nodes.toolbox !== null && (this.nodes.toolbox.innerHTML = \"\");\n  }\n  get toolsToBeDisplayed() {\n    const e = [];\n    return this.tools.forEach((t) => {\n      t.toolbox && e.push(t);\n    }), e;\n  }\n  get toolboxItemsToBeDisplayed() {\n    const e = (t, o, i = !0) => ({\n      icon: t.icon,\n      title: z.t(K.toolNames, t.title || je(o.name)),\n      name: o.name,\n      onActivate: () => {\n        this.toolButtonActivated(o.name, t.data);\n      },\n      secondaryLabel: o.shortcut && i ? vt(o.shortcut) : \"\"\n    });\n    return this.toolsToBeDisplayed.reduce((t, o) => (Array.isArray(o.toolbox) ? o.toolbox.forEach((i, s) => {\n      t.push(e(i, o, s === 0));\n    }) : o.toolbox !== void 0 && t.push(e(o.toolbox, o)), t), []);\n  }\n  /**\n   * Iterate all tools and enable theirs shortcuts if specified\n   */\n  enableShortcuts() {\n    this.toolsToBeDisplayed.forEach((e) => {\n      const t = e.shortcut;\n      t && this.enableShortcutForTool(e.name, t);\n    });\n  }\n  /**\n   * Enable shortcut Block Tool implemented shortcut\n   *\n   * @param {string} toolName - Tool name\n   * @param {string} shortcut - shortcut according to the ShortcutData Module format\n   */\n  enableShortcutForTool(e, t) {\n    ge.add({\n      name: t,\n      on: this.api.ui.nodes.redactor,\n      handler: async (o) => {\n        o.preventDefault();\n        const i = this.api.blocks.getCurrentBlockIndex(), s = this.api.blocks.getBlockByIndex(i);\n        if (s)\n          try {\n            const r = await this.api.blocks.convert(s.id, e);\n            this.api.caret.setToBlock(r, \"end\");\n            return;\n          } catch {\n          }\n        this.insertNewBlock(e);\n      }\n    });\n  }\n  /**\n   * Removes all added shortcuts\n   * Fired when the Read-Only mode is activated\n   */\n  removeAllShortcuts() {\n    this.toolsToBeDisplayed.forEach((e) => {\n      const t = e.shortcut;\n      t && ge.remove(this.api.ui.nodes.redactor, t);\n    });\n  }\n  /**\n   * Inserts new block\n   * Can be called when button clicked on Toolbox or by ShortcutData\n   *\n   * @param {string} toolName - Tool name\n   * @param blockDataOverrides - predefined Block data\n   */\n  async insertNewBlock(e, t) {\n    const o = this.api.blocks.getCurrentBlockIndex(), i = this.api.blocks.getBlockByIndex(o);\n    if (!i)\n      return;\n    const s = i.isEmpty ? o : o + 1;\n    let r;\n    if (t) {\n      const l = await this.api.blocks.composeBlockData(e);\n      r = Object.assign(l, t);\n    }\n    const a = this.api.blocks.insert(\n      e,\n      r,\n      void 0,\n      s,\n      void 0,\n      i.isEmpty\n    );\n    a.call(ee.APPEND_CALLBACK), this.api.caret.setToBlock(s), this.emit(\"toolbox-block-added\", {\n      block: a\n    }), this.api.toolbar.close();\n  }\n};\nrn([\n  me\n], Ct.prototype, \"toolsToBeDisplayed\", 1);\nrn([\n  me\n], Ct.prototype, \"toolboxItemsToBeDisplayed\", 1);\nlet Es = Ct;\nconst ln = \"block hovered\";\nasync function xs(n, e) {\n  const t = navigator.keyboard;\n  if (!t)\n    return e;\n  try {\n    return (await t.getLayoutMap()).get(n) || e;\n  } catch (o) {\n    return console.error(o), e;\n  }\n}\nclass Bs extends E {\n  /**\n   * @class\n   * @param moduleConfiguration - Module Configuration\n   * @param moduleConfiguration.config - Editor's config\n   * @param moduleConfiguration.eventsDispatcher - Editor's event dispatcher\n   */\n  constructor({ config: e, eventsDispatcher: t }) {\n    super({\n      config: e,\n      eventsDispatcher: t\n    }), this.toolboxInstance = null;\n  }\n  /**\n   * CSS styles\n   *\n   * @returns {object}\n   */\n  get CSS() {\n    return {\n      toolbar: \"ce-toolbar\",\n      content: \"ce-toolbar__content\",\n      actions: \"ce-toolbar__actions\",\n      actionsOpened: \"ce-toolbar__actions--opened\",\n      toolbarOpened: \"ce-toolbar--opened\",\n      openedToolboxHolderModifier: \"codex-editor--toolbox-opened\",\n      plusButton: \"ce-toolbar__plus\",\n      plusButtonShortcut: \"ce-toolbar__plus-shortcut\",\n      settingsToggler: \"ce-toolbar__settings-btn\",\n      settingsTogglerHidden: \"ce-toolbar__settings-btn--hidden\"\n    };\n  }\n  /**\n   * Returns the Toolbar opening state\n   *\n   * @returns {boolean}\n   */\n  get opened() {\n    return this.nodes.wrapper.classList.contains(this.CSS.toolbarOpened);\n  }\n  /**\n   * Public interface for accessing the Toolbox\n   */\n  get toolbox() {\n    var e;\n    return {\n      opened: (e = this.toolboxInstance) == null ? void 0 : e.opened,\n      close: () => {\n        var t;\n        (t = this.toolboxInstance) == null || t.close();\n      },\n      open: () => {\n        if (this.toolboxInstance === null) {\n          S(\"toolbox.open() called before initialization is finished\", \"warn\");\n          return;\n        }\n        this.Editor.BlockManager.currentBlock = this.hoveredBlock, this.toolboxInstance.open();\n      },\n      toggle: () => {\n        if (this.toolboxInstance === null) {\n          S(\"toolbox.toggle() called before initialization is finished\", \"warn\");\n          return;\n        }\n        this.toolboxInstance.toggle();\n      },\n      hasFocus: () => {\n        var t;\n        return (t = this.toolboxInstance) == null ? void 0 : t.hasFocus();\n      }\n    };\n  }\n  /**\n   * Block actions appearance manipulations\n   */\n  get blockActions() {\n    return {\n      hide: () => {\n        this.nodes.actions.classList.remove(this.CSS.actionsOpened);\n      },\n      show: () => {\n        this.nodes.actions.classList.add(this.CSS.actionsOpened);\n      }\n    };\n  }\n  /**\n   * Methods for working with Block Tunes toggler\n   */\n  get blockTunesToggler() {\n    return {\n      hide: () => this.nodes.settingsToggler.classList.add(this.CSS.settingsTogglerHidden),\n      show: () => this.nodes.settingsToggler.classList.remove(this.CSS.settingsTogglerHidden)\n    };\n  }\n  /**\n   * Toggles read-only mode\n   *\n   * @param {boolean} readOnlyEnabled - read-only mode\n   */\n  toggleReadOnly(e) {\n    e ? (this.destroy(), this.Editor.BlockSettings.destroy(), this.disableModuleBindings()) : window.requestIdleCallback(() => {\n      this.drawUI(), this.enableModuleBindings();\n    }, { timeout: 2e3 });\n  }\n  /**\n   * Move Toolbar to the passed (or current) Block\n   *\n   * @param block - block to move Toolbar near it\n   */\n  moveAndOpen(e = this.Editor.BlockManager.currentBlock) {\n    if (this.toolboxInstance === null) {\n      S(\"Can't open Toolbar since Editor initialization is not finished yet\", \"warn\");\n      return;\n    }\n    if (this.toolboxInstance.opened && this.toolboxInstance.close(), this.Editor.BlockSettings.opened && this.Editor.BlockSettings.close(), !e)\n      return;\n    this.hoveredBlock = e;\n    const t = e.holder, { isMobile: o } = this.Editor.UI;\n    let i;\n    const s = 20, r = e.firstInput, a = t.getBoundingClientRect(), l = r !== void 0 ? r.getBoundingClientRect() : null, c = l !== null ? l.top - a.top : null, u = c !== null ? c > s : void 0;\n    if (o)\n      i = t.offsetTop + t.offsetHeight;\n    else if (r === void 0 || u) {\n      const h = parseInt(window.getComputedStyle(e.pluginsContent).paddingTop);\n      i = t.offsetTop + h;\n    } else {\n      const h = li(r), p = parseInt(window.getComputedStyle(this.nodes.plusButton).height, 10), g = 8;\n      i = t.offsetTop + h - p + g + c;\n    }\n    this.nodes.wrapper.style.top = `${Math.floor(i)}px`, this.Editor.BlockManager.blocks.length === 1 && e.isEmpty ? this.blockTunesToggler.hide() : this.blockTunesToggler.show(), this.open();\n  }\n  /**\n   * Close the Toolbar\n   */\n  close() {\n    var e, t;\n    this.Editor.ReadOnly.isEnabled || ((e = this.nodes.wrapper) == null || e.classList.remove(this.CSS.toolbarOpened), this.blockActions.hide(), (t = this.toolboxInstance) == null || t.close(), this.Editor.BlockSettings.close(), this.reset());\n  }\n  /**\n   * Reset the Toolbar position to prevent DOM height growth, for example after blocks deletion\n   */\n  reset() {\n    this.nodes.wrapper.style.top = \"unset\";\n  }\n  /**\n   * Open Toolbar with Plus Button and Actions\n   *\n   * @param {boolean} withBlockActions - by default, Toolbar opens with Block Actions.\n   *                                     This flag allows to open Toolbar without Actions.\n   */\n  open(e = !0) {\n    this.nodes.wrapper.classList.add(this.CSS.toolbarOpened), e ? this.blockActions.show() : this.blockActions.hide();\n  }\n  /**\n   * Draws Toolbar elements\n   */\n  async make() {\n    this.nodes.wrapper = d.make(\"div\", this.CSS.toolbar), [\"content\", \"actions\"].forEach((s) => {\n      this.nodes[s] = d.make(\"div\", this.CSS[s]);\n    }), d.append(this.nodes.wrapper, this.nodes.content), d.append(this.nodes.content, this.nodes.actions), this.nodes.plusButton = d.make(\"div\", this.CSS.plusButton, {\n      innerHTML: ts\n    }), d.append(this.nodes.actions, this.nodes.plusButton), this.readOnlyMutableListeners.on(this.nodes.plusButton, \"click\", () => {\n      $e(!0), this.plusButtonClicked();\n    }, !1);\n    const e = d.make(\"div\");\n    e.appendChild(document.createTextNode(z.ui(K.ui.toolbar.toolbox, \"Add\"))), e.appendChild(d.make(\"div\", this.CSS.plusButtonShortcut, {\n      textContent: \"/\"\n    })), ze(this.nodes.plusButton, e, {\n      hidingDelay: 400\n    }), this.nodes.settingsToggler = d.make(\"span\", this.CSS.settingsToggler, {\n      innerHTML: es\n    }), d.append(this.nodes.actions, this.nodes.settingsToggler);\n    const t = d.make(\"div\"), o = d.text(z.ui(K.ui.blockTunes.toggler, \"Click to tune\")), i = await xs(\"Slash\", \"/\");\n    t.appendChild(o), t.appendChild(d.make(\"div\", this.CSS.plusButtonShortcut, {\n      textContent: vt(`CMD + ${i}`)\n    })), ze(this.nodes.settingsToggler, t, {\n      hidingDelay: 400\n    }), d.append(this.nodes.actions, this.makeToolbox()), d.append(this.nodes.actions, this.Editor.BlockSettings.getElement()), d.append(this.Editor.UI.nodes.wrapper, this.nodes.wrapper);\n  }\n  /**\n   * Creates the Toolbox instance and return it's rendered element\n   */\n  makeToolbox() {\n    return this.toolboxInstance = new Es({\n      api: this.Editor.API.methods,\n      tools: this.Editor.Tools.blockTools,\n      i18nLabels: {\n        filter: z.ui(K.ui.popover, \"Filter\"),\n        nothingFound: z.ui(K.ui.popover, \"Nothing found\")\n      }\n    }), this.toolboxInstance.on(Le.Opened, () => {\n      this.Editor.UI.nodes.wrapper.classList.add(this.CSS.openedToolboxHolderModifier);\n    }), this.toolboxInstance.on(Le.Closed, () => {\n      this.Editor.UI.nodes.wrapper.classList.remove(this.CSS.openedToolboxHolderModifier);\n    }), this.toolboxInstance.on(Le.BlockAdded, ({ block: e }) => {\n      const { BlockManager: t, Caret: o } = this.Editor, i = t.getBlockById(e.id);\n      i.inputs.length === 0 && (i === t.lastBlock ? (t.insertAtEnd(), o.setToBlock(t.lastBlock)) : o.setToBlock(t.nextBlock));\n    }), this.toolboxInstance.getElement();\n  }\n  /**\n   * Handler for Plus Button\n   */\n  plusButtonClicked() {\n    var e;\n    this.Editor.BlockManager.currentBlock = this.hoveredBlock, (e = this.toolboxInstance) == null || e.toggle();\n  }\n  /**\n   * Enable bindings\n   */\n  enableModuleBindings() {\n    this.readOnlyMutableListeners.on(this.nodes.settingsToggler, \"mousedown\", (e) => {\n      var t;\n      e.stopPropagation(), this.settingsTogglerClicked(), (t = this.toolboxInstance) != null && t.opened && this.toolboxInstance.close(), $e(!0);\n    }, !0), be() || this.eventsDispatcher.on(ln, (e) => {\n      var t;\n      this.Editor.BlockSettings.opened || (t = this.toolboxInstance) != null && t.opened || this.moveAndOpen(e.block);\n    });\n  }\n  /**\n   * Disable bindings\n   */\n  disableModuleBindings() {\n    this.readOnlyMutableListeners.clearAll();\n  }\n  /**\n   * Clicks on the Block Settings toggler\n   */\n  settingsTogglerClicked() {\n    this.Editor.BlockManager.currentBlock = this.hoveredBlock, this.Editor.BlockSettings.opened ? this.Editor.BlockSettings.close() : this.Editor.BlockSettings.open(this.hoveredBlock);\n  }\n  /**\n   * Draws Toolbar UI\n   *\n   * Toolbar contains BlockSettings and Toolbox.\n   * That's why at first we draw its components and then Toolbar itself\n   *\n   * Steps:\n   *  - Make Toolbar dependent components like BlockSettings, Toolbox and so on\n   *  - Make itself and append dependent nodes to itself\n   *\n   */\n  drawUI() {\n    this.Editor.BlockSettings.make(), this.make();\n  }\n  /**\n   * Removes all created and saved HTMLElements\n   * It is used in Read-Only mode\n   */\n  destroy() {\n    this.removeAllNodes(), this.toolboxInstance && this.toolboxInstance.destroy();\n  }\n}\nvar ae = /* @__PURE__ */ ((n) => (n[n.Block = 0] = \"Block\", n[n.Inline = 1] = \"Inline\", n[n.Tune = 2] = \"Tune\", n))(ae || {}), Pe = /* @__PURE__ */ ((n) => (n.Shortcut = \"shortcut\", n.Toolbox = \"toolbox\", n.EnabledInlineTools = \"inlineToolbar\", n.EnabledBlockTunes = \"tunes\", n.Config = \"config\", n))(Pe || {}), cn = /* @__PURE__ */ ((n) => (n.Shortcut = \"shortcut\", n.SanitizeConfig = \"sanitize\", n))(cn || {}), pe = /* @__PURE__ */ ((n) => (n.IsEnabledLineBreaks = \"enableLineBreaks\", n.Toolbox = \"toolbox\", n.ConversionConfig = \"conversionConfig\", n.IsReadOnlySupported = \"isReadOnlySupported\", n.PasteConfig = \"pasteConfig\", n))(pe || {}), We = /* @__PURE__ */ ((n) => (n.IsInline = \"isInline\", n.Title = \"title\", n.IsReadOnlySupported = \"isReadOnlySupported\", n))(We || {}), mt = /* @__PURE__ */ ((n) => (n.IsTune = \"isTune\", n))(mt || {});\nclass Tt {\n  /**\n   * @class\n   * @param {ConstructorOptions} options - Constructor options\n   */\n  constructor({\n    name: e,\n    constructable: t,\n    config: o,\n    api: i,\n    isDefault: s,\n    isInternal: r = !1,\n    defaultPlaceholder: a\n  }) {\n    this.api = i, this.name = e, this.constructable = t, this.config = o, this.isDefault = s, this.isInternal = r, this.defaultPlaceholder = a;\n  }\n  /**\n   * Returns Tool user configuration\n   */\n  get settings() {\n    const e = this.config.config || {};\n    return this.isDefault && !(\"placeholder\" in e) && this.defaultPlaceholder && (e.placeholder = this.defaultPlaceholder), e;\n  }\n  /**\n   * Calls Tool's reset method\n   */\n  reset() {\n    if (A(this.constructable.reset))\n      return this.constructable.reset();\n  }\n  /**\n   * Calls Tool's prepare method\n   */\n  prepare() {\n    if (A(this.constructable.prepare))\n      return this.constructable.prepare({\n        toolName: this.name,\n        config: this.settings\n      });\n  }\n  /**\n   * Returns shortcut for Tool (internal or specified by user)\n   */\n  get shortcut() {\n    const e = this.constructable.shortcut;\n    return this.config.shortcut || e;\n  }\n  /**\n   * Returns Tool's sanitizer configuration\n   */\n  get sanitizeConfig() {\n    return this.constructable.sanitize || {};\n  }\n  /**\n   * Returns true if Tools is inline\n   */\n  isInline() {\n    return this.type === ae.Inline;\n  }\n  /**\n   * Returns true if Tools is block\n   */\n  isBlock() {\n    return this.type === ae.Block;\n  }\n  /**\n   * Returns true if Tools is tune\n   */\n  isTune() {\n    return this.type === ae.Tune;\n  }\n}\nclass Cs extends E {\n  /**\n   * @param moduleConfiguration - Module Configuration\n   * @param moduleConfiguration.config - Editor's config\n   * @param moduleConfiguration.eventsDispatcher - Editor's event dispatcher\n   */\n  constructor({ config: e, eventsDispatcher: t }) {\n    super({\n      config: e,\n      eventsDispatcher: t\n    }), this.CSS = {\n      inlineToolbar: \"ce-inline-toolbar\"\n    }, this.opened = !1, this.popover = null, this.toolbarVerticalMargin = be() ? 20 : 6, this.tools = /* @__PURE__ */ new Map(), window.requestIdleCallback(() => {\n      this.make();\n    }, { timeout: 2e3 });\n  }\n  /**\n   *  Moving / appearance\n   *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n   */\n  /**\n   * Shows Inline Toolbar if something is selected\n   *\n   * @param [needToClose] - pass true to close toolbar if it is not allowed.\n   *                                  Avoid to use it just for closing IT, better call .close() clearly.\n   */\n  async tryToShow(e = !1) {\n    e && this.close(), this.allowedToShow() && (await this.open(), this.Editor.Toolbar.close());\n  }\n  /**\n   * Hides Inline Toolbar\n   */\n  close() {\n    var e, t;\n    if (this.opened) {\n      for (const [o, i] of this.tools) {\n        const s = this.getToolShortcut(o.name);\n        s !== void 0 && ge.remove(this.Editor.UI.nodes.redactor, s), A(i.clear) && i.clear();\n      }\n      this.tools = /* @__PURE__ */ new Map(), this.reset(), this.opened = !1, (e = this.popover) == null || e.hide(), (t = this.popover) == null || t.destroy(), this.popover = null;\n    }\n  }\n  /**\n   * Check if node is contained by Inline Toolbar\n   *\n   * @param {Node} node — node to check\n   */\n  containsNode(e) {\n    return this.nodes.wrapper === void 0 ? !1 : this.nodes.wrapper.contains(e);\n  }\n  /**\n   * Removes UI and its components\n   */\n  destroy() {\n    var e;\n    this.removeAllNodes(), (e = this.popover) == null || e.destroy(), this.popover = null;\n  }\n  /**\n   * Making DOM\n   */\n  make() {\n    this.nodes.wrapper = d.make(\"div\", [\n      this.CSS.inlineToolbar,\n      ...this.isRtl ? [this.Editor.UI.CSS.editorRtlFix] : []\n    ]), this.nodes.wrapper.setAttribute(\"data-cy\", \"inline-toolbar\"), d.append(this.Editor.UI.nodes.wrapper, this.nodes.wrapper);\n  }\n  /**\n   * Shows Inline Toolbar\n   */\n  async open() {\n    var t;\n    if (this.opened)\n      return;\n    this.opened = !0, this.popover !== null && this.popover.destroy(), this.createToolsInstances();\n    const e = await this.getPopoverItems();\n    this.popover = new hs({\n      items: e,\n      scopeElement: this.Editor.API.methods.ui.nodes.redactor,\n      messages: {\n        nothingFound: z.ui(K.ui.popover, \"Nothing found\"),\n        search: z.ui(K.ui.popover, \"Filter\")\n      }\n    }), this.move(this.popover.size.width), (t = this.nodes.wrapper) == null || t.append(this.popover.getElement()), this.popover.show();\n  }\n  /**\n   * Move Toolbar to the selected text\n   *\n   * @param popoverWidth - width of the toolbar popover\n   */\n  move(e) {\n    const t = b.rect, o = this.Editor.UI.nodes.wrapper.getBoundingClientRect(), i = {\n      x: t.x - o.x,\n      y: t.y + t.height - // + window.scrollY\n      o.top + this.toolbarVerticalMargin\n    };\n    i.x + e + o.x > this.Editor.UI.contentRect.right && (i.x = this.Editor.UI.contentRect.right - e - o.x), this.nodes.wrapper.style.left = Math.floor(i.x) + \"px\", this.nodes.wrapper.style.top = Math.floor(i.y) + \"px\";\n  }\n  /**\n   * Clear orientation classes and reset position\n   */\n  reset() {\n    this.nodes.wrapper.style.left = \"0\", this.nodes.wrapper.style.top = \"0\";\n  }\n  /**\n   * Need to show Inline Toolbar or not\n   */\n  allowedToShow() {\n    const e = [\"IMG\", \"INPUT\"], t = b.get(), o = b.text;\n    if (!t || !t.anchorNode || t.isCollapsed || o.length < 1)\n      return !1;\n    const i = d.isElement(t.anchorNode) ? t.anchorNode : t.anchorNode.parentElement;\n    if (i === null || t !== null && e.includes(i.tagName))\n      return !1;\n    const s = this.Editor.BlockManager.getBlock(t.anchorNode);\n    return !s || this.getTools().some((c) => s.tool.inlineTools.has(c.name)) === !1 ? !1 : i.closest(\"[contenteditable]\") !== null;\n  }\n  /**\n   *  Working with Tools\n   *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n   */\n  /**\n   * Returns tools that are available for current block\n   *\n   * Used to check if Inline Toolbar could be shown\n   * and to render tools in the Inline Toolbar\n   */\n  getTools() {\n    const e = this.Editor.BlockManager.currentBlock;\n    return e ? Array.from(e.tool.inlineTools.values()).filter((o) => !(this.Editor.ReadOnly.isEnabled && o.isReadOnlySupported !== !0)) : [];\n  }\n  /**\n   * Constructs tools instances and saves them to this.tools\n   */\n  createToolsInstances() {\n    this.tools = /* @__PURE__ */ new Map(), this.getTools().forEach((t) => {\n      const o = t.create();\n      this.tools.set(t, o);\n    });\n  }\n  /**\n   * Returns Popover Items for tools segregated by their appearance type: regular items and custom html elements.\n   */\n  async getPopoverItems() {\n    const e = [];\n    let t = 0;\n    for (const [o, i] of this.tools) {\n      const s = await i.render(), r = this.getToolShortcut(o.name);\n      if (r !== void 0)\n        try {\n          this.enableShortcuts(o.name, r);\n        } catch {\n        }\n      const a = r !== void 0 ? vt(r) : void 0, l = z.t(\n        K.toolNames,\n        o.title || je(o.name)\n      );\n      [s].flat().forEach((c) => {\n        var h, p;\n        const u = {\n          name: o.name,\n          onActivate: () => {\n            this.toolClicked(i);\n          },\n          hint: {\n            title: l,\n            description: a\n          }\n        };\n        if (d.isElement(c)) {\n          const g = {\n            ...u,\n            element: c,\n            type: _.Html\n          };\n          if (A(i.renderActions)) {\n            const f = i.renderActions();\n            g.children = {\n              isOpen: (h = i.checkState) == null ? void 0 : h.call(i, b.get()),\n              /** Disable keyboard navigation in actions, as it might conflict with enter press handling */\n              isFlippable: !1,\n              items: [\n                {\n                  type: _.Html,\n                  element: f\n                }\n              ]\n            };\n          } else\n            (p = i.checkState) == null || p.call(i, b.get());\n          e.push(g);\n        } else if (c.type === _.Html)\n          e.push({\n            ...u,\n            ...c,\n            type: _.Html\n          });\n        else if (c.type === _.Separator)\n          e.push({\n            type: _.Separator\n          });\n        else {\n          const g = {\n            ...u,\n            ...c,\n            type: _.Default\n          };\n          \"children\" in g && t !== 0 && e.push({\n            type: _.Separator\n          }), e.push(g), \"children\" in g && t < this.tools.size - 1 && e.push({\n            type: _.Separator\n          });\n        }\n      }), t++;\n    }\n    return e;\n  }\n  /**\n   * Get shortcut name for tool\n   *\n   * @param toolName — Tool name\n   */\n  getToolShortcut(e) {\n    const { Tools: t } = this.Editor, o = t.inlineTools.get(e), i = t.internal.inlineTools;\n    return Array.from(i.keys()).includes(e) ? this.inlineTools[e][cn.Shortcut] : o == null ? void 0 : o.shortcut;\n  }\n  /**\n   * Enable Tool shortcut with Editor Shortcuts Module\n   *\n   * @param toolName - tool name\n   * @param shortcut - shortcut according to the ShortcutData Module format\n   */\n  enableShortcuts(e, t) {\n    ge.add({\n      name: t,\n      handler: (o) => {\n        var s;\n        const { currentBlock: i } = this.Editor.BlockManager;\n        i && i.tool.enabledInlineTools && (o.preventDefault(), (s = this.popover) == null || s.activateItemByName(e));\n      },\n      /**\n       * We need to bind shortcut to the document to make it work in read-only mode\n       */\n      on: document\n    });\n  }\n  /**\n   * Inline Tool button clicks\n   *\n   * @param tool - Tool's instance\n   */\n  toolClicked(e) {\n    var o;\n    const t = b.range;\n    (o = e.surround) == null || o.call(e, t), this.checkToolsState();\n  }\n  /**\n   * Check Tools` state by selection\n   */\n  checkToolsState() {\n    var e;\n    (e = this.tools) == null || e.forEach((t) => {\n      var o;\n      (o = t.checkState) == null || o.call(t, b.get());\n    });\n  }\n  /**\n   * Get inline tools tools\n   * Tools that has isInline is true\n   */\n  get inlineTools() {\n    const e = {};\n    return Array.from(this.Editor.Tools.inlineTools.entries()).forEach(([t, o]) => {\n      e[t] = o.create();\n    }), e;\n  }\n}\nfunction dn() {\n  const n = window.getSelection();\n  if (n === null)\n    return [null, 0];\n  let e = n.focusNode, t = n.focusOffset;\n  return e === null ? [null, 0] : (e.nodeType !== Node.TEXT_NODE && e.childNodes.length > 0 && (e.childNodes[t] ? (e = e.childNodes[t], t = 0) : (e = e.childNodes[t - 1], t = e.textContent.length)), [e, t]);\n}\nfunction un(n, e, t, o) {\n  const i = document.createRange();\n  o === \"left\" ? (i.setStart(n, 0), i.setEnd(e, t)) : (i.setStart(e, t), i.setEnd(n, n.childNodes.length));\n  const s = i.cloneContents(), r = document.createElement(\"div\");\n  r.appendChild(s);\n  const a = r.textContent || \"\";\n  return ai(a);\n}\nfunction Ne(n) {\n  const e = d.getDeepestNode(n);\n  if (e === null || d.isEmpty(n))\n    return !0;\n  if (d.isNativeInput(e))\n    return e.selectionEnd === 0;\n  if (d.isEmpty(n))\n    return !0;\n  const [t, o] = dn();\n  return t === null ? !1 : un(n, t, o, \"left\");\n}\nfunction Re(n) {\n  const e = d.getDeepestNode(n, !0);\n  if (e === null)\n    return !0;\n  if (d.isNativeInput(e))\n    return e.selectionEnd === e.value.length;\n  const [t, o] = dn();\n  return t === null ? !1 : un(n, t, o, \"right\");\n}\nvar hn = {}, St = {}, Xe = {}, de = {}, It = {}, Ot = {};\nObject.defineProperty(Ot, \"__esModule\", { value: !0 });\nOt.allInputsSelector = Ts;\nfunction Ts() {\n  var n = [\"text\", \"password\", \"email\", \"number\", \"search\", \"tel\", \"url\"];\n  return \"[contenteditable=true], textarea, input:not([type]), \" + n.map(function(e) {\n    return 'input[type=\"'.concat(e, '\"]');\n  }).join(\", \");\n}\n(function(n) {\n  Object.defineProperty(n, \"__esModule\", { value: !0 }), n.allInputsSelector = void 0;\n  var e = Ot;\n  Object.defineProperty(n, \"allInputsSelector\", { enumerable: !0, get: function() {\n    return e.allInputsSelector;\n  } });\n})(It);\nvar ue = {}, _t = {};\nObject.defineProperty(_t, \"__esModule\", { value: !0 });\n_t.isNativeInput = Ss;\nfunction Ss(n) {\n  var e = [\n    \"INPUT\",\n    \"TEXTAREA\"\n  ];\n  return n && n.tagName ? e.includes(n.tagName) : !1;\n}\n(function(n) {\n  Object.defineProperty(n, \"__esModule\", { value: !0 }), n.isNativeInput = void 0;\n  var e = _t;\n  Object.defineProperty(n, \"isNativeInput\", { enumerable: !0, get: function() {\n    return e.isNativeInput;\n  } });\n})(ue);\nvar pn = {}, Mt = {};\nObject.defineProperty(Mt, \"__esModule\", { value: !0 });\nMt.append = Is;\nfunction Is(n, e) {\n  Array.isArray(e) ? e.forEach(function(t) {\n    n.appendChild(t);\n  }) : n.appendChild(e);\n}\n(function(n) {\n  Object.defineProperty(n, \"__esModule\", { value: !0 }), n.append = void 0;\n  var e = Mt;\n  Object.defineProperty(n, \"append\", { enumerable: !0, get: function() {\n    return e.append;\n  } });\n})(pn);\nvar At = {}, Lt = {};\nObject.defineProperty(Lt, \"__esModule\", { value: !0 });\nLt.blockElements = Os;\nfunction Os() {\n  return [\n    \"address\",\n    \"article\",\n    \"aside\",\n    \"blockquote\",\n    \"canvas\",\n    \"div\",\n    \"dl\",\n    \"dt\",\n    \"fieldset\",\n    \"figcaption\",\n    \"figure\",\n    \"footer\",\n    \"form\",\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\",\n    \"header\",\n    \"hgroup\",\n    \"hr\",\n    \"li\",\n    \"main\",\n    \"nav\",\n    \"noscript\",\n    \"ol\",\n    \"output\",\n    \"p\",\n    \"pre\",\n    \"ruby\",\n    \"section\",\n    \"table\",\n    \"tbody\",\n    \"thead\",\n    \"tr\",\n    \"tfoot\",\n    \"ul\",\n    \"video\"\n  ];\n}\n(function(n) {\n  Object.defineProperty(n, \"__esModule\", { value: !0 }), n.blockElements = void 0;\n  var e = Lt;\n  Object.defineProperty(n, \"blockElements\", { enumerable: !0, get: function() {\n    return e.blockElements;\n  } });\n})(At);\nvar fn = {}, Pt = {};\nObject.defineProperty(Pt, \"__esModule\", { value: !0 });\nPt.calculateBaseline = _s;\nfunction _s(n) {\n  var e = window.getComputedStyle(n), t = parseFloat(e.fontSize), o = parseFloat(e.lineHeight) || t * 1.2, i = parseFloat(e.paddingTop), s = parseFloat(e.borderTopWidth), r = parseFloat(e.marginTop), a = t * 0.8, l = (o - t) / 2, c = r + s + i + l + a;\n  return c;\n}\n(function(n) {\n  Object.defineProperty(n, \"__esModule\", { value: !0 }), n.calculateBaseline = void 0;\n  var e = Pt;\n  Object.defineProperty(n, \"calculateBaseline\", { enumerable: !0, get: function() {\n    return e.calculateBaseline;\n  } });\n})(fn);\nvar gn = {}, Nt = {}, Rt = {}, Dt = {};\nObject.defineProperty(Dt, \"__esModule\", { value: !0 });\nDt.isContentEditable = Ms;\nfunction Ms(n) {\n  return n.contentEditable === \"true\";\n}\n(function(n) {\n  Object.defineProperty(n, \"__esModule\", { value: !0 }), n.isContentEditable = void 0;\n  var e = Dt;\n  Object.defineProperty(n, \"isContentEditable\", { enumerable: !0, get: function() {\n    return e.isContentEditable;\n  } });\n})(Rt);\nObject.defineProperty(Nt, \"__esModule\", { value: !0 });\nNt.canSetCaret = Ps;\nvar As = ue, Ls = Rt;\nfunction Ps(n) {\n  var e = !0;\n  if ((0, As.isNativeInput)(n))\n    switch (n.type) {\n      case \"file\":\n      case \"checkbox\":\n      case \"radio\":\n      case \"hidden\":\n      case \"submit\":\n      case \"button\":\n      case \"image\":\n      case \"reset\":\n        e = !1;\n        break;\n    }\n  else\n    e = (0, Ls.isContentEditable)(n);\n  return e;\n}\n(function(n) {\n  Object.defineProperty(n, \"__esModule\", { value: !0 }), n.canSetCaret = void 0;\n  var e = Nt;\n  Object.defineProperty(n, \"canSetCaret\", { enumerable: !0, get: function() {\n    return e.canSetCaret;\n  } });\n})(gn);\nvar Ve = {}, Ft = {};\nfunction Ns(n, e, t) {\n  const o = t.value !== void 0 ? \"value\" : \"get\", i = t[o], s = `#${e}Cache`;\n  if (t[o] = function(...r) {\n    return this[s] === void 0 && (this[s] = i.apply(this, r)), this[s];\n  }, o === \"get\" && t.set) {\n    const r = t.set;\n    t.set = function(a) {\n      delete n[s], r.apply(this, a);\n    };\n  }\n  return t;\n}\nfunction mn() {\n  const n = {\n    win: !1,\n    mac: !1,\n    x11: !1,\n    linux: !1\n  }, e = Object.keys(n).find((t) => window.navigator.appVersion.toLowerCase().indexOf(t) !== -1);\n  return e !== void 0 && (n[e] = !0), n;\n}\nfunction jt(n) {\n  return n != null && n !== \"\" && (typeof n != \"object\" || Object.keys(n).length > 0);\n}\nfunction Rs(n) {\n  return !jt(n);\n}\nconst Ds = () => typeof window < \"u\" && window.navigator !== null && jt(window.navigator.platform) && (/iP(ad|hone|od)/.test(window.navigator.platform) || window.navigator.platform === \"MacIntel\" && window.navigator.maxTouchPoints > 1);\nfunction Fs(n) {\n  const e = mn();\n  return n = n.replace(/shift/gi, \"⇧\").replace(/backspace/gi, \"⌫\").replace(/enter/gi, \"⏎\").replace(/up/gi, \"↑\").replace(/left/gi, \"→\").replace(/down/gi, \"↓\").replace(/right/gi, \"←\").replace(/escape/gi, \"⎋\").replace(/insert/gi, \"Ins\").replace(/delete/gi, \"␡\").replace(/\\+/gi, \"+\"), e.mac ? n = n.replace(/ctrl|cmd/gi, \"⌘\").replace(/alt/gi, \"⌥\") : n = n.replace(/cmd/gi, \"Ctrl\").replace(/windows/gi, \"WIN\"), n;\n}\nfunction js(n) {\n  return n[0].toUpperCase() + n.slice(1);\n}\nfunction Hs(n) {\n  const e = document.createElement(\"div\");\n  e.style.position = \"absolute\", e.style.left = \"-999px\", e.style.bottom = \"-999px\", e.innerHTML = n, document.body.appendChild(e);\n  const t = window.getSelection(), o = document.createRange();\n  if (o.selectNode(e), t === null)\n    throw new Error(\"Cannot copy text to clipboard\");\n  t.removeAllRanges(), t.addRange(o), document.execCommand(\"copy\"), document.body.removeChild(e);\n}\nfunction $s(n, e, t) {\n  let o;\n  return (...i) => {\n    const s = this, r = () => {\n      o = void 0, t !== !0 && n.apply(s, i);\n    }, a = t === !0 && o !== void 0;\n    window.clearTimeout(o), o = window.setTimeout(r, e), a && n.apply(s, i);\n  };\n}\nfunction oe(n) {\n  return Object.prototype.toString.call(n).match(/\\s([a-zA-Z]+)/)[1].toLowerCase();\n}\nfunction zs(n) {\n  return oe(n) === \"boolean\";\n}\nfunction bn(n) {\n  return oe(n) === \"function\" || oe(n) === \"asyncfunction\";\n}\nfunction Us(n) {\n  return bn(n) && /^\\s*class\\s+/.test(n.toString());\n}\nfunction Ws(n) {\n  return oe(n) === \"number\";\n}\nfunction De(n) {\n  return oe(n) === \"object\";\n}\nfunction Ys(n) {\n  return Promise.resolve(n) === n;\n}\nfunction Ks(n) {\n  return oe(n) === \"string\";\n}\nfunction Xs(n) {\n  return oe(n) === \"undefined\";\n}\nfunction bt(n, ...e) {\n  if (!e.length)\n    return n;\n  const t = e.shift();\n  if (De(n) && De(t))\n    for (const o in t)\n      De(t[o]) ? (n[o] === void 0 && Object.assign(n, { [o]: {} }), bt(n[o], t[o])) : Object.assign(n, { [o]: t[o] });\n  return bt(n, ...e);\n}\nfunction Vs(n, e, t) {\n  const o = `«${e}» is deprecated and will be removed in the next major release. Please use the «${t}» instead.`;\n  n && console.warn(o);\n}\nfunction qs(n) {\n  try {\n    return new URL(n).href;\n  } catch {\n  }\n  return n.substring(0, 2) === \"//\" ? window.location.protocol + n : window.location.origin + n;\n}\nfunction Zs(n) {\n  return n > 47 && n < 58 || n === 32 || n === 13 || n === 229 || n > 64 && n < 91 || n > 95 && n < 112 || n > 185 && n < 193 || n > 218 && n < 223;\n}\nconst Gs = {\n  BACKSPACE: 8,\n  TAB: 9,\n  ENTER: 13,\n  SHIFT: 16,\n  CTRL: 17,\n  ALT: 18,\n  ESC: 27,\n  SPACE: 32,\n  LEFT: 37,\n  UP: 38,\n  DOWN: 40,\n  RIGHT: 39,\n  DELETE: 46,\n  META: 91,\n  SLASH: 191\n}, Qs = {\n  LEFT: 0,\n  WHEEL: 1,\n  RIGHT: 2,\n  BACKWARD: 3,\n  FORWARD: 4\n};\nlet Js = class {\n  constructor() {\n    this.completed = Promise.resolve();\n  }\n  /**\n   * Add new promise to queue\n   * @param operation - promise should be added to queue\n   */\n  add(e) {\n    return new Promise((t, o) => {\n      this.completed = this.completed.then(e).then(t).catch(o);\n    });\n  }\n};\nfunction er(n, e, t = void 0) {\n  let o, i, s, r = null, a = 0;\n  t || (t = {});\n  const l = function() {\n    a = t.leading === !1 ? 0 : Date.now(), r = null, s = n.apply(o, i), r === null && (o = i = null);\n  };\n  return function() {\n    const c = Date.now();\n    !a && t.leading === !1 && (a = c);\n    const u = e - (c - a);\n    return o = this, i = arguments, u <= 0 || u > e ? (r && (clearTimeout(r), r = null), a = c, s = n.apply(o, i), r === null && (o = i = null)) : !r && t.trailing !== !1 && (r = setTimeout(l, u)), s;\n  };\n}\nconst tr = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  PromiseQueue: Js,\n  beautifyShortcut: Fs,\n  cacheable: Ns,\n  capitalize: js,\n  copyTextToClipboard: Hs,\n  debounce: $s,\n  deepMerge: bt,\n  deprecationAssert: Vs,\n  getUserOS: mn,\n  getValidUrl: qs,\n  isBoolean: zs,\n  isClass: Us,\n  isEmpty: Rs,\n  isFunction: bn,\n  isIosDevice: Ds,\n  isNumber: Ws,\n  isObject: De,\n  isPrintableKey: Zs,\n  isPromise: Ys,\n  isString: Ks,\n  isUndefined: Xs,\n  keyCodes: Gs,\n  mouseButtons: Qs,\n  notEmpty: jt,\n  throttle: er,\n  typeOf: oe\n}, Symbol.toStringTag, { value: \"Module\" })), Ht = /* @__PURE__ */ Xn(tr);\nObject.defineProperty(Ft, \"__esModule\", { value: !0 });\nFt.containsOnlyInlineElements = ir;\nvar or = Ht, nr = At;\nfunction ir(n) {\n  var e;\n  (0, or.isString)(n) ? (e = document.createElement(\"div\"), e.innerHTML = n) : e = n;\n  var t = function(o) {\n    return !(0, nr.blockElements)().includes(o.tagName.toLowerCase()) && Array.from(o.children).every(t);\n  };\n  return Array.from(e.children).every(t);\n}\n(function(n) {\n  Object.defineProperty(n, \"__esModule\", { value: !0 }), n.containsOnlyInlineElements = void 0;\n  var e = Ft;\n  Object.defineProperty(n, \"containsOnlyInlineElements\", { enumerable: !0, get: function() {\n    return e.containsOnlyInlineElements;\n  } });\n})(Ve);\nvar vn = {}, $t = {}, qe = {}, zt = {};\nObject.defineProperty(zt, \"__esModule\", { value: !0 });\nzt.make = sr;\nfunction sr(n, e, t) {\n  var o;\n  e === void 0 && (e = null), t === void 0 && (t = {});\n  var i = document.createElement(n);\n  if (Array.isArray(e)) {\n    var s = e.filter(function(a) {\n      return a !== void 0;\n    });\n    (o = i.classList).add.apply(o, s);\n  } else\n    e !== null && i.classList.add(e);\n  for (var r in t)\n    Object.prototype.hasOwnProperty.call(t, r) && (i[r] = t[r]);\n  return i;\n}\n(function(n) {\n  Object.defineProperty(n, \"__esModule\", { value: !0 }), n.make = void 0;\n  var e = zt;\n  Object.defineProperty(n, \"make\", { enumerable: !0, get: function() {\n    return e.make;\n  } });\n})(qe);\nObject.defineProperty($t, \"__esModule\", { value: !0 });\n$t.fragmentToString = ar;\nvar rr = qe;\nfunction ar(n) {\n  var e = (0, rr.make)(\"div\");\n  return e.appendChild(n), e.innerHTML;\n}\n(function(n) {\n  Object.defineProperty(n, \"__esModule\", { value: !0 }), n.fragmentToString = void 0;\n  var e = $t;\n  Object.defineProperty(n, \"fragmentToString\", { enumerable: !0, get: function() {\n    return e.fragmentToString;\n  } });\n})(vn);\nvar kn = {}, Ut = {};\nObject.defineProperty(Ut, \"__esModule\", { value: !0 });\nUt.getContentLength = cr;\nvar lr = ue;\nfunction cr(n) {\n  var e, t;\n  return (0, lr.isNativeInput)(n) ? n.value.length : n.nodeType === Node.TEXT_NODE ? n.length : (t = (e = n.textContent) === null || e === void 0 ? void 0 : e.length) !== null && t !== void 0 ? t : 0;\n}\n(function(n) {\n  Object.defineProperty(n, \"__esModule\", { value: !0 }), n.getContentLength = void 0;\n  var e = Ut;\n  Object.defineProperty(n, \"getContentLength\", { enumerable: !0, get: function() {\n    return e.getContentLength;\n  } });\n})(kn);\nvar Wt = {}, Yt = {}, Io = Ce && Ce.__spreadArray || function(n, e, t) {\n  if (t || arguments.length === 2)\n    for (var o = 0, i = e.length, s; o < i; o++)\n      (s || !(o in e)) && (s || (s = Array.prototype.slice.call(e, 0, o)), s[o] = e[o]);\n  return n.concat(s || Array.prototype.slice.call(e));\n};\nObject.defineProperty(Yt, \"__esModule\", { value: !0 });\nYt.getDeepestBlockElements = yn;\nvar dr = Ve;\nfunction yn(n) {\n  return (0, dr.containsOnlyInlineElements)(n) ? [n] : Array.from(n.children).reduce(function(e, t) {\n    return Io(Io([], e, !0), yn(t), !0);\n  }, []);\n}\n(function(n) {\n  Object.defineProperty(n, \"__esModule\", { value: !0 }), n.getDeepestBlockElements = void 0;\n  var e = Yt;\n  Object.defineProperty(n, \"getDeepestBlockElements\", { enumerable: !0, get: function() {\n    return e.getDeepestBlockElements;\n  } });\n})(Wt);\nvar wn = {}, Kt = {}, Ze = {}, Xt = {};\nObject.defineProperty(Xt, \"__esModule\", { value: !0 });\nXt.isLineBreakTag = ur;\nfunction ur(n) {\n  return [\n    \"BR\",\n    \"WBR\"\n  ].includes(n.tagName);\n}\n(function(n) {\n  Object.defineProperty(n, \"__esModule\", { value: !0 }), n.isLineBreakTag = void 0;\n  var e = Xt;\n  Object.defineProperty(n, \"isLineBreakTag\", { enumerable: !0, get: function() {\n    return e.isLineBreakTag;\n  } });\n})(Ze);\nvar Ge = {}, Vt = {};\nObject.defineProperty(Vt, \"__esModule\", { value: !0 });\nVt.isSingleTag = hr;\nfunction hr(n) {\n  return [\n    \"AREA\",\n    \"BASE\",\n    \"BR\",\n    \"COL\",\n    \"COMMAND\",\n    \"EMBED\",\n    \"HR\",\n    \"IMG\",\n    \"INPUT\",\n    \"KEYGEN\",\n    \"LINK\",\n    \"META\",\n    \"PARAM\",\n    \"SOURCE\",\n    \"TRACK\",\n    \"WBR\"\n  ].includes(n.tagName);\n}\n(function(n) {\n  Object.defineProperty(n, \"__esModule\", { value: !0 }), n.isSingleTag = void 0;\n  var e = Vt;\n  Object.defineProperty(n, \"isSingleTag\", { enumerable: !0, get: function() {\n    return e.isSingleTag;\n  } });\n})(Ge);\nObject.defineProperty(Kt, \"__esModule\", { value: !0 });\nKt.getDeepestNode = En;\nvar pr = ue, fr = Ze, gr = Ge;\nfunction En(n, e) {\n  e === void 0 && (e = !1);\n  var t = e ? \"lastChild\" : \"firstChild\", o = e ? \"previousSibling\" : \"nextSibling\";\n  if (n.nodeType === Node.ELEMENT_NODE && n[t]) {\n    var i = n[t];\n    if ((0, gr.isSingleTag)(i) && !(0, pr.isNativeInput)(i) && !(0, fr.isLineBreakTag)(i))\n      if (i[o])\n        i = i[o];\n      else if (i.parentNode !== null && i.parentNode[o])\n        i = i.parentNode[o];\n      else\n        return i.parentNode;\n    return En(i, e);\n  }\n  return n;\n}\n(function(n) {\n  Object.defineProperty(n, \"__esModule\", { value: !0 }), n.getDeepestNode = void 0;\n  var e = Kt;\n  Object.defineProperty(n, \"getDeepestNode\", { enumerable: !0, get: function() {\n    return e.getDeepestNode;\n  } });\n})(wn);\nvar xn = {}, qt = {}, Me = Ce && Ce.__spreadArray || function(n, e, t) {\n  if (t || arguments.length === 2)\n    for (var o = 0, i = e.length, s; o < i; o++)\n      (s || !(o in e)) && (s || (s = Array.prototype.slice.call(e, 0, o)), s[o] = e[o]);\n  return n.concat(s || Array.prototype.slice.call(e));\n};\nObject.defineProperty(qt, \"__esModule\", { value: !0 });\nqt.findAllInputs = yr;\nvar mr = Ve, br = Wt, vr = It, kr = ue;\nfunction yr(n) {\n  return Array.from(n.querySelectorAll((0, vr.allInputsSelector)())).reduce(function(e, t) {\n    return (0, kr.isNativeInput)(t) || (0, mr.containsOnlyInlineElements)(t) ? Me(Me([], e, !0), [t], !1) : Me(Me([], e, !0), (0, br.getDeepestBlockElements)(t), !0);\n  }, []);\n}\n(function(n) {\n  Object.defineProperty(n, \"__esModule\", { value: !0 }), n.findAllInputs = void 0;\n  var e = qt;\n  Object.defineProperty(n, \"findAllInputs\", { enumerable: !0, get: function() {\n    return e.findAllInputs;\n  } });\n})(xn);\nvar Bn = {}, Zt = {};\nObject.defineProperty(Zt, \"__esModule\", { value: !0 });\nZt.isCollapsedWhitespaces = wr;\nfunction wr(n) {\n  return !/[^\\t\\n\\r ]/.test(n);\n}\n(function(n) {\n  Object.defineProperty(n, \"__esModule\", { value: !0 }), n.isCollapsedWhitespaces = void 0;\n  var e = Zt;\n  Object.defineProperty(n, \"isCollapsedWhitespaces\", { enumerable: !0, get: function() {\n    return e.isCollapsedWhitespaces;\n  } });\n})(Bn);\nvar Gt = {}, Qt = {};\nObject.defineProperty(Qt, \"__esModule\", { value: !0 });\nQt.isElement = xr;\nvar Er = Ht;\nfunction xr(n) {\n  return (0, Er.isNumber)(n) ? !1 : !!n && !!n.nodeType && n.nodeType === Node.ELEMENT_NODE;\n}\n(function(n) {\n  Object.defineProperty(n, \"__esModule\", { value: !0 }), n.isElement = void 0;\n  var e = Qt;\n  Object.defineProperty(n, \"isElement\", { enumerable: !0, get: function() {\n    return e.isElement;\n  } });\n})(Gt);\nvar Cn = {}, Jt = {}, eo = {}, to = {};\nObject.defineProperty(to, \"__esModule\", { value: !0 });\nto.isLeaf = Br;\nfunction Br(n) {\n  return n === null ? !1 : n.childNodes.length === 0;\n}\n(function(n) {\n  Object.defineProperty(n, \"__esModule\", { value: !0 }), n.isLeaf = void 0;\n  var e = to;\n  Object.defineProperty(n, \"isLeaf\", { enumerable: !0, get: function() {\n    return e.isLeaf;\n  } });\n})(eo);\nvar oo = {}, no = {};\nObject.defineProperty(no, \"__esModule\", { value: !0 });\nno.isNodeEmpty = Or;\nvar Cr = Ze, Tr = Gt, Sr = ue, Ir = Ge;\nfunction Or(n, e) {\n  var t = \"\";\n  return (0, Ir.isSingleTag)(n) && !(0, Cr.isLineBreakTag)(n) ? !1 : ((0, Tr.isElement)(n) && (0, Sr.isNativeInput)(n) ? t = n.value : n.textContent !== null && (t = n.textContent.replace(\"​\", \"\")), e !== void 0 && (t = t.replace(new RegExp(e, \"g\"), \"\")), t.trim().length === 0);\n}\n(function(n) {\n  Object.defineProperty(n, \"__esModule\", { value: !0 }), n.isNodeEmpty = void 0;\n  var e = no;\n  Object.defineProperty(n, \"isNodeEmpty\", { enumerable: !0, get: function() {\n    return e.isNodeEmpty;\n  } });\n})(oo);\nObject.defineProperty(Jt, \"__esModule\", { value: !0 });\nJt.isEmpty = Ar;\nvar _r = eo, Mr = oo;\nfunction Ar(n, e) {\n  n.normalize();\n  for (var t = [n]; t.length > 0; ) {\n    var o = t.shift();\n    if (o) {\n      if (n = o, (0, _r.isLeaf)(n) && !(0, Mr.isNodeEmpty)(n, e))\n        return !1;\n      t.push.apply(t, Array.from(n.childNodes));\n    }\n  }\n  return !0;\n}\n(function(n) {\n  Object.defineProperty(n, \"__esModule\", { value: !0 }), n.isEmpty = void 0;\n  var e = Jt;\n  Object.defineProperty(n, \"isEmpty\", { enumerable: !0, get: function() {\n    return e.isEmpty;\n  } });\n})(Cn);\nvar Tn = {}, io = {};\nObject.defineProperty(io, \"__esModule\", { value: !0 });\nio.isFragment = Pr;\nvar Lr = Ht;\nfunction Pr(n) {\n  return (0, Lr.isNumber)(n) ? !1 : !!n && !!n.nodeType && n.nodeType === Node.DOCUMENT_FRAGMENT_NODE;\n}\n(function(n) {\n  Object.defineProperty(n, \"__esModule\", { value: !0 }), n.isFragment = void 0;\n  var e = io;\n  Object.defineProperty(n, \"isFragment\", { enumerable: !0, get: function() {\n    return e.isFragment;\n  } });\n})(Tn);\nvar Sn = {}, so = {};\nObject.defineProperty(so, \"__esModule\", { value: !0 });\nso.isHTMLString = Rr;\nvar Nr = qe;\nfunction Rr(n) {\n  var e = (0, Nr.make)(\"div\");\n  return e.innerHTML = n, e.childElementCount > 0;\n}\n(function(n) {\n  Object.defineProperty(n, \"__esModule\", { value: !0 }), n.isHTMLString = void 0;\n  var e = so;\n  Object.defineProperty(n, \"isHTMLString\", { enumerable: !0, get: function() {\n    return e.isHTMLString;\n  } });\n})(Sn);\nvar In = {}, ro = {};\nObject.defineProperty(ro, \"__esModule\", { value: !0 });\nro.offset = Dr;\nfunction Dr(n) {\n  var e = n.getBoundingClientRect(), t = window.pageXOffset || document.documentElement.scrollLeft, o = window.pageYOffset || document.documentElement.scrollTop, i = e.top + o, s = e.left + t;\n  return {\n    top: i,\n    left: s,\n    bottom: i + e.height,\n    right: s + e.width\n  };\n}\n(function(n) {\n  Object.defineProperty(n, \"__esModule\", { value: !0 }), n.offset = void 0;\n  var e = ro;\n  Object.defineProperty(n, \"offset\", { enumerable: !0, get: function() {\n    return e.offset;\n  } });\n})(In);\nvar On = {}, ao = {};\nObject.defineProperty(ao, \"__esModule\", { value: !0 });\nao.prepend = Fr;\nfunction Fr(n, e) {\n  Array.isArray(e) ? (e = e.reverse(), e.forEach(function(t) {\n    return n.prepend(t);\n  })) : n.prepend(e);\n}\n(function(n) {\n  Object.defineProperty(n, \"__esModule\", { value: !0 }), n.prepend = void 0;\n  var e = ao;\n  Object.defineProperty(n, \"prepend\", { enumerable: !0, get: function() {\n    return e.prepend;\n  } });\n})(On);\n(function(n) {\n  Object.defineProperty(n, \"__esModule\", { value: !0 }), n.prepend = n.offset = n.make = n.isLineBreakTag = n.isSingleTag = n.isNodeEmpty = n.isLeaf = n.isHTMLString = n.isFragment = n.isEmpty = n.isElement = n.isContentEditable = n.isCollapsedWhitespaces = n.findAllInputs = n.isNativeInput = n.allInputsSelector = n.getDeepestNode = n.getDeepestBlockElements = n.getContentLength = n.fragmentToString = n.containsOnlyInlineElements = n.canSetCaret = n.calculateBaseline = n.blockElements = n.append = void 0;\n  var e = It;\n  Object.defineProperty(n, \"allInputsSelector\", { enumerable: !0, get: function() {\n    return e.allInputsSelector;\n  } });\n  var t = ue;\n  Object.defineProperty(n, \"isNativeInput\", { enumerable: !0, get: function() {\n    return t.isNativeInput;\n  } });\n  var o = pn;\n  Object.defineProperty(n, \"append\", { enumerable: !0, get: function() {\n    return o.append;\n  } });\n  var i = At;\n  Object.defineProperty(n, \"blockElements\", { enumerable: !0, get: function() {\n    return i.blockElements;\n  } });\n  var s = fn;\n  Object.defineProperty(n, \"calculateBaseline\", { enumerable: !0, get: function() {\n    return s.calculateBaseline;\n  } });\n  var r = gn;\n  Object.defineProperty(n, \"canSetCaret\", { enumerable: !0, get: function() {\n    return r.canSetCaret;\n  } });\n  var a = Ve;\n  Object.defineProperty(n, \"containsOnlyInlineElements\", { enumerable: !0, get: function() {\n    return a.containsOnlyInlineElements;\n  } });\n  var l = vn;\n  Object.defineProperty(n, \"fragmentToString\", { enumerable: !0, get: function() {\n    return l.fragmentToString;\n  } });\n  var c = kn;\n  Object.defineProperty(n, \"getContentLength\", { enumerable: !0, get: function() {\n    return c.getContentLength;\n  } });\n  var u = Wt;\n  Object.defineProperty(n, \"getDeepestBlockElements\", { enumerable: !0, get: function() {\n    return u.getDeepestBlockElements;\n  } });\n  var h = wn;\n  Object.defineProperty(n, \"getDeepestNode\", { enumerable: !0, get: function() {\n    return h.getDeepestNode;\n  } });\n  var p = xn;\n  Object.defineProperty(n, \"findAllInputs\", { enumerable: !0, get: function() {\n    return p.findAllInputs;\n  } });\n  var g = Bn;\n  Object.defineProperty(n, \"isCollapsedWhitespaces\", { enumerable: !0, get: function() {\n    return g.isCollapsedWhitespaces;\n  } });\n  var f = Rt;\n  Object.defineProperty(n, \"isContentEditable\", { enumerable: !0, get: function() {\n    return f.isContentEditable;\n  } });\n  var v = Gt;\n  Object.defineProperty(n, \"isElement\", { enumerable: !0, get: function() {\n    return v.isElement;\n  } });\n  var O = Cn;\n  Object.defineProperty(n, \"isEmpty\", { enumerable: !0, get: function() {\n    return O.isEmpty;\n  } });\n  var T = Tn;\n  Object.defineProperty(n, \"isFragment\", { enumerable: !0, get: function() {\n    return T.isFragment;\n  } });\n  var M = Sn;\n  Object.defineProperty(n, \"isHTMLString\", { enumerable: !0, get: function() {\n    return M.isHTMLString;\n  } });\n  var q = eo;\n  Object.defineProperty(n, \"isLeaf\", { enumerable: !0, get: function() {\n    return q.isLeaf;\n  } });\n  var F = oo;\n  Object.defineProperty(n, \"isNodeEmpty\", { enumerable: !0, get: function() {\n    return F.isNodeEmpty;\n  } });\n  var H = Ze;\n  Object.defineProperty(n, \"isLineBreakTag\", { enumerable: !0, get: function() {\n    return H.isLineBreakTag;\n  } });\n  var Q = Ge;\n  Object.defineProperty(n, \"isSingleTag\", { enumerable: !0, get: function() {\n    return Q.isSingleTag;\n  } });\n  var ie = qe;\n  Object.defineProperty(n, \"make\", { enumerable: !0, get: function() {\n    return ie.make;\n  } });\n  var k = In;\n  Object.defineProperty(n, \"offset\", { enumerable: !0, get: function() {\n    return k.offset;\n  } });\n  var m = On;\n  Object.defineProperty(n, \"prepend\", { enumerable: !0, get: function() {\n    return m.prepend;\n  } });\n})(de);\nvar Qe = {};\nObject.defineProperty(Qe, \"__esModule\", { value: !0 });\nQe.getContenteditableSlice = Hr;\nvar jr = de;\nfunction Hr(n, e, t, o, i) {\n  var s;\n  i === void 0 && (i = !1);\n  var r = document.createRange();\n  if (o === \"left\" ? (r.setStart(n, 0), r.setEnd(e, t)) : (r.setStart(e, t), r.setEnd(n, n.childNodes.length)), i === !0) {\n    var a = r.extractContents();\n    return (0, jr.fragmentToString)(a);\n  }\n  var l = r.cloneContents(), c = document.createElement(\"div\");\n  c.appendChild(l);\n  var u = (s = c.textContent) !== null && s !== void 0 ? s : \"\";\n  return u;\n}\nObject.defineProperty(Xe, \"__esModule\", { value: !0 });\nXe.checkContenteditableSliceForEmptiness = Ur;\nvar $r = de, zr = Qe;\nfunction Ur(n, e, t, o) {\n  var i = (0, zr.getContenteditableSlice)(n, e, t, o);\n  return (0, $r.isCollapsedWhitespaces)(i);\n}\n(function(n) {\n  Object.defineProperty(n, \"__esModule\", { value: !0 }), n.checkContenteditableSliceForEmptiness = void 0;\n  var e = Xe;\n  Object.defineProperty(n, \"checkContenteditableSliceForEmptiness\", { enumerable: !0, get: function() {\n    return e.checkContenteditableSliceForEmptiness;\n  } });\n})(St);\nvar _n = {};\n(function(n) {\n  Object.defineProperty(n, \"__esModule\", { value: !0 }), n.getContenteditableSlice = void 0;\n  var e = Qe;\n  Object.defineProperty(n, \"getContenteditableSlice\", { enumerable: !0, get: function() {\n    return e.getContenteditableSlice;\n  } });\n})(_n);\nvar Mn = {}, lo = {};\nObject.defineProperty(lo, \"__esModule\", { value: !0 });\nlo.focus = Yr;\nvar Wr = de;\nfunction Yr(n, e) {\n  var t, o;\n  if (e === void 0 && (e = !0), (0, Wr.isNativeInput)(n)) {\n    n.focus();\n    var i = e ? 0 : n.value.length;\n    n.setSelectionRange(i, i);\n  } else {\n    var s = document.createRange(), r = window.getSelection();\n    if (!r)\n      return;\n    var a = function(p) {\n      var g = document.createTextNode(\"\");\n      p.appendChild(g), s.setStart(g, 0), s.setEnd(g, 0);\n    }, l = function(p) {\n      return p != null;\n    }, c = n.childNodes, u = e ? c[0] : c[c.length - 1];\n    if (l(u)) {\n      for (; l(u) && u.nodeType !== Node.TEXT_NODE; )\n        u = e ? u.firstChild : u.lastChild;\n      if (l(u) && u.nodeType === Node.TEXT_NODE) {\n        var h = (o = (t = u.textContent) === null || t === void 0 ? void 0 : t.length) !== null && o !== void 0 ? o : 0, i = e ? 0 : h;\n        s.setStart(u, i), s.setEnd(u, i);\n      } else\n        a(n);\n    } else\n      a(n);\n    r.removeAllRanges(), r.addRange(s);\n  }\n}\n(function(n) {\n  Object.defineProperty(n, \"__esModule\", { value: !0 }), n.focus = void 0;\n  var e = lo;\n  Object.defineProperty(n, \"focus\", { enumerable: !0, get: function() {\n    return e.focus;\n  } });\n})(Mn);\nvar co = {}, Je = {};\nObject.defineProperty(Je, \"__esModule\", { value: !0 });\nJe.getCaretNodeAndOffset = Kr;\nfunction Kr() {\n  var n = window.getSelection();\n  if (n === null)\n    return [null, 0];\n  var e = n.focusNode, t = n.focusOffset;\n  return e === null ? [null, 0] : (e.nodeType !== Node.TEXT_NODE && e.childNodes.length > 0 && (e.childNodes[t] !== void 0 ? (e = e.childNodes[t], t = 0) : (e = e.childNodes[t - 1], e.textContent !== null && (t = e.textContent.length))), [e, t]);\n}\n(function(n) {\n  Object.defineProperty(n, \"__esModule\", { value: !0 }), n.getCaretNodeAndOffset = void 0;\n  var e = Je;\n  Object.defineProperty(n, \"getCaretNodeAndOffset\", { enumerable: !0, get: function() {\n    return e.getCaretNodeAndOffset;\n  } });\n})(co);\nvar An = {}, et = {};\nObject.defineProperty(et, \"__esModule\", { value: !0 });\net.getRange = Xr;\nfunction Xr() {\n  var n = window.getSelection();\n  return n && n.rangeCount ? n.getRangeAt(0) : null;\n}\n(function(n) {\n  Object.defineProperty(n, \"__esModule\", { value: !0 }), n.getRange = void 0;\n  var e = et;\n  Object.defineProperty(n, \"getRange\", { enumerable: !0, get: function() {\n    return e.getRange;\n  } });\n})(An);\nvar Ln = {}, uo = {};\nObject.defineProperty(uo, \"__esModule\", { value: !0 });\nuo.isCaretAtEndOfInput = Zr;\nvar Oo = de, Vr = co, qr = St;\nfunction Zr(n) {\n  var e = (0, Oo.getDeepestNode)(n, !0);\n  if (e === null)\n    return !0;\n  if ((0, Oo.isNativeInput)(e))\n    return e.selectionEnd === e.value.length;\n  var t = (0, Vr.getCaretNodeAndOffset)(), o = t[0], i = t[1];\n  return o === null ? !1 : (0, qr.checkContenteditableSliceForEmptiness)(n, o, i, \"right\");\n}\n(function(n) {\n  Object.defineProperty(n, \"__esModule\", { value: !0 }), n.isCaretAtEndOfInput = void 0;\n  var e = uo;\n  Object.defineProperty(n, \"isCaretAtEndOfInput\", { enumerable: !0, get: function() {\n    return e.isCaretAtEndOfInput;\n  } });\n})(Ln);\nvar Pn = {}, ho = {};\nObject.defineProperty(ho, \"__esModule\", { value: !0 });\nho.isCaretAtStartOfInput = Jr;\nvar Ae = de, Gr = Je, Qr = Xe;\nfunction Jr(n) {\n  var e = (0, Ae.getDeepestNode)(n);\n  if (e === null || (0, Ae.isEmpty)(n))\n    return !0;\n  if ((0, Ae.isNativeInput)(e))\n    return e.selectionEnd === 0;\n  if ((0, Ae.isEmpty)(n))\n    return !0;\n  var t = (0, Gr.getCaretNodeAndOffset)(), o = t[0], i = t[1];\n  return o === null ? !1 : (0, Qr.checkContenteditableSliceForEmptiness)(n, o, i, \"left\");\n}\n(function(n) {\n  Object.defineProperty(n, \"__esModule\", { value: !0 }), n.isCaretAtStartOfInput = void 0;\n  var e = ho;\n  Object.defineProperty(n, \"isCaretAtStartOfInput\", { enumerable: !0, get: function() {\n    return e.isCaretAtStartOfInput;\n  } });\n})(Pn);\nvar Nn = {}, po = {};\nObject.defineProperty(po, \"__esModule\", { value: !0 });\npo.save = oa;\nvar ea = de, ta = et;\nfunction oa() {\n  var n = (0, ta.getRange)(), e = (0, ea.make)(\"span\");\n  if (e.id = \"cursor\", e.hidden = !0, !!n)\n    return n.insertNode(e), function() {\n      var o = window.getSelection();\n      o && (n.setStartAfter(e), n.setEndAfter(e), o.removeAllRanges(), o.addRange(n), setTimeout(function() {\n        e.remove();\n      }, 150));\n    };\n}\n(function(n) {\n  Object.defineProperty(n, \"__esModule\", { value: !0 }), n.save = void 0;\n  var e = po;\n  Object.defineProperty(n, \"save\", { enumerable: !0, get: function() {\n    return e.save;\n  } });\n})(Nn);\n(function(n) {\n  Object.defineProperty(n, \"__esModule\", { value: !0 }), n.save = n.isCaretAtStartOfInput = n.isCaretAtEndOfInput = n.getRange = n.getCaretNodeAndOffset = n.focus = n.getContenteditableSlice = n.checkContenteditableSliceForEmptiness = void 0;\n  var e = St;\n  Object.defineProperty(n, \"checkContenteditableSliceForEmptiness\", { enumerable: !0, get: function() {\n    return e.checkContenteditableSliceForEmptiness;\n  } });\n  var t = _n;\n  Object.defineProperty(n, \"getContenteditableSlice\", { enumerable: !0, get: function() {\n    return t.getContenteditableSlice;\n  } });\n  var o = Mn;\n  Object.defineProperty(n, \"focus\", { enumerable: !0, get: function() {\n    return o.focus;\n  } });\n  var i = co;\n  Object.defineProperty(n, \"getCaretNodeAndOffset\", { enumerable: !0, get: function() {\n    return i.getCaretNodeAndOffset;\n  } });\n  var s = An;\n  Object.defineProperty(n, \"getRange\", { enumerable: !0, get: function() {\n    return s.getRange;\n  } });\n  var r = Ln;\n  Object.defineProperty(n, \"isCaretAtEndOfInput\", { enumerable: !0, get: function() {\n    return r.isCaretAtEndOfInput;\n  } });\n  var a = Pn;\n  Object.defineProperty(n, \"isCaretAtStartOfInput\", { enumerable: !0, get: function() {\n    return a.isCaretAtStartOfInput;\n  } });\n  var l = Nn;\n  Object.defineProperty(n, \"save\", { enumerable: !0, get: function() {\n    return l.save;\n  } });\n})(hn);\nclass na extends E {\n  /**\n   * All keydowns on Block\n   *\n   * @param {KeyboardEvent} event - keydown\n   */\n  keydown(e) {\n    switch (this.beforeKeydownProcessing(e), e.keyCode) {\n      case y.BACKSPACE:\n        this.backspace(e);\n        break;\n      case y.DELETE:\n        this.delete(e);\n        break;\n      case y.ENTER:\n        this.enter(e);\n        break;\n      case y.DOWN:\n      case y.RIGHT:\n        this.arrowRightAndDown(e);\n        break;\n      case y.UP:\n      case y.LEFT:\n        this.arrowLeftAndUp(e);\n        break;\n      case y.TAB:\n        this.tabPressed(e);\n        break;\n    }\n    e.key === \"/\" && !e.ctrlKey && !e.metaKey && this.slashPressed(e), e.code === \"Slash\" && (e.ctrlKey || e.metaKey) && (e.preventDefault(), this.commandSlashPressed());\n  }\n  /**\n   * Fires on keydown before event processing\n   *\n   * @param {KeyboardEvent} event - keydown\n   */\n  beforeKeydownProcessing(e) {\n    this.needToolbarClosing(e) && Po(e.keyCode) && (this.Editor.Toolbar.close(), e.ctrlKey || e.metaKey || e.altKey || e.shiftKey || this.Editor.BlockSelection.clearSelection(e));\n  }\n  /**\n   * Key up on Block:\n   * - shows Inline Toolbar if something selected\n   * - shows conversion toolbar with 85% of block selection\n   *\n   * @param {KeyboardEvent} event - keyup event\n   */\n  keyup(e) {\n    e.shiftKey || this.Editor.UI.checkEmptiness();\n  }\n  /**\n   * Add drop target styles\n   *\n   * @param {DragEvent} event - drag over event\n   */\n  dragOver(e) {\n    const t = this.Editor.BlockManager.getBlockByChildNode(e.target);\n    t.dropTarget = !0;\n  }\n  /**\n   * Remove drop target style\n   *\n   * @param {DragEvent} event - drag leave event\n   */\n  dragLeave(e) {\n    const t = this.Editor.BlockManager.getBlockByChildNode(e.target);\n    t.dropTarget = !1;\n  }\n  /**\n   * Copying selected blocks\n   * Before putting to the clipboard we sanitize all blocks and then copy to the clipboard\n   *\n   * @param {ClipboardEvent} event - clipboard event\n   */\n  handleCommandC(e) {\n    const { BlockSelection: t } = this.Editor;\n    t.anyBlockSelected && t.copySelectedBlocks(e);\n  }\n  /**\n   * Copy and Delete selected Blocks\n   *\n   * @param {ClipboardEvent} event - clipboard event\n   */\n  handleCommandX(e) {\n    const { BlockSelection: t, BlockManager: o, Caret: i } = this.Editor;\n    t.anyBlockSelected && t.copySelectedBlocks(e).then(() => {\n      const s = o.removeSelectedBlocks(), r = o.insertDefaultBlockAtIndex(s, !0);\n      i.setToBlock(r, i.positions.START), t.clearSelection(e);\n    });\n  }\n  /**\n   * Tab pressed inside a Block.\n   *\n   * @param {KeyboardEvent} event - keydown\n   */\n  tabPressed(e) {\n    const { InlineToolbar: t, Caret: o } = this.Editor;\n    if (t.opened)\n      return;\n    (e.shiftKey ? o.navigatePrevious(!0) : o.navigateNext(!0)) && e.preventDefault();\n  }\n  /**\n   * '/' + 'command' keydown inside a Block\n   */\n  commandSlashPressed() {\n    this.Editor.BlockSelection.selectedBlocks.length > 1 || this.activateBlockSettings();\n  }\n  /**\n   * '/' keydown inside a Block\n   *\n   * @param event - keydown\n   */\n  slashPressed(e) {\n    this.Editor.BlockManager.currentBlock.isEmpty && (e.preventDefault(), this.Editor.Caret.insertContentAtCaretPosition(\"/\"), this.activateToolbox());\n  }\n  /**\n   * ENTER pressed on block\n   *\n   * @param {KeyboardEvent} event - keydown\n   */\n  enter(e) {\n    const { BlockManager: t, UI: o } = this.Editor, i = t.currentBlock;\n    if (i === void 0 || i.tool.isLineBreaksEnabled || o.someToolbarOpened && o.someFlipperButtonFocused || e.shiftKey && !pt)\n      return;\n    let s = i;\n    i.currentInput !== void 0 && Ne(i.currentInput) && !i.hasMedia ? this.Editor.BlockManager.insertDefaultBlockAtIndex(this.Editor.BlockManager.currentBlockIndex) : i.currentInput && Re(i.currentInput) ? s = this.Editor.BlockManager.insertDefaultBlockAtIndex(this.Editor.BlockManager.currentBlockIndex + 1) : s = this.Editor.BlockManager.split(), this.Editor.Caret.setToBlock(s), this.Editor.Toolbar.moveAndOpen(s), e.preventDefault();\n  }\n  /**\n   * Handle backspace keydown on Block\n   *\n   * @param {KeyboardEvent} event - keydown\n   */\n  backspace(e) {\n    const { BlockManager: t, Caret: o } = this.Editor, { currentBlock: i, previousBlock: s } = t;\n    if (i === void 0 || !b.isCollapsed || !i.currentInput || !Ne(i.currentInput))\n      return;\n    if (e.preventDefault(), this.Editor.Toolbar.close(), !(i.currentInput === i.firstInput)) {\n      o.navigatePrevious();\n      return;\n    }\n    if (s === null)\n      return;\n    if (s.isEmpty) {\n      t.removeBlock(s);\n      return;\n    }\n    if (i.isEmpty) {\n      t.removeBlock(i);\n      const l = t.currentBlock;\n      o.setToBlock(l, o.positions.END);\n      return;\n    }\n    xo(s, i) ? this.mergeBlocks(s, i) : o.setToBlock(s, o.positions.END);\n  }\n  /**\n   * Handles delete keydown on Block\n   * Removes char after the caret.\n   * If caret is at the end of the block, merge next block with current\n   *\n   * @param {KeyboardEvent} event - keydown\n   */\n  delete(e) {\n    const { BlockManager: t, Caret: o } = this.Editor, { currentBlock: i, nextBlock: s } = t;\n    if (!b.isCollapsed || !Re(i.currentInput))\n      return;\n    if (e.preventDefault(), this.Editor.Toolbar.close(), !(i.currentInput === i.lastInput)) {\n      o.navigateNext();\n      return;\n    }\n    if (s === null)\n      return;\n    if (s.isEmpty) {\n      t.removeBlock(s);\n      return;\n    }\n    if (i.isEmpty) {\n      t.removeBlock(i), o.setToBlock(s, o.positions.START);\n      return;\n    }\n    xo(i, s) ? this.mergeBlocks(i, s) : o.setToBlock(s, o.positions.START);\n  }\n  /**\n   * Merge passed Blocks\n   *\n   * @param targetBlock - to which Block we want to merge\n   * @param blockToMerge - what Block we want to merge\n   */\n  mergeBlocks(e, t) {\n    const { BlockManager: o, Toolbar: i } = this.Editor;\n    e.lastInput !== void 0 && (hn.focus(e.lastInput, !1), o.mergeBlocks(e, t).then(() => {\n      i.close();\n    }));\n  }\n  /**\n   * Handle right and down keyboard keys\n   *\n   * @param {KeyboardEvent} event - keyboard event\n   */\n  arrowRightAndDown(e) {\n    const t = ce.usedKeys.includes(e.keyCode) && (!e.shiftKey || e.keyCode === y.TAB);\n    if (this.Editor.UI.someToolbarOpened && t)\n      return;\n    this.Editor.Toolbar.close();\n    const { currentBlock: o } = this.Editor.BlockManager, s = ((o == null ? void 0 : o.currentInput) !== void 0 ? Re(o.currentInput) : void 0) || this.Editor.BlockSelection.anyBlockSelected;\n    if (e.shiftKey && e.keyCode === y.DOWN && s) {\n      this.Editor.CrossBlockSelection.toggleBlockSelectedState();\n      return;\n    }\n    if (e.keyCode === y.DOWN || e.keyCode === y.RIGHT && !this.isRtl ? this.Editor.Caret.navigateNext() : this.Editor.Caret.navigatePrevious()) {\n      e.preventDefault();\n      return;\n    }\n    Fe(() => {\n      this.Editor.BlockManager.currentBlock && this.Editor.BlockManager.currentBlock.updateCurrentInput();\n    }, 20)(), this.Editor.BlockSelection.clearSelection(e);\n  }\n  /**\n   * Handle left and up keyboard keys\n   *\n   * @param {KeyboardEvent} event - keyboard event\n   */\n  arrowLeftAndUp(e) {\n    if (this.Editor.UI.someToolbarOpened) {\n      if (ce.usedKeys.includes(e.keyCode) && (!e.shiftKey || e.keyCode === y.TAB))\n        return;\n      this.Editor.UI.closeAllToolbars();\n    }\n    this.Editor.Toolbar.close();\n    const { currentBlock: t } = this.Editor.BlockManager, i = ((t == null ? void 0 : t.currentInput) !== void 0 ? Ne(t.currentInput) : void 0) || this.Editor.BlockSelection.anyBlockSelected;\n    if (e.shiftKey && e.keyCode === y.UP && i) {\n      this.Editor.CrossBlockSelection.toggleBlockSelectedState(!1);\n      return;\n    }\n    if (e.keyCode === y.UP || e.keyCode === y.LEFT && !this.isRtl ? this.Editor.Caret.navigatePrevious() : this.Editor.Caret.navigateNext()) {\n      e.preventDefault();\n      return;\n    }\n    Fe(() => {\n      this.Editor.BlockManager.currentBlock && this.Editor.BlockManager.currentBlock.updateCurrentInput();\n    }, 20)(), this.Editor.BlockSelection.clearSelection(e);\n  }\n  /**\n   * Cases when we need to close Toolbar\n   *\n   * @param {KeyboardEvent} event - keyboard event\n   */\n  needToolbarClosing(e) {\n    const t = e.keyCode === y.ENTER && this.Editor.Toolbar.toolbox.opened, o = e.keyCode === y.ENTER && this.Editor.BlockSettings.opened, i = e.keyCode === y.ENTER && this.Editor.InlineToolbar.opened, s = e.keyCode === y.TAB;\n    return !(e.shiftKey || s || t || o || i);\n  }\n  /**\n   * If Toolbox is not open, then just open it and show plus button\n   */\n  activateToolbox() {\n    this.Editor.Toolbar.opened || this.Editor.Toolbar.moveAndOpen(), this.Editor.Toolbar.toolbox.open();\n  }\n  /**\n   * Open Toolbar and show BlockSettings before flipping Tools\n   */\n  activateBlockSettings() {\n    this.Editor.Toolbar.opened || this.Editor.Toolbar.moveAndOpen(), this.Editor.BlockSettings.opened || this.Editor.BlockSettings.open();\n  }\n}\nclass ct {\n  /**\n   * @class\n   * @param {HTMLElement} workingArea — editor`s working node\n   */\n  constructor(e) {\n    this.blocks = [], this.workingArea = e;\n  }\n  /**\n   * Get length of Block instances array\n   *\n   * @returns {number}\n   */\n  get length() {\n    return this.blocks.length;\n  }\n  /**\n   * Get Block instances array\n   *\n   * @returns {Block[]}\n   */\n  get array() {\n    return this.blocks;\n  }\n  /**\n   * Get blocks html elements array\n   *\n   * @returns {HTMLElement[]}\n   */\n  get nodes() {\n    return No(this.workingArea.children);\n  }\n  /**\n   * Proxy trap to implement array-like setter\n   *\n   * @example\n   * blocks[0] = new Block(...)\n   * @param {Blocks} instance — Blocks instance\n   * @param {PropertyKey} property — block index or any Blocks class property key to set\n   * @param {Block} value — value to set\n   * @returns {boolean}\n   */\n  static set(e, t, o) {\n    return isNaN(Number(t)) ? (Reflect.set(e, t, o), !0) : (e.insert(+t, o), !0);\n  }\n  /**\n   * Proxy trap to implement array-like getter\n   *\n   * @param {Blocks} instance — Blocks instance\n   * @param {PropertyKey} property — Blocks class property key\n   * @returns {Block|*}\n   */\n  static get(e, t) {\n    return isNaN(Number(t)) ? Reflect.get(e, t) : e.get(+t);\n  }\n  /**\n   * Push new Block to the blocks array and append it to working area\n   *\n   * @param {Block} block - Block to add\n   */\n  push(e) {\n    this.blocks.push(e), this.insertToDOM(e);\n  }\n  /**\n   * Swaps blocks with indexes first and second\n   *\n   * @param {number} first - first block index\n   * @param {number} second - second block index\n   * @deprecated — use 'move' instead\n   */\n  swap(e, t) {\n    const o = this.blocks[t];\n    d.swap(this.blocks[e].holder, o.holder), this.blocks[t] = this.blocks[e], this.blocks[e] = o;\n  }\n  /**\n   * Move a block from one to another index\n   *\n   * @param {number} toIndex - new index of the block\n   * @param {number} fromIndex - block to move\n   */\n  move(e, t) {\n    const o = this.blocks.splice(t, 1)[0], i = e - 1, s = Math.max(0, i), r = this.blocks[s];\n    e > 0 ? this.insertToDOM(o, \"afterend\", r) : this.insertToDOM(o, \"beforebegin\", r), this.blocks.splice(e, 0, o);\n    const a = this.composeBlockEvent(\"move\", {\n      fromIndex: t,\n      toIndex: e\n    });\n    o.call(ee.MOVED, a);\n  }\n  /**\n   * Insert new Block at passed index\n   *\n   * @param {number} index — index to insert Block\n   * @param {Block} block — Block to insert\n   * @param {boolean} replace — it true, replace block on given index\n   */\n  insert(e, t, o = !1) {\n    if (!this.length) {\n      this.push(t);\n      return;\n    }\n    e > this.length && (e = this.length), o && (this.blocks[e].holder.remove(), this.blocks[e].call(ee.REMOVED));\n    const i = o ? 1 : 0;\n    if (this.blocks.splice(e, i, t), e > 0) {\n      const s = this.blocks[e - 1];\n      this.insertToDOM(t, \"afterend\", s);\n    } else {\n      const s = this.blocks[e + 1];\n      s ? this.insertToDOM(t, \"beforebegin\", s) : this.insertToDOM(t);\n    }\n  }\n  /**\n   * Replaces block under passed index with passed block\n   *\n   * @param index - index of existed block\n   * @param block - new block\n   */\n  replace(e, t) {\n    if (this.blocks[e] === void 0)\n      throw Error(\"Incorrect index\");\n    this.blocks[e].holder.replaceWith(t.holder), this.blocks[e] = t;\n  }\n  /**\n   * Inserts several blocks at once\n   *\n   * @param blocks - blocks to insert\n   * @param index - index to insert blocks at\n   */\n  insertMany(e, t) {\n    const o = new DocumentFragment();\n    for (const i of e)\n      o.appendChild(i.holder);\n    if (this.length > 0) {\n      if (t > 0) {\n        const i = Math.min(t - 1, this.length - 1);\n        this.blocks[i].holder.after(o);\n      } else\n        t === 0 && this.workingArea.prepend(o);\n      this.blocks.splice(t, 0, ...e);\n    } else\n      this.blocks.push(...e), this.workingArea.appendChild(o);\n    e.forEach((i) => i.call(ee.RENDERED));\n  }\n  /**\n   * Remove block\n   *\n   * @param {number} index - index of Block to remove\n   */\n  remove(e) {\n    isNaN(e) && (e = this.length - 1), this.blocks[e].holder.remove(), this.blocks[e].call(ee.REMOVED), this.blocks.splice(e, 1);\n  }\n  /**\n   * Remove all blocks\n   */\n  removeAll() {\n    this.workingArea.innerHTML = \"\", this.blocks.forEach((e) => e.call(ee.REMOVED)), this.blocks.length = 0;\n  }\n  /**\n   * Insert Block after passed target\n   *\n   * @todo decide if this method is necessary\n   * @param {Block} targetBlock — target after which Block should be inserted\n   * @param {Block} newBlock — Block to insert\n   */\n  insertAfter(e, t) {\n    const o = this.blocks.indexOf(e);\n    this.insert(o + 1, t);\n  }\n  /**\n   * Get Block by index\n   *\n   * @param {number} index — Block index\n   * @returns {Block}\n   */\n  get(e) {\n    return this.blocks[e];\n  }\n  /**\n   * Return index of passed Block\n   *\n   * @param {Block} block - Block to find\n   * @returns {number}\n   */\n  indexOf(e) {\n    return this.blocks.indexOf(e);\n  }\n  /**\n   * Insert new Block into DOM\n   *\n   * @param {Block} block - Block to insert\n   * @param {InsertPosition} position — insert position (if set, will use insertAdjacentElement)\n   * @param {Block} target — Block related to position\n   */\n  insertToDOM(e, t, o) {\n    t ? o.holder.insertAdjacentElement(t, e.holder) : this.workingArea.appendChild(e.holder), e.call(ee.RENDERED);\n  }\n  /**\n   * Composes Block event with passed type and details\n   *\n   * @param {string} type - event type\n   * @param {object} detail - event detail\n   */\n  composeBlockEvent(e, t) {\n    return new CustomEvent(e, {\n      detail: t\n    });\n  }\n}\nconst _o = \"block-removed\", Mo = \"block-added\", ia = \"block-moved\", Ao = \"block-changed\";\nclass sa {\n  constructor() {\n    this.completed = Promise.resolve();\n  }\n  /**\n   * Add new promise to queue\n   *\n   * @param operation - promise should be added to queue\n   */\n  add(e) {\n    return new Promise((t, o) => {\n      this.completed = this.completed.then(e).then(t).catch(o);\n    });\n  }\n}\nclass ra extends E {\n  constructor() {\n    super(...arguments), this._currentBlockIndex = -1, this._blocks = null;\n  }\n  /**\n   * Returns current Block index\n   *\n   * @returns {number}\n   */\n  get currentBlockIndex() {\n    return this._currentBlockIndex;\n  }\n  /**\n   * Set current Block index and fire Block lifecycle callbacks\n   *\n   * @param {number} newIndex - index of Block to set as current\n   */\n  set currentBlockIndex(e) {\n    this._currentBlockIndex = e;\n  }\n  /**\n   * returns first Block\n   *\n   * @returns {Block}\n   */\n  get firstBlock() {\n    return this._blocks[0];\n  }\n  /**\n   * returns last Block\n   *\n   * @returns {Block}\n   */\n  get lastBlock() {\n    return this._blocks[this._blocks.length - 1];\n  }\n  /**\n   * Get current Block instance\n   *\n   * @returns {Block}\n   */\n  get currentBlock() {\n    return this._blocks[this.currentBlockIndex];\n  }\n  /**\n   * Set passed Block as a current\n   *\n   * @param block - block to set as a current\n   */\n  set currentBlock(e) {\n    this.currentBlockIndex = this.getBlockIndex(e);\n  }\n  /**\n   * Returns next Block instance\n   *\n   * @returns {Block|null}\n   */\n  get nextBlock() {\n    return this.currentBlockIndex === this._blocks.length - 1 ? null : this._blocks[this.currentBlockIndex + 1];\n  }\n  /**\n   * Return first Block with inputs after current Block\n   *\n   * @returns {Block | undefined}\n   */\n  get nextContentfulBlock() {\n    return this.blocks.slice(this.currentBlockIndex + 1).find((t) => !!t.inputs.length);\n  }\n  /**\n   * Return first Block with inputs before current Block\n   *\n   * @returns {Block | undefined}\n   */\n  get previousContentfulBlock() {\n    return this.blocks.slice(0, this.currentBlockIndex).reverse().find((t) => !!t.inputs.length);\n  }\n  /**\n   * Returns previous Block instance\n   *\n   * @returns {Block|null}\n   */\n  get previousBlock() {\n    return this.currentBlockIndex === 0 ? null : this._blocks[this.currentBlockIndex - 1];\n  }\n  /**\n   * Get array of Block instances\n   *\n   * @returns {Block[]} {@link Blocks#array}\n   */\n  get blocks() {\n    return this._blocks.array;\n  }\n  /**\n   * Check if each Block is empty\n   *\n   * @returns {boolean}\n   */\n  get isEditorEmpty() {\n    return this.blocks.every((e) => e.isEmpty);\n  }\n  /**\n   * Should be called after Editor.UI preparation\n   * Define this._blocks property\n   */\n  prepare() {\n    const e = new ct(this.Editor.UI.nodes.redactor);\n    this._blocks = new Proxy(e, {\n      set: ct.set,\n      get: ct.get\n    }), this.listeners.on(\n      document,\n      \"copy\",\n      (t) => this.Editor.BlockEvents.handleCommandC(t)\n    );\n  }\n  /**\n   * Toggle read-only state\n   *\n   * If readOnly is true:\n   *  - Unbind event handlers from created Blocks\n   *\n   * if readOnly is false:\n   *  - Bind event handlers to all existing Blocks\n   *\n   * @param {boolean} readOnlyEnabled - \"read only\" state\n   */\n  toggleReadOnly(e) {\n    e ? this.disableModuleBindings() : this.enableModuleBindings();\n  }\n  /**\n   * Creates Block instance by tool name\n   *\n   * @param {object} options - block creation options\n   * @param {string} options.tool - tools passed in editor config {@link EditorConfig#tools}\n   * @param {string} [options.id] - unique id for this block\n   * @param {BlockToolData} [options.data] - constructor params\n   * @returns {Block}\n   */\n  composeBlock({\n    tool: e,\n    data: t = {},\n    id: o = void 0,\n    tunes: i = {}\n  }) {\n    const s = this.Editor.ReadOnly.isEnabled, r = this.Editor.Tools.blockTools.get(e), a = new R({\n      id: o,\n      data: t,\n      tool: r,\n      api: this.Editor.API,\n      readOnly: s,\n      tunesData: i\n    }, this.eventsDispatcher);\n    return s || window.requestIdleCallback(() => {\n      this.bindBlockEvents(a);\n    }, { timeout: 2e3 }), a;\n  }\n  /**\n   * Insert new block into _blocks\n   *\n   * @param {object} options - insert options\n   * @param {string} [options.id] - block's unique id\n   * @param {string} [options.tool] - plugin name, by default method inserts the default block type\n   * @param {object} [options.data] - plugin data\n   * @param {number} [options.index] - index where to insert new Block\n   * @param {boolean} [options.needToFocus] - flag shows if needed to update current Block index\n   * @param {boolean} [options.replace] - flag shows if block by passed index should be replaced with inserted one\n   * @returns {Block}\n   */\n  insert({\n    id: e = void 0,\n    tool: t = this.config.defaultBlock,\n    data: o = {},\n    index: i,\n    needToFocus: s = !0,\n    replace: r = !1,\n    tunes: a = {}\n  } = {}) {\n    let l = i;\n    l === void 0 && (l = this.currentBlockIndex + (r ? 0 : 1));\n    const c = this.composeBlock({\n      id: e,\n      tool: t,\n      data: o,\n      tunes: a\n    });\n    return r && this.blockDidMutated(_o, this.getBlockByIndex(l), {\n      index: l\n    }), this._blocks.insert(l, c, r), this.blockDidMutated(Mo, c, {\n      index: l\n    }), s ? this.currentBlockIndex = l : l <= this.currentBlockIndex && this.currentBlockIndex++, c;\n  }\n  /**\n   * Inserts several blocks at once\n   *\n   * @param blocks - blocks to insert\n   * @param index - index where to insert\n   */\n  insertMany(e, t = 0) {\n    this._blocks.insertMany(e, t);\n  }\n  /**\n   * Update Block data.\n   *\n   * Currently we don't have an 'update' method in the Tools API, so we just create a new block with the same id and type\n   * Should not trigger 'block-removed' or 'block-added' events.\n   *\n   * If neither data nor tunes is provided, return the provided block instead.\n   *\n   * @param block - block to update\n   * @param data - (optional) new data\n   * @param tunes - (optional) tune data\n   */\n  async update(e, t, o) {\n    if (!t && !o)\n      return e;\n    const i = await e.data, s = this.composeBlock({\n      id: e.id,\n      tool: e.name,\n      data: Object.assign({}, i, t ?? {}),\n      tunes: o ?? e.tunes\n    }), r = this.getBlockIndex(e);\n    return this._blocks.replace(r, s), this.blockDidMutated(Ao, s, {\n      index: r\n    }), s;\n  }\n  /**\n   * Replace passed Block with the new one with specified Tool and data\n   *\n   * @param block - block to replace\n   * @param newTool - new Tool name\n   * @param data - new Tool data\n   */\n  replace(e, t, o) {\n    const i = this.getBlockIndex(e);\n    return this.insert({\n      tool: t,\n      data: o,\n      index: i,\n      replace: !0\n    });\n  }\n  /**\n   * Insert pasted content. Call onPaste callback after insert.\n   *\n   * @param {string} toolName - name of Tool to insert\n   * @param {PasteEvent} pasteEvent - pasted data\n   * @param {boolean} replace - should replace current block\n   */\n  paste(e, t, o = !1) {\n    const i = this.insert({\n      tool: e,\n      replace: o\n    });\n    try {\n      window.requestIdleCallback(() => {\n        i.call(ee.ON_PASTE, t);\n      });\n    } catch (s) {\n      S(`${e}: onPaste callback call is failed`, \"error\", s);\n    }\n    return i;\n  }\n  /**\n   * Insert new default block at passed index\n   *\n   * @param {number} index - index where Block should be inserted\n   * @param {boolean} needToFocus - if true, updates current Block index\n   *\n   * TODO: Remove method and use insert() with index instead (?)\n   * @returns {Block} inserted Block\n   */\n  insertDefaultBlockAtIndex(e, t = !1) {\n    const o = this.composeBlock({ tool: this.config.defaultBlock });\n    return this._blocks[e] = o, this.blockDidMutated(Mo, o, {\n      index: e\n    }), t ? this.currentBlockIndex = e : e <= this.currentBlockIndex && this.currentBlockIndex++, o;\n  }\n  /**\n   * Always inserts at the end\n   *\n   * @returns {Block}\n   */\n  insertAtEnd() {\n    return this.currentBlockIndex = this.blocks.length - 1, this.insert();\n  }\n  /**\n   * Merge two blocks\n   *\n   * @param {Block} targetBlock - previous block will be append to this block\n   * @param {Block} blockToMerge - block that will be merged with target block\n   * @returns {Promise} - the sequence that can be continued\n   */\n  async mergeBlocks(e, t) {\n    let o;\n    if (e.name === t.name && e.mergeable) {\n      const i = await t.data;\n      if (V(i)) {\n        console.error(\"Could not merge Block. Failed to extract original Block data.\");\n        return;\n      }\n      const [s] = yt([i], e.tool.sanitizeConfig);\n      o = s;\n    } else if (e.mergeable && He(t, \"export\") && He(e, \"import\")) {\n      const i = await t.exportDataAsString(), s = Z(i, e.tool.sanitizeConfig);\n      o = Bo(s, e.tool.conversionConfig);\n    }\n    o !== void 0 && (await e.mergeWith(o), this.removeBlock(t), this.currentBlockIndex = this._blocks.indexOf(e));\n  }\n  /**\n   * Remove passed Block\n   *\n   * @param block - Block to remove\n   * @param addLastBlock - if true, adds new default block at the end. @todo remove this logic and use event-bus instead\n   */\n  removeBlock(e, t = !0) {\n    return new Promise((o) => {\n      const i = this._blocks.indexOf(e);\n      if (!this.validateIndex(i))\n        throw new Error(\"Can't find a Block to remove\");\n      e.destroy(), this._blocks.remove(i), this.blockDidMutated(_o, e, {\n        index: i\n      }), this.currentBlockIndex >= i && this.currentBlockIndex--, this.blocks.length ? i === 0 && (this.currentBlockIndex = 0) : (this.unsetCurrentBlock(), t && this.insert()), o();\n    });\n  }\n  /**\n   * Remove only selected Blocks\n   * and returns first Block index where started removing...\n   *\n   * @returns {number|undefined}\n   */\n  removeSelectedBlocks() {\n    let e;\n    for (let t = this.blocks.length - 1; t >= 0; t--)\n      this.blocks[t].selected && (this.removeBlock(this.blocks[t]), e = t);\n    return e;\n  }\n  /**\n   * Attention!\n   * After removing insert the new default typed Block and focus on it\n   * Removes all blocks\n   */\n  removeAllBlocks() {\n    for (let e = this.blocks.length - 1; e >= 0; e--)\n      this._blocks.remove(e);\n    this.unsetCurrentBlock(), this.insert(), this.currentBlock.firstInput.focus();\n  }\n  /**\n   * Split current Block\n   * 1. Extract content from Caret position to the Block`s end\n   * 2. Insert a new Block below current one with extracted content\n   *\n   * @returns {Block}\n   */\n  split() {\n    const e = this.Editor.Caret.extractFragmentFromCaretPosition(), t = d.make(\"div\");\n    t.appendChild(e);\n    const o = {\n      text: d.isEmpty(t) ? \"\" : t.innerHTML\n    };\n    return this.insert({ data: o });\n  }\n  /**\n   * Returns Block by passed index\n   *\n   * @param {number} index - index to get. -1 to get last\n   * @returns {Block}\n   */\n  getBlockByIndex(e) {\n    return e === -1 && (e = this._blocks.length - 1), this._blocks[e];\n  }\n  /**\n   * Returns an index for passed Block\n   *\n   * @param block - block to find index\n   */\n  getBlockIndex(e) {\n    return this._blocks.indexOf(e);\n  }\n  /**\n   * Returns the Block by passed id\n   *\n   * @param id - id of block to get\n   * @returns {Block}\n   */\n  getBlockById(e) {\n    return this._blocks.array.find((t) => t.id === e);\n  }\n  /**\n   * Get Block instance by html element\n   *\n   * @param {Node} element - html element to get Block by\n   */\n  getBlock(e) {\n    d.isElement(e) || (e = e.parentNode);\n    const t = this._blocks.nodes, o = e.closest(`.${R.CSS.wrapper}`), i = t.indexOf(o);\n    if (i >= 0)\n      return this._blocks[i];\n  }\n  /**\n   * 1) Find first-level Block from passed child Node\n   * 2) Mark it as current\n   *\n   * @param {Node} childNode - look ahead from this node.\n   * @returns {Block | undefined} can return undefined in case when the passed child note is not a part of the current editor instance\n   */\n  setCurrentBlockByChildNode(e) {\n    d.isElement(e) || (e = e.parentNode);\n    const t = e.closest(`.${R.CSS.wrapper}`);\n    if (!t)\n      return;\n    const o = t.closest(`.${this.Editor.UI.CSS.editorWrapper}`);\n    if (o != null && o.isEqualNode(this.Editor.UI.nodes.wrapper))\n      return this.currentBlockIndex = this._blocks.nodes.indexOf(t), this.currentBlock.updateCurrentInput(), this.currentBlock;\n  }\n  /**\n   * Return block which contents passed node\n   *\n   * @param {Node} childNode - node to get Block by\n   * @returns {Block}\n   */\n  getBlockByChildNode(e) {\n    if (!e || !(e instanceof Node))\n      return;\n    d.isElement(e) || (e = e.parentNode);\n    const t = e.closest(`.${R.CSS.wrapper}`);\n    return this.blocks.find((o) => o.holder === t);\n  }\n  /**\n   * Swap Blocks Position\n   *\n   * @param {number} fromIndex - index of first block\n   * @param {number} toIndex - index of second block\n   * @deprecated — use 'move' instead\n   */\n  swap(e, t) {\n    this._blocks.swap(e, t), this.currentBlockIndex = t;\n  }\n  /**\n   * Move a block to a new index\n   *\n   * @param {number} toIndex - index where to move Block\n   * @param {number} fromIndex - index of Block to move\n   */\n  move(e, t = this.currentBlockIndex) {\n    if (isNaN(e) || isNaN(t)) {\n      S(\"Warning during 'move' call: incorrect indices provided.\", \"warn\");\n      return;\n    }\n    if (!this.validateIndex(e) || !this.validateIndex(t)) {\n      S(\"Warning during 'move' call: indices cannot be lower than 0 or greater than the amount of blocks.\", \"warn\");\n      return;\n    }\n    this._blocks.move(e, t), this.currentBlockIndex = e, this.blockDidMutated(ia, this.currentBlock, {\n      fromIndex: t,\n      toIndex: e\n    });\n  }\n  /**\n   * Converts passed Block to the new Tool\n   * Uses Conversion Config\n   *\n   * @param blockToConvert - Block that should be converted\n   * @param targetToolName - name of the Tool to convert to\n   * @param blockDataOverrides - optional new Block data overrides\n   */\n  async convert(e, t, o) {\n    if (!await e.save())\n      throw new Error(\"Could not convert Block. Failed to extract original Block data.\");\n    const s = this.Editor.Tools.blockTools.get(t);\n    if (!s)\n      throw new Error(`Could not convert Block. Tool «${t}» not found.`);\n    const r = await e.exportDataAsString(), a = Z(\n      r,\n      s.sanitizeConfig\n    );\n    let l = Bo(a, s.conversionConfig, s.settings);\n    return o && (l = Object.assign(l, o)), this.replace(e, s.name, l);\n  }\n  /**\n   * Sets current Block Index -1 which means unknown\n   * and clear highlights\n   */\n  unsetCurrentBlock() {\n    this.currentBlockIndex = -1;\n  }\n  /**\n   * Clears Editor\n   *\n   * @param {boolean} needToAddDefaultBlock - 1) in internal calls (for example, in api.blocks.render)\n   *                                             we don't need to add an empty default block\n   *                                        2) in api.blocks.clear we should add empty block\n   */\n  async clear(e = !1) {\n    const t = new sa();\n    this.blocks.forEach((o) => {\n      t.add(async () => {\n        await this.removeBlock(o, !1);\n      });\n    }), await t.completed, this.unsetCurrentBlock(), e && this.insert(), this.Editor.UI.checkEmptiness();\n  }\n  /**\n   * Cleans up all the block tools' resources\n   * This is called when editor is destroyed\n   */\n  async destroy() {\n    await Promise.all(this.blocks.map((e) => e.destroy()));\n  }\n  /**\n   * Bind Block events\n   *\n   * @param {Block} block - Block to which event should be bound\n   */\n  bindBlockEvents(e) {\n    const { BlockEvents: t } = this.Editor;\n    this.readOnlyMutableListeners.on(e.holder, \"keydown\", (o) => {\n      t.keydown(o);\n    }), this.readOnlyMutableListeners.on(e.holder, \"keyup\", (o) => {\n      t.keyup(o);\n    }), this.readOnlyMutableListeners.on(e.holder, \"dragover\", (o) => {\n      t.dragOver(o);\n    }), this.readOnlyMutableListeners.on(e.holder, \"dragleave\", (o) => {\n      t.dragLeave(o);\n    }), e.on(\"didMutated\", (o) => this.blockDidMutated(Ao, o, {\n      index: this.getBlockIndex(o)\n    }));\n  }\n  /**\n   * Disable mutable handlers and bindings\n   */\n  disableModuleBindings() {\n    this.readOnlyMutableListeners.clearAll();\n  }\n  /**\n   * Enables all module handlers and bindings for all Blocks\n   */\n  enableModuleBindings() {\n    this.readOnlyMutableListeners.on(\n      document,\n      \"cut\",\n      (e) => this.Editor.BlockEvents.handleCommandX(e)\n    ), this.blocks.forEach((e) => {\n      this.bindBlockEvents(e);\n    });\n  }\n  /**\n   * Validates that the given index is not lower than 0 or higher than the amount of blocks\n   *\n   * @param {number} index - index of blocks array to validate\n   * @returns {boolean}\n   */\n  validateIndex(e) {\n    return !(e < 0 || e >= this._blocks.length);\n  }\n  /**\n   * Block mutation callback\n   *\n   * @param mutationType - what happened with block\n   * @param block - mutated block\n   * @param detailData - additional data to pass with change event\n   */\n  blockDidMutated(e, t, o) {\n    const i = new CustomEvent(e, {\n      detail: {\n        target: new J(t),\n        ...o\n      }\n    });\n    return this.eventsDispatcher.emit($o, {\n      event: i\n    }), t;\n  }\n}\nclass aa extends E {\n  constructor() {\n    super(...arguments), this.anyBlockSelectedCache = null, this.needToSelectAll = !1, this.nativeInputSelected = !1, this.readyToBlockSelection = !1;\n  }\n  /**\n   * Sanitizer Config\n   *\n   * @returns {SanitizerConfig}\n   */\n  get sanitizerConfig() {\n    return {\n      p: {},\n      h1: {},\n      h2: {},\n      h3: {},\n      h4: {},\n      h5: {},\n      h6: {},\n      ol: {},\n      ul: {},\n      li: {},\n      br: !0,\n      img: {\n        src: !0,\n        width: !0,\n        height: !0\n      },\n      a: {\n        href: !0\n      },\n      b: {},\n      i: {},\n      u: {}\n    };\n  }\n  /**\n   * Flag that identifies all Blocks selection\n   *\n   * @returns {boolean}\n   */\n  get allBlocksSelected() {\n    const { BlockManager: e } = this.Editor;\n    return e.blocks.every((t) => t.selected === !0);\n  }\n  /**\n   * Set selected all blocks\n   *\n   * @param {boolean} state - state to set\n   */\n  set allBlocksSelected(e) {\n    const { BlockManager: t } = this.Editor;\n    t.blocks.forEach((o) => {\n      o.selected = e;\n    }), this.clearCache();\n  }\n  /**\n   * Flag that identifies any Block selection\n   *\n   * @returns {boolean}\n   */\n  get anyBlockSelected() {\n    const { BlockManager: e } = this.Editor;\n    return this.anyBlockSelectedCache === null && (this.anyBlockSelectedCache = e.blocks.some((t) => t.selected === !0)), this.anyBlockSelectedCache;\n  }\n  /**\n   * Return selected Blocks array\n   *\n   * @returns {Block[]}\n   */\n  get selectedBlocks() {\n    return this.Editor.BlockManager.blocks.filter((e) => e.selected);\n  }\n  /**\n   * Module Preparation\n   * Registers Shortcuts CMD+A and CMD+C\n   * to select all and copy them\n   */\n  prepare() {\n    this.selection = new b(), ge.add({\n      name: \"CMD+A\",\n      handler: (e) => {\n        const { BlockManager: t, ReadOnly: o } = this.Editor;\n        if (o.isEnabled) {\n          e.preventDefault(), this.selectAllBlocks();\n          return;\n        }\n        t.currentBlock && this.handleCommandA(e);\n      },\n      on: this.Editor.UI.nodes.redactor\n    });\n  }\n  /**\n   * Toggle read-only state\n   *\n   *  - Remove all ranges\n   *  - Unselect all Blocks\n   */\n  toggleReadOnly() {\n    b.get().removeAllRanges(), this.allBlocksSelected = !1;\n  }\n  /**\n   * Remove selection of Block\n   *\n   * @param {number?} index - Block index according to the BlockManager's indexes\n   */\n  unSelectBlockByIndex(e) {\n    const { BlockManager: t } = this.Editor;\n    let o;\n    isNaN(e) ? o = t.currentBlock : o = t.getBlockByIndex(e), o.selected = !1, this.clearCache();\n  }\n  /**\n   * Clear selection from Blocks\n   *\n   * @param {Event} reason - event caused clear of selection\n   * @param {boolean} restoreSelection - if true, restore saved selection\n   */\n  clearSelection(e, t = !1) {\n    const { BlockManager: o, Caret: i, RectangleSelection: s } = this.Editor;\n    this.needToSelectAll = !1, this.nativeInputSelected = !1, this.readyToBlockSelection = !1;\n    const r = e && e instanceof KeyboardEvent, a = r && Po(e.keyCode);\n    if (this.anyBlockSelected && r && a && !b.isSelectionExists) {\n      const l = o.removeSelectedBlocks();\n      o.insertDefaultBlockAtIndex(l, !0), i.setToBlock(o.currentBlock), Fe(() => {\n        const c = e.key;\n        i.insertContentAtCaretPosition(c.length > 1 ? \"\" : c);\n      }, 20)();\n    }\n    if (this.Editor.CrossBlockSelection.clear(e), !this.anyBlockSelected || s.isRectActivated()) {\n      this.Editor.RectangleSelection.clearSelection();\n      return;\n    }\n    t && this.selection.restore(), this.allBlocksSelected = !1;\n  }\n  /**\n   * Reduce each Block and copy its content\n   *\n   * @param {ClipboardEvent} e - copy/cut event\n   * @returns {Promise<void>}\n   */\n  copySelectedBlocks(e) {\n    e.preventDefault();\n    const t = d.make(\"div\");\n    this.selectedBlocks.forEach((s) => {\n      const r = Z(s.holder.innerHTML, this.sanitizerConfig), a = d.make(\"p\");\n      a.innerHTML = r, t.appendChild(a);\n    });\n    const o = Array.from(t.childNodes).map((s) => s.textContent).join(`\n\n`), i = t.innerHTML;\n    return e.clipboardData.setData(\"text/plain\", o), e.clipboardData.setData(\"text/html\", i), Promise.all(this.selectedBlocks.map((s) => s.save())).then((s) => {\n      try {\n        e.clipboardData.setData(this.Editor.Paste.MIME_TYPE, JSON.stringify(s));\n      } catch {\n      }\n    });\n  }\n  /**\n   * Select Block by its index\n   *\n   * @param {number?} index - Block index according to the BlockManager's indexes\n   */\n  selectBlockByIndex(e) {\n    const { BlockManager: t } = this.Editor, o = t.getBlockByIndex(e);\n    o !== void 0 && this.selectBlock(o);\n  }\n  /**\n   * Select passed Block\n   *\n   * @param {Block} block - Block to select\n   */\n  selectBlock(e) {\n    this.selection.save(), b.get().removeAllRanges(), e.selected = !0, this.clearCache(), this.Editor.InlineToolbar.close();\n  }\n  /**\n   * Remove selection from passed Block\n   *\n   * @param {Block} block - Block to unselect\n   */\n  unselectBlock(e) {\n    e.selected = !1, this.clearCache();\n  }\n  /**\n   * Clear anyBlockSelected cache\n   */\n  clearCache() {\n    this.anyBlockSelectedCache = null;\n  }\n  /**\n   * Module destruction\n   * De-registers Shortcut CMD+A\n   */\n  destroy() {\n    ge.remove(this.Editor.UI.nodes.redactor, \"CMD+A\");\n  }\n  /**\n   * First CMD+A selects all input content by native behaviour,\n   * next CMD+A keypress selects all blocks\n   *\n   * @param {KeyboardEvent} event - keyboard event\n   */\n  handleCommandA(e) {\n    if (this.Editor.RectangleSelection.clearSelection(), d.isNativeInput(e.target) && !this.readyToBlockSelection) {\n      this.readyToBlockSelection = !0;\n      return;\n    }\n    const t = this.Editor.BlockManager.getBlock(e.target), o = t.inputs;\n    if (o.length > 1 && !this.readyToBlockSelection) {\n      this.readyToBlockSelection = !0;\n      return;\n    }\n    if (o.length === 1 && !this.needToSelectAll) {\n      this.needToSelectAll = !0;\n      return;\n    }\n    this.needToSelectAll ? (e.preventDefault(), this.selectAllBlocks(), this.needToSelectAll = !1, this.readyToBlockSelection = !1) : this.readyToBlockSelection && (e.preventDefault(), this.selectBlock(t), this.needToSelectAll = !0);\n  }\n  /**\n   * Select All Blocks\n   * Each Block has selected setter that makes Block copyable\n   */\n  selectAllBlocks() {\n    this.selection.save(), b.get().removeAllRanges(), this.allBlocksSelected = !0, this.Editor.InlineToolbar.close();\n  }\n}\nclass Ye extends E {\n  /**\n   * Allowed caret positions in input\n   *\n   * @static\n   * @returns {{START: string, END: string, DEFAULT: string}}\n   */\n  get positions() {\n    return {\n      START: \"start\",\n      END: \"end\",\n      DEFAULT: \"default\"\n    };\n  }\n  /**\n   * Elements styles that can be useful for Caret Module\n   */\n  static get CSS() {\n    return {\n      shadowCaret: \"cdx-shadow-caret\"\n    };\n  }\n  /**\n   * Method gets Block instance and puts caret to the text node with offset\n   * There two ways that method applies caret position:\n   *   - first found text node: sets at the beginning, but you can pass an offset\n   *   - last found text node: sets at the end of the node. Also, you can customize the behaviour\n   *\n   * @param {Block} block - Block class\n   * @param {string} position - position where to set caret.\n   *                            If default - leave default behaviour and apply offset if it's passed\n   * @param {number} offset - caret offset regarding to the text node\n   */\n  setToBlock(e, t = this.positions.DEFAULT, o = 0) {\n    var c;\n    const { BlockManager: i, BlockSelection: s } = this.Editor;\n    if (s.clearSelection(), !e.focusable) {\n      (c = window.getSelection()) == null || c.removeAllRanges(), s.selectBlock(e), i.currentBlock = e;\n      return;\n    }\n    let r;\n    switch (t) {\n      case this.positions.START:\n        r = e.firstInput;\n        break;\n      case this.positions.END:\n        r = e.lastInput;\n        break;\n      default:\n        r = e.currentInput;\n    }\n    if (!r)\n      return;\n    const a = d.getDeepestNode(r, t === this.positions.END), l = d.getContentLength(a);\n    switch (!0) {\n      case t === this.positions.START:\n        o = 0;\n        break;\n      case t === this.positions.END:\n      case o > l:\n        o = l;\n        break;\n    }\n    this.set(a, o), i.setCurrentBlockByChildNode(e.holder), i.currentBlock.currentInput = r;\n  }\n  /**\n   * Set caret to the current input of current Block.\n   *\n   * @param {HTMLElement} input - input where caret should be set\n   * @param {string} position - position of the caret.\n   *                            If default - leave default behaviour and apply offset if it's passed\n   * @param {number} offset - caret offset regarding to the text node\n   */\n  setToInput(e, t = this.positions.DEFAULT, o = 0) {\n    const { currentBlock: i } = this.Editor.BlockManager, s = d.getDeepestNode(e);\n    switch (t) {\n      case this.positions.START:\n        this.set(s, 0);\n        break;\n      case this.positions.END:\n        this.set(s, d.getContentLength(s));\n        break;\n      default:\n        o && this.set(s, o);\n    }\n    i.currentInput = e;\n  }\n  /**\n   * Creates Document Range and sets caret to the element with offset\n   *\n   * @param {HTMLElement} element - target node.\n   * @param {number} offset - offset\n   */\n  set(e, t = 0) {\n    const { top: i, bottom: s } = b.setCursor(e, t), { innerHeight: r } = window;\n    i < 0 ? window.scrollBy(0, i - 30) : s > r && window.scrollBy(0, s - r + 30);\n  }\n  /**\n   * Set Caret to the last Block\n   * If last block is not empty, append another empty block\n   */\n  setToTheLastBlock() {\n    const e = this.Editor.BlockManager.lastBlock;\n    if (e)\n      if (e.tool.isDefault && e.isEmpty)\n        this.setToBlock(e);\n      else {\n        const t = this.Editor.BlockManager.insertAtEnd();\n        this.setToBlock(t);\n      }\n  }\n  /**\n   * Extract content fragment of current Block from Caret position to the end of the Block\n   */\n  extractFragmentFromCaretPosition() {\n    const e = b.get();\n    if (e.rangeCount) {\n      const t = e.getRangeAt(0), o = this.Editor.BlockManager.currentBlock.currentInput;\n      if (t.deleteContents(), o)\n        if (d.isNativeInput(o)) {\n          const i = o, s = document.createDocumentFragment(), r = i.value.substring(0, i.selectionStart), a = i.value.substring(i.selectionStart);\n          return s.textContent = a, i.value = r, s;\n        } else {\n          const i = t.cloneRange();\n          return i.selectNodeContents(o), i.setStart(t.endContainer, t.endOffset), i.extractContents();\n        }\n    }\n  }\n  /**\n   * Set's caret to the next Block or Tool`s input\n   * Before moving caret, we should check if caret position is at the end of Plugins node\n   * Using {@link Dom#getDeepestNode} to get a last node and match with current selection\n   *\n   * @param {boolean} force - pass true to skip check for caret position\n   */\n  navigateNext(e = !1) {\n    const { BlockManager: t } = this.Editor, { currentBlock: o, nextBlock: i } = t;\n    if (o === void 0)\n      return !1;\n    const { nextInput: s, currentInput: r } = o, a = r !== void 0 ? Re(r) : void 0;\n    let l = i;\n    const c = e || a || !o.focusable;\n    if (s && c)\n      return this.setToInput(s, this.positions.START), !0;\n    if (l === null) {\n      if (o.tool.isDefault || !c)\n        return !1;\n      l = t.insertAtEnd();\n    }\n    return c ? (this.setToBlock(l, this.positions.START), !0) : !1;\n  }\n  /**\n   * Set's caret to the previous Tool`s input or Block\n   * Before moving caret, we should check if caret position is start of the Plugins node\n   * Using {@link Dom#getDeepestNode} to get a last node and match with current selection\n   *\n   * @param {boolean} force - pass true to skip check for caret position\n   */\n  navigatePrevious(e = !1) {\n    const { currentBlock: t, previousBlock: o } = this.Editor.BlockManager;\n    if (!t)\n      return !1;\n    const { previousInput: i, currentInput: s } = t, r = s !== void 0 ? Ne(s) : void 0, a = e || r || !t.focusable;\n    return i && a ? (this.setToInput(i, this.positions.END), !0) : o !== null && a ? (this.setToBlock(o, this.positions.END), !0) : !1;\n  }\n  /**\n   * Inserts shadow element after passed element where caret can be placed\n   *\n   * @param {Element} element - element after which shadow caret should be inserted\n   */\n  createShadow(e) {\n    const t = document.createElement(\"span\");\n    t.classList.add(Ye.CSS.shadowCaret), e.insertAdjacentElement(\"beforeend\", t);\n  }\n  /**\n   * Restores caret position\n   *\n   * @param {HTMLElement} element - element where caret should be restored\n   */\n  restoreCaret(e) {\n    const t = e.querySelector(`.${Ye.CSS.shadowCaret}`);\n    if (!t)\n      return;\n    new b().expandToTag(t);\n    const i = document.createRange();\n    i.selectNode(t), i.extractContents();\n  }\n  /**\n   * Inserts passed content at caret position\n   *\n   * @param {string} content - content to insert\n   */\n  insertContentAtCaretPosition(e) {\n    const t = document.createDocumentFragment(), o = document.createElement(\"div\"), i = b.get(), s = b.range;\n    o.innerHTML = e, Array.from(o.childNodes).forEach((c) => t.appendChild(c)), t.childNodes.length === 0 && t.appendChild(new Text());\n    const r = t.lastChild;\n    s.deleteContents(), s.insertNode(t);\n    const a = document.createRange(), l = r.nodeType === Node.TEXT_NODE ? r : r.firstChild;\n    l !== null && l.textContent !== null && a.setStart(l, l.textContent.length), i.removeAllRanges(), i.addRange(a);\n  }\n}\nclass la extends E {\n  constructor() {\n    super(...arguments), this.onMouseUp = () => {\n      this.listeners.off(document, \"mouseover\", this.onMouseOver), this.listeners.off(document, \"mouseup\", this.onMouseUp);\n    }, this.onMouseOver = (e) => {\n      const { BlockManager: t, BlockSelection: o } = this.Editor;\n      if (e.relatedTarget === null && e.target === null)\n        return;\n      const i = t.getBlockByChildNode(e.relatedTarget) || this.lastSelectedBlock, s = t.getBlockByChildNode(e.target);\n      if (!(!i || !s) && s !== i) {\n        if (i === this.firstSelectedBlock) {\n          b.get().removeAllRanges(), i.selected = !0, s.selected = !0, o.clearCache();\n          return;\n        }\n        if (s === this.firstSelectedBlock) {\n          i.selected = !1, s.selected = !1, o.clearCache();\n          return;\n        }\n        this.Editor.InlineToolbar.close(), this.toggleBlocksSelectedState(i, s), this.lastSelectedBlock = s;\n      }\n    };\n  }\n  /**\n   * Module preparation\n   *\n   * @returns {Promise}\n   */\n  async prepare() {\n    this.listeners.on(document, \"mousedown\", (e) => {\n      this.enableCrossBlockSelection(e);\n    });\n  }\n  /**\n   * Sets up listeners\n   *\n   * @param {MouseEvent} event - mouse down event\n   */\n  watchSelection(e) {\n    if (e.button !== qn.LEFT)\n      return;\n    const { BlockManager: t } = this.Editor;\n    this.firstSelectedBlock = t.getBlock(e.target), this.lastSelectedBlock = this.firstSelectedBlock, this.listeners.on(document, \"mouseover\", this.onMouseOver), this.listeners.on(document, \"mouseup\", this.onMouseUp);\n  }\n  /**\n   * Return boolean is cross block selection started:\n   * there should be at least 2 selected blocks\n   */\n  get isCrossBlockSelectionStarted() {\n    return !!this.firstSelectedBlock && !!this.lastSelectedBlock && this.firstSelectedBlock !== this.lastSelectedBlock;\n  }\n  /**\n   * Change selection state of the next Block\n   * Used for CBS via Shift + arrow keys\n   *\n   * @param {boolean} next - if true, toggle next block. Previous otherwise\n   */\n  toggleBlockSelectedState(e = !0) {\n    const { BlockManager: t, BlockSelection: o } = this.Editor;\n    this.lastSelectedBlock || (this.lastSelectedBlock = this.firstSelectedBlock = t.currentBlock), this.firstSelectedBlock === this.lastSelectedBlock && (this.firstSelectedBlock.selected = !0, o.clearCache(), b.get().removeAllRanges());\n    const i = t.blocks.indexOf(this.lastSelectedBlock) + (e ? 1 : -1), s = t.blocks[i];\n    s && (this.lastSelectedBlock.selected !== s.selected ? (s.selected = !0, o.clearCache()) : (this.lastSelectedBlock.selected = !1, o.clearCache()), this.lastSelectedBlock = s, this.Editor.InlineToolbar.close(), s.holder.scrollIntoView({\n      block: \"nearest\"\n    }));\n  }\n  /**\n   * Clear saved state\n   *\n   * @param {Event} reason - event caused clear of selection\n   */\n  clear(e) {\n    const { BlockManager: t, BlockSelection: o, Caret: i } = this.Editor, s = t.blocks.indexOf(this.firstSelectedBlock), r = t.blocks.indexOf(this.lastSelectedBlock);\n    if (o.anyBlockSelected && s > -1 && r > -1 && e && e instanceof KeyboardEvent)\n      switch (e.keyCode) {\n        case y.DOWN:\n        case y.RIGHT:\n          i.setToBlock(t.blocks[Math.max(s, r)], i.positions.END);\n          break;\n        case y.UP:\n        case y.LEFT:\n          i.setToBlock(t.blocks[Math.min(s, r)], i.positions.START);\n          break;\n        default:\n          i.setToBlock(t.blocks[Math.max(s, r)], i.positions.END);\n      }\n    this.firstSelectedBlock = this.lastSelectedBlock = null;\n  }\n  /**\n   * Enables Cross Block Selection\n   *\n   * @param {MouseEvent} event - mouse down event\n   */\n  enableCrossBlockSelection(e) {\n    const { UI: t } = this.Editor;\n    b.isCollapsed || this.Editor.BlockSelection.clearSelection(e), t.nodes.redactor.contains(e.target) ? this.watchSelection(e) : this.Editor.BlockSelection.clearSelection(e);\n  }\n  /**\n   * Change blocks selection state between passed two blocks.\n   *\n   * @param {Block} firstBlock - first block in range\n   * @param {Block} lastBlock - last block in range\n   */\n  toggleBlocksSelectedState(e, t) {\n    const { BlockManager: o, BlockSelection: i } = this.Editor, s = o.blocks.indexOf(e), r = o.blocks.indexOf(t), a = e.selected !== t.selected;\n    for (let l = Math.min(s, r); l <= Math.max(s, r); l++) {\n      const c = o.blocks[l];\n      c !== this.firstSelectedBlock && c !== (a ? e : t) && (o.blocks[l].selected = !o.blocks[l].selected, i.clearCache());\n    }\n  }\n}\nclass ca extends E {\n  constructor() {\n    super(...arguments), this.isStartedAtEditor = !1;\n  }\n  /**\n   * Toggle read-only state\n   *\n   * if state is true:\n   *  - disable all drag-n-drop event handlers\n   *\n   * if state is false:\n   *  - restore drag-n-drop event handlers\n   *\n   * @param {boolean} readOnlyEnabled - \"read only\" state\n   */\n  toggleReadOnly(e) {\n    e ? this.disableModuleBindings() : this.enableModuleBindings();\n  }\n  /**\n   * Add drag events listeners to editor zone\n   */\n  enableModuleBindings() {\n    const { UI: e } = this.Editor;\n    this.readOnlyMutableListeners.on(e.nodes.holder, \"drop\", async (t) => {\n      await this.processDrop(t);\n    }, !0), this.readOnlyMutableListeners.on(e.nodes.holder, \"dragstart\", () => {\n      this.processDragStart();\n    }), this.readOnlyMutableListeners.on(e.nodes.holder, \"dragover\", (t) => {\n      this.processDragOver(t);\n    }, !0);\n  }\n  /**\n   * Unbind drag-n-drop event handlers\n   */\n  disableModuleBindings() {\n    this.readOnlyMutableListeners.clearAll();\n  }\n  /**\n   * Handle drop event\n   *\n   * @param {DragEvent} dropEvent - drop event\n   */\n  async processDrop(e) {\n    const {\n      BlockManager: t,\n      Paste: o,\n      Caret: i\n    } = this.Editor;\n    e.preventDefault(), t.blocks.forEach((r) => {\n      r.dropTarget = !1;\n    }), b.isAtEditor && !b.isCollapsed && this.isStartedAtEditor && document.execCommand(\"delete\"), this.isStartedAtEditor = !1;\n    const s = t.setCurrentBlockByChildNode(e.target);\n    if (s)\n      this.Editor.Caret.setToBlock(s, i.positions.END);\n    else {\n      const r = t.setCurrentBlockByChildNode(t.lastBlock.holder);\n      this.Editor.Caret.setToBlock(r, i.positions.END);\n    }\n    await o.processDataTransfer(e.dataTransfer, !0);\n  }\n  /**\n   * Handle drag start event\n   */\n  processDragStart() {\n    b.isAtEditor && !b.isCollapsed && (this.isStartedAtEditor = !0), this.Editor.InlineToolbar.close();\n  }\n  /**\n   * @param {DragEvent} dragEvent - drag event\n   */\n  processDragOver(e) {\n    e.preventDefault();\n  }\n}\nconst da = 180, ua = 400;\nclass ha extends E {\n  /**\n   * Prepare the module\n   *\n   * @param options - options used by the modification observer module\n   * @param options.config - Editor configuration object\n   * @param options.eventsDispatcher - common Editor event bus\n   */\n  constructor({ config: e, eventsDispatcher: t }) {\n    super({\n      config: e,\n      eventsDispatcher: t\n    }), this.disabled = !1, this.batchingTimeout = null, this.batchingOnChangeQueue = /* @__PURE__ */ new Map(), this.batchTime = ua, this.mutationObserver = new MutationObserver((o) => {\n      this.redactorChanged(o);\n    }), this.eventsDispatcher.on($o, (o) => {\n      this.particularBlockChanged(o.event);\n    }), this.eventsDispatcher.on(zo, () => {\n      this.disable();\n    }), this.eventsDispatcher.on(Uo, () => {\n      this.enable();\n    });\n  }\n  /**\n   * Enables onChange event\n   */\n  enable() {\n    this.mutationObserver.observe(\n      this.Editor.UI.nodes.redactor,\n      {\n        childList: !0,\n        subtree: !0,\n        characterData: !0,\n        attributes: !0\n      }\n    ), this.disabled = !1;\n  }\n  /**\n   * Disables onChange event\n   */\n  disable() {\n    this.mutationObserver.disconnect(), this.disabled = !0;\n  }\n  /**\n   * Call onChange event passed to Editor.js configuration\n   *\n   * @param event - some of our custom change events\n   */\n  particularBlockChanged(e) {\n    this.disabled || !A(this.config.onChange) || (this.batchingOnChangeQueue.set(`block:${e.detail.target.id}:event:${e.type}`, e), this.batchingTimeout && clearTimeout(this.batchingTimeout), this.batchingTimeout = setTimeout(() => {\n      let t;\n      this.batchingOnChangeQueue.size === 1 ? t = this.batchingOnChangeQueue.values().next().value : t = Array.from(this.batchingOnChangeQueue.values()), this.config.onChange && this.config.onChange(this.Editor.API.methods, t), this.batchingOnChangeQueue.clear();\n    }, this.batchTime));\n  }\n  /**\n   * Fired on every blocks wrapper dom change\n   *\n   * @param mutations - mutations happened\n   */\n  redactorChanged(e) {\n    this.eventsDispatcher.emit(ft, {\n      mutations: e\n    });\n  }\n}\nconst Rn = class Dn extends E {\n  constructor() {\n    super(...arguments), this.MIME_TYPE = \"application/x-editor-js\", this.toolsTags = {}, this.tagsByTool = {}, this.toolsPatterns = [], this.toolsFiles = {}, this.exceptionList = [], this.processTool = (e) => {\n      try {\n        const t = e.create({}, {}, !1);\n        if (e.pasteConfig === !1) {\n          this.exceptionList.push(e.name);\n          return;\n        }\n        if (!A(t.onPaste))\n          return;\n        this.getTagsConfig(e), this.getFilesConfig(e), this.getPatternsConfig(e);\n      } catch (t) {\n        S(\n          `Paste handling for «${e.name}» Tool hasn't been set up because of the error`,\n          \"warn\",\n          t\n        );\n      }\n    }, this.handlePasteEvent = async (e) => {\n      const { BlockManager: t, Toolbar: o } = this.Editor, i = t.setCurrentBlockByChildNode(e.target);\n      !i || this.isNativeBehaviour(e.target) && !e.clipboardData.types.includes(\"Files\") || i && this.exceptionList.includes(i.name) || (e.preventDefault(), this.processDataTransfer(e.clipboardData), o.close());\n    };\n  }\n  /**\n   * Set onPaste callback and collect tools` paste configurations\n   */\n  async prepare() {\n    this.processTools();\n  }\n  /**\n   * Set read-only state\n   *\n   * @param {boolean} readOnlyEnabled - read only flag value\n   */\n  toggleReadOnly(e) {\n    e ? this.unsetCallback() : this.setCallback();\n  }\n  /**\n   * Handle pasted or dropped data transfer object\n   *\n   * @param {DataTransfer} dataTransfer - pasted or dropped data transfer object\n   * @param {boolean} isDragNDrop - true if data transfer comes from drag'n'drop events\n   */\n  async processDataTransfer(e, t = !1) {\n    const { Tools: o } = this.Editor, i = e.types;\n    if ((i.includes ? i.includes(\"Files\") : i.contains(\"Files\")) && !V(this.toolsFiles)) {\n      await this.processFiles(e.files);\n      return;\n    }\n    const r = e.getData(this.MIME_TYPE), a = e.getData(\"text/plain\");\n    let l = e.getData(\"text/html\");\n    if (r)\n      try {\n        this.insertEditorJSData(JSON.parse(r));\n        return;\n      } catch {\n      }\n    t && a.trim() && l.trim() && (l = \"<p>\" + (l.trim() ? l : a) + \"</p>\");\n    const c = Object.keys(this.toolsTags).reduce((p, g) => (p[g.toLowerCase()] = this.toolsTags[g].sanitizationConfig ?? {}, p), {}), u = Object.assign({}, c, o.getAllInlineToolsSanitizeConfig(), { br: {} }), h = Z(l, u);\n    !h.trim() || h.trim() === a || !d.isHTMLString(h) ? await this.processText(a) : await this.processText(h, !0);\n  }\n  /**\n   * Process pasted text and divide them into Blocks\n   *\n   * @param {string} data - text to process. Can be HTML or plain.\n   * @param {boolean} isHTML - if passed string is HTML, this parameter should be true\n   */\n  async processText(e, t = !1) {\n    const { Caret: o, BlockManager: i } = this.Editor, s = t ? this.processHTML(e) : this.processPlain(e);\n    if (!s.length)\n      return;\n    if (s.length === 1) {\n      s[0].isBlock ? this.processSingleBlock(s.pop()) : this.processInlinePaste(s.pop());\n      return;\n    }\n    const a = i.currentBlock && i.currentBlock.tool.isDefault && i.currentBlock.isEmpty;\n    s.map(\n      async (l, c) => this.insertBlock(l, c === 0 && a)\n    ), i.currentBlock && o.setToBlock(i.currentBlock, o.positions.END);\n  }\n  /**\n   * Set onPaste callback handler\n   */\n  setCallback() {\n    this.listeners.on(this.Editor.UI.nodes.holder, \"paste\", this.handlePasteEvent);\n  }\n  /**\n   * Unset onPaste callback handler\n   */\n  unsetCallback() {\n    this.listeners.off(this.Editor.UI.nodes.holder, \"paste\", this.handlePasteEvent);\n  }\n  /**\n   * Get and process tool`s paste configs\n   */\n  processTools() {\n    const e = this.Editor.Tools.blockTools;\n    Array.from(e.values()).forEach(this.processTool);\n  }\n  /**\n   * Get tags name list from either tag name or sanitization config.\n   *\n   * @param {string | object} tagOrSanitizeConfig - tag name or sanitize config object.\n   * @returns {string[]} array of tags.\n   */\n  collectTagNames(e) {\n    return te(e) ? [e] : D(e) ? Object.keys(e) : [];\n  }\n  /**\n   * Get tags to substitute by Tool\n   *\n   * @param tool - BlockTool object\n   */\n  getTagsConfig(e) {\n    if (e.pasteConfig === !1)\n      return;\n    const t = e.pasteConfig.tags || [], o = [];\n    t.forEach((i) => {\n      const s = this.collectTagNames(i);\n      o.push(...s), s.forEach((r) => {\n        if (Object.prototype.hasOwnProperty.call(this.toolsTags, r)) {\n          S(\n            `Paste handler for «${e.name}» Tool on «${r}» tag is skipped because it is already used by «${this.toolsTags[r].tool.name}» Tool.`,\n            \"warn\"\n          );\n          return;\n        }\n        const a = D(i) ? i[r] : null;\n        this.toolsTags[r.toUpperCase()] = {\n          tool: e,\n          sanitizationConfig: a\n        };\n      });\n    }), this.tagsByTool[e.name] = o.map((i) => i.toUpperCase());\n  }\n  /**\n   * Get files` types and extensions to substitute by Tool\n   *\n   * @param tool - BlockTool object\n   */\n  getFilesConfig(e) {\n    if (e.pasteConfig === !1)\n      return;\n    const { files: t = {} } = e.pasteConfig;\n    let { extensions: o, mimeTypes: i } = t;\n    !o && !i || (o && !Array.isArray(o) && (S(`«extensions» property of the onDrop config for «${e.name}» Tool should be an array`), o = []), i && !Array.isArray(i) && (S(`«mimeTypes» property of the onDrop config for «${e.name}» Tool should be an array`), i = []), i && (i = i.filter((s) => ei(s) ? !0 : (S(`MIME type value «${s}» for the «${e.name}» Tool is not a valid MIME type`, \"warn\"), !1))), this.toolsFiles[e.name] = {\n      extensions: o || [],\n      mimeTypes: i || []\n    });\n  }\n  /**\n   * Get RegExp patterns to substitute by Tool\n   *\n   * @param tool - BlockTool object\n   */\n  getPatternsConfig(e) {\n    e.pasteConfig === !1 || !e.pasteConfig.patterns || V(e.pasteConfig.patterns) || Object.entries(e.pasteConfig.patterns).forEach(([t, o]) => {\n      o instanceof RegExp || S(\n        `Pattern ${o} for «${e.name}» Tool is skipped because it should be a Regexp instance.`,\n        \"warn\"\n      ), this.toolsPatterns.push({\n        key: t,\n        pattern: o,\n        tool: e\n      });\n    });\n  }\n  /**\n   * Check if browser behavior suits better\n   *\n   * @param {EventTarget} element - element where content has been pasted\n   * @returns {boolean}\n   */\n  isNativeBehaviour(e) {\n    return d.isNativeInput(e);\n  }\n  /**\n   * Get files from data transfer object and insert related Tools\n   *\n   * @param {FileList} items - pasted or dropped items\n   */\n  async processFiles(e) {\n    const { BlockManager: t } = this.Editor;\n    let o;\n    o = await Promise.all(\n      Array.from(e).map((r) => this.processFile(r))\n    ), o = o.filter((r) => !!r);\n    const s = t.currentBlock.tool.isDefault && t.currentBlock.isEmpty;\n    o.forEach(\n      (r, a) => {\n        t.paste(r.type, r.event, a === 0 && s);\n      }\n    );\n  }\n  /**\n   * Get information about file and find Tool to handle it\n   *\n   * @param {File} file - file to process\n   */\n  async processFile(e) {\n    const t = Jn(e), o = Object.entries(this.toolsFiles).find(([r, { mimeTypes: a, extensions: l }]) => {\n      const [c, u] = e.type.split(\"/\"), h = l.find((g) => g.toLowerCase() === t.toLowerCase()), p = a.find((g) => {\n        const [f, v] = g.split(\"/\");\n        return f === c && (v === u || v === \"*\");\n      });\n      return !!h || !!p;\n    });\n    if (!o)\n      return;\n    const [i] = o;\n    return {\n      event: this.composePasteEvent(\"file\", {\n        file: e\n      }),\n      type: i\n    };\n  }\n  /**\n   * Split HTML string to blocks and return it as array of Block data\n   *\n   * @param {string} innerHTML - html string to process\n   * @returns {PasteData[]}\n   */\n  processHTML(e) {\n    const { Tools: t } = this.Editor, o = d.make(\"DIV\");\n    return o.innerHTML = e, this.getNodes(o).map((s) => {\n      let r, a = t.defaultTool, l = !1;\n      switch (s.nodeType) {\n        case Node.DOCUMENT_FRAGMENT_NODE:\n          r = d.make(\"div\"), r.appendChild(s);\n          break;\n        case Node.ELEMENT_NODE:\n          r = s, l = !0, this.toolsTags[r.tagName] && (a = this.toolsTags[r.tagName].tool);\n          break;\n      }\n      const { tags: c } = a.pasteConfig || { tags: [] }, u = c.reduce((g, f) => (this.collectTagNames(f).forEach((O) => {\n        const T = D(f) ? f[O] : null;\n        g[O.toLowerCase()] = T || {};\n      }), g), {}), h = Object.assign({}, u, a.baseSanitizeConfig);\n      if (r.tagName.toLowerCase() === \"table\") {\n        const g = Z(r.outerHTML, h);\n        r = d.make(\"div\", void 0, {\n          innerHTML: g\n        }).firstChild;\n      } else\n        r.innerHTML = Z(r.innerHTML, h);\n      const p = this.composePasteEvent(\"tag\", {\n        data: r\n      });\n      return {\n        content: r,\n        isBlock: l,\n        tool: a.name,\n        event: p\n      };\n    }).filter((s) => {\n      const r = d.isEmpty(s.content), a = d.isSingleTag(s.content);\n      return !r || a;\n    });\n  }\n  /**\n   * Split plain text by new line symbols and return it as array of Block data\n   *\n   * @param {string} plain - string to process\n   * @returns {PasteData[]}\n   */\n  processPlain(e) {\n    const { defaultBlock: t } = this.config;\n    if (!e)\n      return [];\n    const o = t;\n    return e.split(/\\r?\\n/).filter((i) => i.trim()).map((i) => {\n      const s = d.make(\"div\");\n      s.textContent = i;\n      const r = this.composePasteEvent(\"tag\", {\n        data: s\n      });\n      return {\n        content: s,\n        tool: o,\n        isBlock: !1,\n        event: r\n      };\n    });\n  }\n  /**\n   * Process paste of single Block tool content\n   *\n   * @param {PasteData} dataToInsert - data of Block to insert\n   */\n  async processSingleBlock(e) {\n    const { Caret: t, BlockManager: o } = this.Editor, { currentBlock: i } = o;\n    if (!i || e.tool !== i.name || !d.containsOnlyInlineElements(e.content.innerHTML)) {\n      this.insertBlock(e, (i == null ? void 0 : i.tool.isDefault) && i.isEmpty);\n      return;\n    }\n    t.insertContentAtCaretPosition(e.content.innerHTML);\n  }\n  /**\n   * Process paste to single Block:\n   * 1. Find patterns` matches\n   * 2. Insert new block if it is not the same type as current one\n   * 3. Just insert text if there is no substitutions\n   *\n   * @param {PasteData} dataToInsert - data of Block to insert\n   */\n  async processInlinePaste(e) {\n    const { BlockManager: t, Caret: o } = this.Editor, { content: i } = e;\n    if (t.currentBlock && t.currentBlock.tool.isDefault && i.textContent.length < Dn.PATTERN_PROCESSING_MAX_LENGTH) {\n      const r = await this.processPattern(i.textContent);\n      if (r) {\n        const a = t.currentBlock && t.currentBlock.tool.isDefault && t.currentBlock.isEmpty, l = t.paste(r.tool, r.event, a);\n        o.setToBlock(l, o.positions.END);\n        return;\n      }\n    }\n    if (t.currentBlock && t.currentBlock.currentInput) {\n      const r = t.currentBlock.tool.baseSanitizeConfig;\n      document.execCommand(\n        \"insertHTML\",\n        !1,\n        Z(i.innerHTML, r)\n      );\n    } else\n      this.insertBlock(e);\n  }\n  /**\n   * Get patterns` matches\n   *\n   * @param {string} text - text to process\n   * @returns {Promise<{event: PasteEvent, tool: string}>}\n   */\n  async processPattern(e) {\n    const t = this.toolsPatterns.find((i) => {\n      const s = i.pattern.exec(e);\n      return s ? e === s.shift() : !1;\n    });\n    return t ? {\n      event: this.composePasteEvent(\"pattern\", {\n        key: t.key,\n        data: e\n      }),\n      tool: t.tool.name\n    } : void 0;\n  }\n  /**\n   * Insert pasted Block content to Editor\n   *\n   * @param {PasteData} data - data to insert\n   * @param {boolean} canReplaceCurrentBlock - if true and is current Block is empty, will replace current Block\n   * @returns {void}\n   */\n  insertBlock(e, t = !1) {\n    const { BlockManager: o, Caret: i } = this.Editor, { currentBlock: s } = o;\n    let r;\n    if (t && s && s.isEmpty) {\n      r = o.paste(e.tool, e.event, !0), i.setToBlock(r, i.positions.END);\n      return;\n    }\n    r = o.paste(e.tool, e.event), i.setToBlock(r, i.positions.END);\n  }\n  /**\n   * Insert data passed as application/x-editor-js JSON\n   *\n   * @param {Array} blocks — Blocks' data to insert\n   * @returns {void}\n   */\n  insertEditorJSData(e) {\n    const { BlockManager: t, Caret: o, Tools: i } = this.Editor;\n    yt(\n      e,\n      (r) => i.blockTools.get(r).sanitizeConfig\n    ).forEach(({ tool: r, data: a }, l) => {\n      let c = !1;\n      l === 0 && (c = t.currentBlock && t.currentBlock.tool.isDefault && t.currentBlock.isEmpty);\n      const u = t.insert({\n        tool: r,\n        data: a,\n        replace: c\n      });\n      o.setToBlock(u, o.positions.END);\n    });\n  }\n  /**\n   * Fetch nodes from Element node\n   *\n   * @param {Node} node - current node\n   * @param {Node[]} nodes - processed nodes\n   * @param {Node} destNode - destination node\n   */\n  processElementNode(e, t, o) {\n    const i = Object.keys(this.toolsTags), s = e, { tool: r } = this.toolsTags[s.tagName] || {}, a = this.tagsByTool[r == null ? void 0 : r.name] || [], l = i.includes(s.tagName), c = d.blockElements.includes(s.tagName.toLowerCase()), u = Array.from(s.children).some(\n      ({ tagName: p }) => i.includes(p) && !a.includes(p)\n    ), h = Array.from(s.children).some(\n      ({ tagName: p }) => d.blockElements.includes(p.toLowerCase())\n    );\n    if (!c && !l && !u)\n      return o.appendChild(s), [...t, o];\n    if (l && !u || c && !h && !u)\n      return [...t, o, s];\n  }\n  /**\n   * Recursively divide HTML string to two types of nodes:\n   * 1. Block element\n   * 2. Document Fragments contained text and markup tags like a, b, i etc.\n   *\n   * @param {Node} wrapper - wrapper of paster HTML content\n   * @returns {Node[]}\n   */\n  getNodes(e) {\n    const t = Array.from(e.childNodes);\n    let o;\n    const i = (s, r) => {\n      if (d.isEmpty(r) && !d.isSingleTag(r))\n        return s;\n      const a = s[s.length - 1];\n      let l = new DocumentFragment();\n      switch (a && d.isFragment(a) && (l = s.pop()), r.nodeType) {\n        case Node.ELEMENT_NODE:\n          if (o = this.processElementNode(r, s, l), o)\n            return o;\n          break;\n        case Node.TEXT_NODE:\n          return l.appendChild(r), [...s, l];\n        default:\n          return [...s, l];\n      }\n      return [...s, ...Array.from(r.childNodes).reduce(i, [])];\n    };\n    return t.reduce(i, []);\n  }\n  /**\n   * Compose paste event with passed type and detail\n   *\n   * @param {string} type - event type\n   * @param {PasteEventDetail} detail - event detail\n   */\n  composePasteEvent(e, t) {\n    return new CustomEvent(e, {\n      detail: t\n    });\n  }\n};\nRn.PATTERN_PROCESSING_MAX_LENGTH = 450;\nlet pa = Rn;\nclass fa extends E {\n  constructor() {\n    super(...arguments), this.toolsDontSupportReadOnly = [], this.readOnlyEnabled = !1;\n  }\n  /**\n   * Returns state of read only mode\n   */\n  get isEnabled() {\n    return this.readOnlyEnabled;\n  }\n  /**\n   * Set initial state\n   */\n  async prepare() {\n    const { Tools: e } = this.Editor, { blockTools: t } = e, o = [];\n    Array.from(t.entries()).forEach(([i, s]) => {\n      s.isReadOnlySupported || o.push(i);\n    }), this.toolsDontSupportReadOnly = o, this.config.readOnly && o.length > 0 && this.throwCriticalError(), this.toggle(this.config.readOnly, !0);\n  }\n  /**\n   * Set read-only mode or toggle current state\n   * Call all Modules `toggleReadOnly` method and re-render Editor\n   *\n   * @param state - (optional) read-only state or toggle\n   * @param isInitial - (optional) true when editor is initializing\n   */\n  async toggle(e = !this.readOnlyEnabled, t = !1) {\n    e && this.toolsDontSupportReadOnly.length > 0 && this.throwCriticalError();\n    const o = this.readOnlyEnabled;\n    this.readOnlyEnabled = e;\n    for (const s in this.Editor)\n      this.Editor[s].toggleReadOnly && this.Editor[s].toggleReadOnly(e);\n    if (o === e)\n      return this.readOnlyEnabled;\n    if (t)\n      return this.readOnlyEnabled;\n    this.Editor.ModificationsObserver.disable();\n    const i = await this.Editor.Saver.save();\n    return await this.Editor.BlockManager.clear(), await this.Editor.Renderer.render(i.blocks), this.Editor.ModificationsObserver.enable(), this.readOnlyEnabled;\n  }\n  /**\n   * Throws an error about tools which don't support read-only mode\n   */\n  throwCriticalError() {\n    throw new Ho(\n      `To enable read-only mode all connected tools should support it. Tools ${this.toolsDontSupportReadOnly.join(\", \")} don't support read-only mode.`\n    );\n  }\n}\nclass Be extends E {\n  constructor() {\n    super(...arguments), this.isRectSelectionActivated = !1, this.SCROLL_SPEED = 3, this.HEIGHT_OF_SCROLL_ZONE = 40, this.BOTTOM_SCROLL_ZONE = 1, this.TOP_SCROLL_ZONE = 2, this.MAIN_MOUSE_BUTTON = 0, this.mousedown = !1, this.isScrolling = !1, this.inScrollZone = null, this.startX = 0, this.startY = 0, this.mouseX = 0, this.mouseY = 0, this.stackOfSelected = [], this.listenerIds = [];\n  }\n  /**\n   * CSS classes for the Block\n   *\n   * @returns {{wrapper: string, content: string}}\n   */\n  static get CSS() {\n    return {\n      overlay: \"codex-editor-overlay\",\n      overlayContainer: \"codex-editor-overlay__container\",\n      rect: \"codex-editor-overlay__rectangle\",\n      topScrollZone: \"codex-editor-overlay__scroll-zone--top\",\n      bottomScrollZone: \"codex-editor-overlay__scroll-zone--bottom\"\n    };\n  }\n  /**\n   * Module Preparation\n   * Creating rect and hang handlers\n   */\n  prepare() {\n    this.enableModuleBindings();\n  }\n  /**\n   * Init rect params\n   *\n   * @param {number} pageX - X coord of mouse\n   * @param {number} pageY - Y coord of mouse\n   */\n  startSelection(e, t) {\n    const o = document.elementFromPoint(e - window.pageXOffset, t - window.pageYOffset);\n    o.closest(`.${this.Editor.Toolbar.CSS.toolbar}`) || (this.Editor.BlockSelection.allBlocksSelected = !1, this.clearSelection(), this.stackOfSelected = []);\n    const s = [\n      `.${R.CSS.content}`,\n      `.${this.Editor.Toolbar.CSS.toolbar}`,\n      `.${this.Editor.InlineToolbar.CSS.inlineToolbar}`\n    ], r = o.closest(\".\" + this.Editor.UI.CSS.editorWrapper), a = s.some((l) => !!o.closest(l));\n    !r || a || (this.mousedown = !0, this.startX = e, this.startY = t);\n  }\n  /**\n   * Clear all params to end selection\n   */\n  endSelection() {\n    this.mousedown = !1, this.startX = 0, this.startY = 0, this.overlayRectangle.style.display = \"none\";\n  }\n  /**\n   * is RectSelection Activated\n   */\n  isRectActivated() {\n    return this.isRectSelectionActivated;\n  }\n  /**\n   * Mark that selection is end\n   */\n  clearSelection() {\n    this.isRectSelectionActivated = !1;\n  }\n  /**\n   * Sets Module necessary event handlers\n   */\n  enableModuleBindings() {\n    const { container: e } = this.genHTML();\n    this.listeners.on(e, \"mousedown\", (t) => {\n      this.processMouseDown(t);\n    }, !1), this.listeners.on(document.body, \"mousemove\", dt((t) => {\n      this.processMouseMove(t);\n    }, 10), {\n      passive: !0\n    }), this.listeners.on(document.body, \"mouseleave\", () => {\n      this.processMouseLeave();\n    }), this.listeners.on(window, \"scroll\", dt((t) => {\n      this.processScroll(t);\n    }, 10), {\n      passive: !0\n    }), this.listeners.on(document.body, \"mouseup\", () => {\n      this.processMouseUp();\n    }, !1);\n  }\n  /**\n   * Handle mouse down events\n   *\n   * @param {MouseEvent} mouseEvent - mouse event payload\n   */\n  processMouseDown(e) {\n    if (e.button !== this.MAIN_MOUSE_BUTTON)\n      return;\n    e.target.closest(d.allInputsSelector) !== null || this.startSelection(e.pageX, e.pageY);\n  }\n  /**\n   * Handle mouse move events\n   *\n   * @param {MouseEvent} mouseEvent - mouse event payload\n   */\n  processMouseMove(e) {\n    this.changingRectangle(e), this.scrollByZones(e.clientY);\n  }\n  /**\n   * Handle mouse leave\n   */\n  processMouseLeave() {\n    this.clearSelection(), this.endSelection();\n  }\n  /**\n   * @param {MouseEvent} mouseEvent - mouse event payload\n   */\n  processScroll(e) {\n    this.changingRectangle(e);\n  }\n  /**\n   * Handle mouse up\n   */\n  processMouseUp() {\n    this.clearSelection(), this.endSelection();\n  }\n  /**\n   * Scroll If mouse in scroll zone\n   *\n   * @param {number} clientY - Y coord of mouse\n   */\n  scrollByZones(e) {\n    if (this.inScrollZone = null, e <= this.HEIGHT_OF_SCROLL_ZONE && (this.inScrollZone = this.TOP_SCROLL_ZONE), document.documentElement.clientHeight - e <= this.HEIGHT_OF_SCROLL_ZONE && (this.inScrollZone = this.BOTTOM_SCROLL_ZONE), !this.inScrollZone) {\n      this.isScrolling = !1;\n      return;\n    }\n    this.isScrolling || (this.scrollVertical(this.inScrollZone === this.TOP_SCROLL_ZONE ? -this.SCROLL_SPEED : this.SCROLL_SPEED), this.isScrolling = !0);\n  }\n  /**\n   * Generates required HTML elements\n   *\n   * @returns {Object<string, Element>}\n   */\n  genHTML() {\n    const { UI: e } = this.Editor, t = e.nodes.holder.querySelector(\".\" + e.CSS.editorWrapper), o = d.make(\"div\", Be.CSS.overlay, {}), i = d.make(\"div\", Be.CSS.overlayContainer, {}), s = d.make(\"div\", Be.CSS.rect, {});\n    return i.appendChild(s), o.appendChild(i), t.appendChild(o), this.overlayRectangle = s, {\n      container: t,\n      overlay: o\n    };\n  }\n  /**\n   * Activates scrolling if blockSelection is active and mouse is in scroll zone\n   *\n   * @param {number} speed - speed of scrolling\n   */\n  scrollVertical(e) {\n    if (!(this.inScrollZone && this.mousedown))\n      return;\n    const t = window.pageYOffset;\n    window.scrollBy(0, e), this.mouseY += window.pageYOffset - t, setTimeout(() => {\n      this.scrollVertical(e);\n    }, 0);\n  }\n  /**\n   * Handles the change in the rectangle and its effect\n   *\n   * @param {MouseEvent} event - mouse event\n   */\n  changingRectangle(e) {\n    if (!this.mousedown)\n      return;\n    e.pageY !== void 0 && (this.mouseX = e.pageX, this.mouseY = e.pageY);\n    const { rightPos: t, leftPos: o, index: i } = this.genInfoForMouseSelection(), s = this.startX > t && this.mouseX > t, r = this.startX < o && this.mouseX < o;\n    this.rectCrossesBlocks = !(s || r), this.isRectSelectionActivated || (this.rectCrossesBlocks = !1, this.isRectSelectionActivated = !0, this.shrinkRectangleToPoint(), this.overlayRectangle.style.display = \"block\"), this.updateRectangleSize(), this.Editor.Toolbar.close(), i !== void 0 && (this.trySelectNextBlock(i), this.inverseSelection(), b.get().removeAllRanges());\n  }\n  /**\n   * Shrink rect to singular point\n   */\n  shrinkRectangleToPoint() {\n    this.overlayRectangle.style.left = `${this.startX - window.pageXOffset}px`, this.overlayRectangle.style.top = `${this.startY - window.pageYOffset}px`, this.overlayRectangle.style.bottom = `calc(100% - ${this.startY - window.pageYOffset}px`, this.overlayRectangle.style.right = `calc(100% - ${this.startX - window.pageXOffset}px`;\n  }\n  /**\n   * Select or unselect all of blocks in array if rect is out or in selectable area\n   */\n  inverseSelection() {\n    const t = this.Editor.BlockManager.getBlockByIndex(this.stackOfSelected[0]).selected;\n    if (this.rectCrossesBlocks && !t)\n      for (const o of this.stackOfSelected)\n        this.Editor.BlockSelection.selectBlockByIndex(o);\n    if (!this.rectCrossesBlocks && t)\n      for (const o of this.stackOfSelected)\n        this.Editor.BlockSelection.unSelectBlockByIndex(o);\n  }\n  /**\n   * Updates size of rectangle\n   */\n  updateRectangleSize() {\n    this.mouseY >= this.startY ? (this.overlayRectangle.style.top = `${this.startY - window.pageYOffset}px`, this.overlayRectangle.style.bottom = `calc(100% - ${this.mouseY - window.pageYOffset}px`) : (this.overlayRectangle.style.bottom = `calc(100% - ${this.startY - window.pageYOffset}px`, this.overlayRectangle.style.top = `${this.mouseY - window.pageYOffset}px`), this.mouseX >= this.startX ? (this.overlayRectangle.style.left = `${this.startX - window.pageXOffset}px`, this.overlayRectangle.style.right = `calc(100% - ${this.mouseX - window.pageXOffset}px`) : (this.overlayRectangle.style.right = `calc(100% - ${this.startX - window.pageXOffset}px`, this.overlayRectangle.style.left = `${this.mouseX - window.pageXOffset}px`);\n  }\n  /**\n   * Collects information needed to determine the behavior of the rectangle\n   *\n   * @returns {object} index - index next Block, leftPos - start of left border of Block, rightPos - right border\n   */\n  genInfoForMouseSelection() {\n    const t = document.body.offsetWidth / 2, o = this.mouseY - window.pageYOffset, i = document.elementFromPoint(t, o), s = this.Editor.BlockManager.getBlockByChildNode(i);\n    let r;\n    s !== void 0 && (r = this.Editor.BlockManager.blocks.findIndex((h) => h.holder === s.holder));\n    const a = this.Editor.BlockManager.lastBlock.holder.querySelector(\".\" + R.CSS.content), l = Number.parseInt(window.getComputedStyle(a).width, 10) / 2, c = t - l, u = t + l;\n    return {\n      index: r,\n      leftPos: c,\n      rightPos: u\n    };\n  }\n  /**\n   * Select block with index index\n   *\n   * @param index - index of block in redactor\n   */\n  addBlockInSelection(e) {\n    this.rectCrossesBlocks && this.Editor.BlockSelection.selectBlockByIndex(e), this.stackOfSelected.push(e);\n  }\n  /**\n   * Adds a block to the selection and determines which blocks should be selected\n   *\n   * @param {object} index - index of new block in the reactor\n   */\n  trySelectNextBlock(e) {\n    const t = this.stackOfSelected[this.stackOfSelected.length - 1] === e, o = this.stackOfSelected.length, i = 1, s = -1, r = 0;\n    if (t)\n      return;\n    const a = this.stackOfSelected[o - 1] - this.stackOfSelected[o - 2] > 0;\n    let l = r;\n    o > 1 && (l = a ? i : s);\n    const c = e > this.stackOfSelected[o - 1] && l === i, u = e < this.stackOfSelected[o - 1] && l === s, p = !(c || u || l === r);\n    if (!p && (e > this.stackOfSelected[o - 1] || this.stackOfSelected[o - 1] === void 0)) {\n      let v = this.stackOfSelected[o - 1] + 1 || e;\n      for (v; v <= e; v++)\n        this.addBlockInSelection(v);\n      return;\n    }\n    if (!p && e < this.stackOfSelected[o - 1]) {\n      for (let v = this.stackOfSelected[o - 1] - 1; v >= e; v--)\n        this.addBlockInSelection(v);\n      return;\n    }\n    if (!p)\n      return;\n    let g = o - 1, f;\n    for (e > this.stackOfSelected[o - 1] ? f = () => e > this.stackOfSelected[g] : f = () => e < this.stackOfSelected[g]; f(); )\n      this.rectCrossesBlocks && this.Editor.BlockSelection.unSelectBlockByIndex(this.stackOfSelected[g]), this.stackOfSelected.pop(), g--;\n  }\n}\nclass ga extends E {\n  /**\n   * Renders passed blocks as one batch\n   *\n   * @param blocksData - blocks to render\n   */\n  async render(e) {\n    return new Promise((t) => {\n      const { Tools: o, BlockManager: i } = this.Editor;\n      if (e.length === 0)\n        i.insert();\n      else {\n        const s = e.map(({ type: r, data: a, tunes: l, id: c }) => {\n          o.available.has(r) === !1 && (X(`Tool «${r}» is not found. Check 'tools' property at the Editor.js config.`, \"warn\"), a = this.composeStubDataForTool(r, a, c), r = o.stubTool);\n          let u;\n          try {\n            u = i.composeBlock({\n              id: c,\n              tool: r,\n              data: a,\n              tunes: l\n            });\n          } catch (h) {\n            S(`Block «${r}» skipped because of plugins error`, \"error\", {\n              data: a,\n              error: h\n            }), a = this.composeStubDataForTool(r, a, c), r = o.stubTool, u = i.composeBlock({\n              id: c,\n              tool: r,\n              data: a,\n              tunes: l\n            });\n          }\n          return u;\n        });\n        i.insertMany(s);\n      }\n      window.requestIdleCallback(() => {\n        t();\n      }, { timeout: 2e3 });\n    });\n  }\n  /**\n   * Create data for the Stub Tool that will be used instead of unavailable tool\n   *\n   * @param tool - unavailable tool name to stub\n   * @param data - data of unavailable block\n   * @param [id] - id of unavailable block\n   */\n  composeStubDataForTool(e, t, o) {\n    const { Tools: i } = this.Editor;\n    let s = e;\n    if (i.unavailable.has(e)) {\n      const r = i.unavailable.get(e).toolbox;\n      r !== void 0 && r[0].title !== void 0 && (s = r[0].title);\n    }\n    return {\n      savedData: {\n        id: o,\n        type: e,\n        data: t\n      },\n      title: s\n    };\n  }\n}\nclass ma extends E {\n  /**\n   * Composes new chain of Promises to fire them alternatelly\n   *\n   * @returns {OutputData}\n   */\n  async save() {\n    const { BlockManager: e, Tools: t } = this.Editor, o = e.blocks, i = [];\n    try {\n      o.forEach((a) => {\n        i.push(this.getSavedData(a));\n      });\n      const s = await Promise.all(i), r = await yt(s, (a) => t.blockTools.get(a).sanitizeConfig);\n      return this.makeOutput(r);\n    } catch (s) {\n      X(\"Saving failed due to the Error %o\", \"error\", s);\n    }\n  }\n  /**\n   * Saves and validates\n   *\n   * @param {Block} block - Editor's Tool\n   * @returns {ValidatedData} - Tool's validated data\n   */\n  async getSavedData(e) {\n    const t = await e.save(), o = t && await e.validate(t.data);\n    return {\n      ...t,\n      isValid: o\n    };\n  }\n  /**\n   * Creates output object with saved data, time and version of editor\n   *\n   * @param {ValidatedData} allExtractedData - data extracted from Blocks\n   * @returns {OutputData}\n   */\n  makeOutput(e) {\n    const t = [];\n    return e.forEach(({ id: o, tool: i, data: s, tunes: r, isValid: a }) => {\n      if (!a) {\n        S(`Block «${i}» skipped because saved data is invalid`);\n        return;\n      }\n      if (i === this.Editor.Tools.stubTool) {\n        t.push(s);\n        return;\n      }\n      const l = {\n        id: o,\n        type: i,\n        data: s,\n        ...!V(r) && {\n          tunes: r\n        }\n      };\n      t.push(l);\n    }), {\n      time: +/* @__PURE__ */ new Date(),\n      blocks: t,\n      version: \"2.31.0-rc.7\"\n    };\n  }\n}\n(function() {\n  try {\n    if (typeof document < \"u\") {\n      var n = document.createElement(\"style\");\n      n.appendChild(document.createTextNode(\".ce-paragraph{line-height:1.6em;outline:none}.ce-block:only-of-type .ce-paragraph[data-placeholder-active]:empty:before,.ce-block:only-of-type .ce-paragraph[data-placeholder-active][data-empty=true]:before{content:attr(data-placeholder-active)}.ce-paragraph p:first-of-type{margin-top:0}.ce-paragraph p:last-of-type{margin-bottom:0}\")), document.head.appendChild(n);\n    }\n  } catch (e) {\n    console.error(\"vite-plugin-css-injected-by-js\", e);\n  }\n})();\nconst ba = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M8 9V7.2C8 7.08954 8.08954 7 8.2 7L12 7M16 9V7.2C16 7.08954 15.9105 7 15.8 7L12 7M12 7L12 17M12 17H10M12 17H14\"/></svg>';\nfunction va(n) {\n  const e = document.createElement(\"div\");\n  e.innerHTML = n.trim();\n  const t = document.createDocumentFragment();\n  return t.append(...Array.from(e.childNodes)), t;\n}\n/**\n * Base Paragraph Block for the Editor.js.\n * Represents a regular text block\n *\n * @author CodeX (team@codex.so)\n * @copyright CodeX 2018\n * @license The MIT License (MIT)\n */\nclass fo {\n  /**\n   * Default placeholder for Paragraph Tool\n   *\n   * @returns {string}\n   * @class\n   */\n  static get DEFAULT_PLACEHOLDER() {\n    return \"\";\n  }\n  /**\n   * Render plugin`s main Element and fill it with saved data\n   *\n   * @param {object} params - constructor params\n   * @param {ParagraphData} params.data - previously saved data\n   * @param {ParagraphConfig} params.config - user config for Tool\n   * @param {object} params.api - editor.js api\n   * @param {boolean} readOnly - read only mode flag\n   */\n  constructor({ data: e, config: t, api: o, readOnly: i }) {\n    this.api = o, this.readOnly = i, this._CSS = {\n      block: this.api.styles.block,\n      wrapper: \"ce-paragraph\"\n    }, this.readOnly || (this.onKeyUp = this.onKeyUp.bind(this)), this._placeholder = t.placeholder ? t.placeholder : fo.DEFAULT_PLACEHOLDER, this._data = e ?? {}, this._element = null, this._preserveBlank = t.preserveBlank ?? !1;\n  }\n  /**\n   * Check if text content is empty and set empty string to inner html.\n   * We need this because some browsers (e.g. Safari) insert <br> into empty contenteditanle elements\n   *\n   * @param {KeyboardEvent} e - key up event\n   */\n  onKeyUp(e) {\n    if (e.code !== \"Backspace\" && e.code !== \"Delete\" || !this._element)\n      return;\n    const { textContent: t } = this._element;\n    t === \"\" && (this._element.innerHTML = \"\");\n  }\n  /**\n   * Create Tool's view\n   *\n   * @returns {HTMLDivElement}\n   * @private\n   */\n  drawView() {\n    const e = document.createElement(\"DIV\");\n    return e.classList.add(this._CSS.wrapper, this._CSS.block), e.contentEditable = \"false\", e.dataset.placeholderActive = this.api.i18n.t(this._placeholder), this._data.text && (e.innerHTML = this._data.text), this.readOnly || (e.contentEditable = \"true\", e.addEventListener(\"keyup\", this.onKeyUp)), e;\n  }\n  /**\n   * Return Tool's view\n   *\n   * @returns {HTMLDivElement}\n   */\n  render() {\n    return this._element = this.drawView(), this._element;\n  }\n  /**\n   * Method that specified how to merge two Text blocks.\n   * Called by Editor.js by backspace at the beginning of the Block\n   *\n   * @param {ParagraphData} data\n   * @public\n   */\n  merge(e) {\n    if (!this._element)\n      return;\n    this._data.text += e.text;\n    const t = va(e.text);\n    this._element.appendChild(t), this._element.normalize();\n  }\n  /**\n   * Validate Paragraph block data:\n   * - check for emptiness\n   *\n   * @param {ParagraphData} savedData — data received after saving\n   * @returns {boolean} false if saved data is not correct, otherwise true\n   * @public\n   */\n  validate(e) {\n    return !(e.text.trim() === \"\" && !this._preserveBlank);\n  }\n  /**\n   * Extract Tool's data from the view\n   *\n   * @param {HTMLDivElement} toolsContent - Paragraph tools rendered view\n   * @returns {ParagraphData} - saved data\n   * @public\n   */\n  save(e) {\n    return {\n      text: e.innerHTML\n    };\n  }\n  /**\n   * On paste callback fired from Editor.\n   *\n   * @param {HTMLPasteEvent} event - event with pasted data\n   */\n  onPaste(e) {\n    const t = {\n      text: e.detail.data.innerHTML\n    };\n    this._data = t, window.requestAnimationFrame(() => {\n      this._element && (this._element.innerHTML = this._data.text || \"\");\n    });\n  }\n  /**\n   * Enable Conversion Toolbar. Paragraph can be converted to/from other tools\n   * @returns {ConversionConfig}\n   */\n  static get conversionConfig() {\n    return {\n      export: \"text\",\n      // to convert Paragraph to other block, use 'text' property of saved data\n      import: \"text\"\n      // to covert other block's exported string to Paragraph, fill 'text' property of tool data\n    };\n  }\n  /**\n   * Sanitizer rules\n   * @returns {SanitizerConfig} - Edtior.js sanitizer config\n   */\n  static get sanitize() {\n    return {\n      text: {\n        br: !0\n      }\n    };\n  }\n  /**\n   * Returns true to notify the core that read-only mode is supported\n   *\n   * @returns {boolean}\n   */\n  static get isReadOnlySupported() {\n    return !0;\n  }\n  /**\n   * Used by Editor paste handling API.\n   * Provides configuration to handle P tags.\n   *\n   * @returns {PasteConfig} - Paragraph Paste Setting\n   */\n  static get pasteConfig() {\n    return {\n      tags: [\"P\"]\n    };\n  }\n  /**\n   * Icon and title for displaying at the Toolbox\n   *\n   * @returns {ToolboxConfig} - Paragraph Toolbox Setting\n   */\n  static get toolbox() {\n    return {\n      icon: ba,\n      title: \"Text\"\n    };\n  }\n}\nclass go {\n  constructor() {\n    this.commandName = \"bold\";\n  }\n  /**\n   * Sanitizer Rule\n   * Leave <b> tags\n   *\n   * @returns {object}\n   */\n  static get sanitize() {\n    return {\n      b: {}\n    };\n  }\n  /**\n   * Create button for Inline Toolbar\n   */\n  render() {\n    return {\n      icon: Ki,\n      name: \"bold\",\n      onActivate: () => {\n        document.execCommand(this.commandName);\n      },\n      isActive: () => document.queryCommandState(this.commandName)\n    };\n  }\n  /**\n   * Set a shortcut\n   *\n   * @returns {boolean}\n   */\n  get shortcut() {\n    return \"CMD+B\";\n  }\n}\ngo.isInline = !0;\ngo.title = \"Bold\";\nclass mo {\n  constructor() {\n    this.commandName = \"italic\", this.CSS = {\n      button: \"ce-inline-tool\",\n      buttonActive: \"ce-inline-tool--active\",\n      buttonModifier: \"ce-inline-tool--italic\"\n    }, this.nodes = {\n      button: null\n    };\n  }\n  /**\n   * Sanitizer Rule\n   * Leave <i> tags\n   *\n   * @returns {object}\n   */\n  static get sanitize() {\n    return {\n      i: {}\n    };\n  }\n  /**\n   * Create button for Inline Toolbar\n   */\n  render() {\n    return this.nodes.button = document.createElement(\"button\"), this.nodes.button.type = \"button\", this.nodes.button.classList.add(this.CSS.button, this.CSS.buttonModifier), this.nodes.button.innerHTML = Ji, this.nodes.button;\n  }\n  /**\n   * Wrap range with <i> tag\n   */\n  surround() {\n    document.execCommand(this.commandName);\n  }\n  /**\n   * Check selection and set activated state to button if there are <i> tag\n   */\n  checkState() {\n    const e = document.queryCommandState(this.commandName);\n    return this.nodes.button.classList.toggle(this.CSS.buttonActive, e), e;\n  }\n  /**\n   * Set a shortcut\n   */\n  get shortcut() {\n    return \"CMD+I\";\n  }\n}\nmo.isInline = !0;\nmo.title = \"Italic\";\nclass bo {\n  /**\n   * @param api - Editor.js API\n   */\n  constructor({ api: e }) {\n    this.commandLink = \"createLink\", this.commandUnlink = \"unlink\", this.ENTER_KEY = 13, this.CSS = {\n      button: \"ce-inline-tool\",\n      buttonActive: \"ce-inline-tool--active\",\n      buttonModifier: \"ce-inline-tool--link\",\n      buttonUnlink: \"ce-inline-tool--unlink\",\n      input: \"ce-inline-tool-input\",\n      inputShowed: \"ce-inline-tool-input--showed\"\n    }, this.nodes = {\n      button: null,\n      input: null\n    }, this.inputOpened = !1, this.toolbar = e.toolbar, this.inlineToolbar = e.inlineToolbar, this.notifier = e.notifier, this.i18n = e.i18n, this.selection = new b();\n  }\n  /**\n   * Sanitizer Rule\n   * Leave <a> tags\n   *\n   * @returns {object}\n   */\n  static get sanitize() {\n    return {\n      a: {\n        href: !0,\n        target: \"_blank\",\n        rel: \"nofollow\"\n      }\n    };\n  }\n  /**\n   * Create button for Inline Toolbar\n   */\n  render() {\n    return this.nodes.button = document.createElement(\"button\"), this.nodes.button.type = \"button\", this.nodes.button.classList.add(this.CSS.button, this.CSS.buttonModifier), this.nodes.button.innerHTML = Co, this.nodes.button;\n  }\n  /**\n   * Input for the link\n   */\n  renderActions() {\n    return this.nodes.input = document.createElement(\"input\"), this.nodes.input.placeholder = this.i18n.t(\"Add a link\"), this.nodes.input.enterKeyHint = \"done\", this.nodes.input.classList.add(this.CSS.input), this.nodes.input.addEventListener(\"keydown\", (e) => {\n      e.keyCode === this.ENTER_KEY && this.enterPressed(e);\n    }), this.nodes.input;\n  }\n  /**\n   * Handle clicks on the Inline Toolbar icon\n   *\n   * @param {Range} range - range to wrap with link\n   */\n  surround(e) {\n    if (e) {\n      this.inputOpened ? (this.selection.restore(), this.selection.removeFakeBackground()) : (this.selection.setFakeBackground(), this.selection.save());\n      const t = this.selection.findParentTag(\"A\");\n      if (t) {\n        this.selection.expandToTag(t), this.unlink(), this.closeActions(), this.checkState(), this.toolbar.close();\n        return;\n      }\n    }\n    this.toggleActions();\n  }\n  /**\n   * Check selection and set activated state to button if there are <a> tag\n   */\n  checkState() {\n    const e = this.selection.findParentTag(\"A\");\n    if (e) {\n      this.nodes.button.innerHTML = ns, this.nodes.button.classList.add(this.CSS.buttonUnlink), this.nodes.button.classList.add(this.CSS.buttonActive), this.openActions();\n      const t = e.getAttribute(\"href\");\n      this.nodes.input.value = t !== \"null\" ? t : \"\", this.selection.save();\n    } else\n      this.nodes.button.innerHTML = Co, this.nodes.button.classList.remove(this.CSS.buttonUnlink), this.nodes.button.classList.remove(this.CSS.buttonActive);\n    return !!e;\n  }\n  /**\n   * Function called with Inline Toolbar closing\n   */\n  clear() {\n    this.closeActions();\n  }\n  /**\n   * Set a shortcut\n   */\n  get shortcut() {\n    return \"CMD+K\";\n  }\n  /**\n   * Show/close link input\n   */\n  toggleActions() {\n    this.inputOpened ? this.closeActions(!1) : this.openActions(!0);\n  }\n  /**\n   * @param {boolean} needFocus - on link creation we need to focus input. On editing - nope.\n   */\n  openActions(e = !1) {\n    this.nodes.input.classList.add(this.CSS.inputShowed), e && this.nodes.input.focus(), this.inputOpened = !0;\n  }\n  /**\n   * Close input\n   *\n   * @param {boolean} clearSavedSelection — we don't need to clear saved selection\n   *                                        on toggle-clicks on the icon of opened Toolbar\n   */\n  closeActions(e = !0) {\n    if (this.selection.isFakeBackgroundEnabled) {\n      const t = new b();\n      t.save(), this.selection.restore(), this.selection.removeFakeBackground(), t.restore();\n    }\n    this.nodes.input.classList.remove(this.CSS.inputShowed), this.nodes.input.value = \"\", e && this.selection.clearSaved(), this.inputOpened = !1;\n  }\n  /**\n   * Enter pressed on input\n   *\n   * @param {KeyboardEvent} event - enter keydown event\n   */\n  enterPressed(e) {\n    let t = this.nodes.input.value || \"\";\n    if (!t.trim()) {\n      this.selection.restore(), this.unlink(), e.preventDefault(), this.closeActions();\n      return;\n    }\n    if (!this.validateURL(t)) {\n      this.notifier.show({\n        message: \"Pasted link is not valid.\",\n        style: \"error\"\n      }), S(\"Incorrect Link pasted\", \"warn\", t);\n      return;\n    }\n    t = this.prepareLink(t), this.selection.restore(), this.selection.removeFakeBackground(), this.insertLink(t), e.preventDefault(), e.stopPropagation(), e.stopImmediatePropagation(), this.selection.collapseToEnd(), this.inlineToolbar.close();\n  }\n  /**\n   * Detects if passed string is URL\n   *\n   * @param {string} str - string to validate\n   * @returns {boolean}\n   */\n  validateURL(e) {\n    return !/\\s/.test(e);\n  }\n  /**\n   * Process link before injection\n   * - sanitize\n   * - add protocol for links like 'google.com'\n   *\n   * @param {string} link - raw user input\n   */\n  prepareLink(e) {\n    return e = e.trim(), e = this.addProtocol(e), e;\n  }\n  /**\n   * Add 'http' protocol to the links like 'vc.ru', 'google.com'\n   *\n   * @param {string} link - string to process\n   */\n  addProtocol(e) {\n    if (/^(\\w+):(\\/\\/)?/.test(e))\n      return e;\n    const t = /^\\/[^/\\s]/.test(e), o = e.substring(0, 1) === \"#\", i = /^\\/\\/[^/\\s]/.test(e);\n    return !t && !o && !i && (e = \"http://\" + e), e;\n  }\n  /**\n   * Inserts <a> tag with \"href\"\n   *\n   * @param {string} link - \"href\" value\n   */\n  insertLink(e) {\n    const t = this.selection.findParentTag(\"A\");\n    t && this.selection.expandToTag(t), document.execCommand(this.commandLink, !1, e);\n  }\n  /**\n   * Removes <a> tag\n   */\n  unlink() {\n    document.execCommand(this.commandUnlink);\n  }\n}\nbo.isInline = !0;\nbo.title = \"Link\";\nclass Fn {\n  /**\n   * @param api - Editor.js API\n   */\n  constructor({ api: e }) {\n    this.i18nAPI = e.i18n, this.blocksAPI = e.blocks, this.selectionAPI = e.selection, this.toolsAPI = e.tools, this.caretAPI = e.caret;\n  }\n  /**\n   * Returns tool's UI config\n   */\n  async render() {\n    const e = b.get(), t = this.blocksAPI.getBlockByElement(e.anchorNode);\n    if (t === void 0)\n      return [];\n    const o = this.toolsAPI.getBlockTools(), i = await Yo(t, o);\n    if (i.length === 0)\n      return [];\n    const s = i.reduce((c, u) => {\n      var h;\n      return (h = u.toolbox) == null || h.forEach((p) => {\n        c.push({\n          icon: p.icon,\n          title: z.t(K.toolNames, p.title),\n          name: u.name,\n          closeOnActivate: !0,\n          onActivate: async () => {\n            const g = await this.blocksAPI.convert(t.id, u.name, p.data);\n            this.caretAPI.setToBlock(g, \"end\");\n          }\n        });\n      }), c;\n    }, []), r = await t.getActiveToolboxEntry(), a = r !== void 0 ? r.icon : Go, l = !be();\n    return {\n      icon: a,\n      name: \"convert-to\",\n      hint: {\n        title: this.i18nAPI.t(\"Convert to\")\n      },\n      children: {\n        searchable: l,\n        items: s,\n        onOpen: () => {\n          l && (this.selectionAPI.setFakeBackground(), this.selectionAPI.save());\n        },\n        onClose: () => {\n          l && (this.selectionAPI.restore(), this.selectionAPI.removeFakeBackground());\n        }\n      }\n    };\n  }\n}\nFn.isInline = !0;\nclass jn {\n  /**\n   * @param options - constructor options\n   * @param options.data - stub tool data\n   * @param options.api - Editor.js API\n   */\n  constructor({ data: e, api: t }) {\n    this.CSS = {\n      wrapper: \"ce-stub\",\n      info: \"ce-stub__info\",\n      title: \"ce-stub__title\",\n      subtitle: \"ce-stub__subtitle\"\n    }, this.api = t, this.title = e.title || this.api.i18n.t(\"Error\"), this.subtitle = this.api.i18n.t(\"The block can not be displayed correctly.\"), this.savedData = e.savedData, this.wrapper = this.make();\n  }\n  /**\n   * Returns stub holder\n   *\n   * @returns {HTMLElement}\n   */\n  render() {\n    return this.wrapper;\n  }\n  /**\n   * Return original Tool data\n   *\n   * @returns {BlockToolData}\n   */\n  save() {\n    return this.savedData;\n  }\n  /**\n   * Create Tool html markup\n   *\n   * @returns {HTMLElement}\n   */\n  make() {\n    const e = d.make(\"div\", this.CSS.wrapper), t = is, o = d.make(\"div\", this.CSS.info), i = d.make(\"div\", this.CSS.title, {\n      textContent: this.title\n    }), s = d.make(\"div\", this.CSS.subtitle, {\n      textContent: this.subtitle\n    });\n    return e.innerHTML = t, o.appendChild(i), o.appendChild(s), e.appendChild(o), e;\n  }\n}\njn.isReadOnlySupported = !0;\nclass ka extends Tt {\n  constructor() {\n    super(...arguments), this.type = ae.Inline;\n  }\n  /**\n   * Returns title for Inline Tool if specified by user\n   */\n  get title() {\n    return this.constructable[We.Title];\n  }\n  /**\n   * Constructs new InlineTool instance from constructable\n   */\n  create() {\n    return new this.constructable({\n      api: this.api,\n      config: this.settings\n    });\n  }\n  /**\n   * Allows inline tool to be available in read-only mode\n   * Can be used, for example, by comments tool\n   */\n  get isReadOnlySupported() {\n    return this.constructable[We.IsReadOnlySupported] ?? !1;\n  }\n}\nclass ya extends Tt {\n  constructor() {\n    super(...arguments), this.type = ae.Tune;\n  }\n  /**\n   * Constructs new BlockTune instance from constructable\n   *\n   * @param data - Tune data\n   * @param block - Block API object\n   */\n  create(e, t) {\n    return new this.constructable({\n      api: this.api,\n      config: this.settings,\n      block: t,\n      data: e\n    });\n  }\n}\nclass j extends Map {\n  /**\n   * Returns Block Tools collection\n   */\n  get blockTools() {\n    const e = Array.from(this.entries()).filter(([, t]) => t.isBlock());\n    return new j(e);\n  }\n  /**\n   * Returns Inline Tools collection\n   */\n  get inlineTools() {\n    const e = Array.from(this.entries()).filter(([, t]) => t.isInline());\n    return new j(e);\n  }\n  /**\n   * Returns Block Tunes collection\n   */\n  get blockTunes() {\n    const e = Array.from(this.entries()).filter(([, t]) => t.isTune());\n    return new j(e);\n  }\n  /**\n   * Returns internal Tools collection\n   */\n  get internalTools() {\n    const e = Array.from(this.entries()).filter(([, t]) => t.isInternal);\n    return new j(e);\n  }\n  /**\n   * Returns Tools collection provided by user\n   */\n  get externalTools() {\n    const e = Array.from(this.entries()).filter(([, t]) => !t.isInternal);\n    return new j(e);\n  }\n}\nvar wa = Object.defineProperty, Ea = Object.getOwnPropertyDescriptor, Hn = (n, e, t, o) => {\n  for (var i = o > 1 ? void 0 : o ? Ea(e, t) : e, s = n.length - 1, r; s >= 0; s--)\n    (r = n[s]) && (i = (o ? r(e, t, i) : r(i)) || i);\n  return o && i && wa(e, t, i), i;\n};\nclass vo extends Tt {\n  constructor() {\n    super(...arguments), this.type = ae.Block, this.inlineTools = new j(), this.tunes = new j();\n  }\n  /**\n   * Creates new Tool instance\n   *\n   * @param data - Tool data\n   * @param block - BlockAPI for current Block\n   * @param readOnly - True if Editor is in read-only mode\n   */\n  create(e, t, o) {\n    return new this.constructable({\n      data: e,\n      block: t,\n      readOnly: o,\n      api: this.api,\n      config: this.settings\n    });\n  }\n  /**\n   * Returns true if read-only mode is supported by Tool\n   */\n  get isReadOnlySupported() {\n    return this.constructable[pe.IsReadOnlySupported] === !0;\n  }\n  /**\n   * Returns true if Tool supports linebreaks\n   */\n  get isLineBreaksEnabled() {\n    return this.constructable[pe.IsEnabledLineBreaks];\n  }\n  /**\n   * Returns Tool toolbox configuration (internal or user-specified).\n   *\n   * Merges internal and user-defined toolbox configs based on the following rules:\n   *\n   * - If both internal and user-defined toolbox configs are arrays their items are merged.\n   * Length of the second one is kept.\n   *\n   * - If both are objects their properties are merged.\n   *\n   * - If one is an object and another is an array than internal config is replaced with user-defined\n   * config. This is made to allow user to override default tool's toolbox representation (single/multiple entries)\n   */\n  get toolbox() {\n    const e = this.constructable[pe.Toolbox], t = this.config[Pe.Toolbox];\n    if (!V(e) && t !== !1)\n      return t ? Array.isArray(e) ? Array.isArray(t) ? t.map((o, i) => {\n        const s = e[i];\n        return s ? {\n          ...s,\n          ...o\n        } : o;\n      }) : [t] : Array.isArray(t) ? t : [\n        {\n          ...e,\n          ...t\n        }\n      ] : Array.isArray(e) ? e : [e];\n  }\n  /**\n   * Returns Tool conversion configuration\n   */\n  get conversionConfig() {\n    return this.constructable[pe.ConversionConfig];\n  }\n  /**\n   * Returns enabled inline tools for Tool\n   */\n  get enabledInlineTools() {\n    return this.config[Pe.EnabledInlineTools] || !1;\n  }\n  /**\n   * Returns enabled tunes for Tool\n   */\n  get enabledBlockTunes() {\n    return this.config[Pe.EnabledBlockTunes];\n  }\n  /**\n   * Returns Tool paste configuration\n   */\n  get pasteConfig() {\n    return this.constructable[pe.PasteConfig] ?? {};\n  }\n  get sanitizeConfig() {\n    const e = super.sanitizeConfig, t = this.baseSanitizeConfig;\n    if (V(e))\n      return t;\n    const o = {};\n    for (const i in e)\n      if (Object.prototype.hasOwnProperty.call(e, i)) {\n        const s = e[i];\n        D(s) ? o[i] = Object.assign({}, t, s) : o[i] = s;\n      }\n    return o;\n  }\n  get baseSanitizeConfig() {\n    const e = {};\n    return Array.from(this.inlineTools.values()).forEach((t) => Object.assign(e, t.sanitizeConfig)), Array.from(this.tunes.values()).forEach((t) => Object.assign(e, t.sanitizeConfig)), e;\n  }\n}\nHn([\n  me\n], vo.prototype, \"sanitizeConfig\", 1);\nHn([\n  me\n], vo.prototype, \"baseSanitizeConfig\", 1);\nclass xa {\n  /**\n   * @class\n   * @param config - tools config\n   * @param editorConfig - EditorJS config\n   * @param api - EditorJS API module\n   */\n  constructor(e, t, o) {\n    this.api = o, this.config = e, this.editorConfig = t;\n  }\n  /**\n   * Returns Tool object based on it's type\n   *\n   * @param name - tool name\n   */\n  get(e) {\n    const { class: t, isInternal: o = !1, ...i } = this.config[e], s = this.getConstructor(t), r = t[mt.IsTune];\n    return new s({\n      name: e,\n      constructable: t,\n      config: i,\n      api: this.api.getMethodsForTool(e, r),\n      isDefault: e === this.editorConfig.defaultBlock,\n      defaultPlaceholder: this.editorConfig.placeholder,\n      isInternal: o\n    });\n  }\n  /**\n   * Find appropriate Tool object constructor for Tool constructable\n   *\n   * @param constructable - Tools constructable\n   */\n  getConstructor(e) {\n    switch (!0) {\n      case e[We.IsInline]:\n        return ka;\n      case e[mt.IsTune]:\n        return ya;\n      default:\n        return vo;\n    }\n  }\n}\nclass $n {\n  /**\n   * MoveDownTune constructor\n   *\n   * @param {API} api — Editor's API\n   */\n  constructor({ api: e }) {\n    this.CSS = {\n      animation: \"wobble\"\n    }, this.api = e;\n  }\n  /**\n   * Tune's appearance in block settings menu\n   */\n  render() {\n    return {\n      icon: Xi,\n      title: this.api.i18n.t(\"Move down\"),\n      onActivate: () => this.handleClick(),\n      name: \"move-down\"\n    };\n  }\n  /**\n   * Handle clicks on 'move down' button\n   */\n  handleClick() {\n    const e = this.api.blocks.getCurrentBlockIndex(), t = this.api.blocks.getBlockByIndex(e + 1);\n    if (!t)\n      throw new Error(\"Unable to move Block down since it is already the last\");\n    const o = t.holder, i = o.getBoundingClientRect();\n    let s = Math.abs(window.innerHeight - o.offsetHeight);\n    i.top < window.innerHeight && (s = window.scrollY + o.offsetHeight), window.scrollTo(0, s), this.api.blocks.move(e + 1), this.api.toolbar.toggleBlockSettings(!0);\n  }\n}\n$n.isTune = !0;\nclass zn {\n  /**\n   * DeleteTune constructor\n   *\n   * @param {API} api - Editor's API\n   */\n  constructor({ api: e }) {\n    this.api = e;\n  }\n  /**\n   * Tune's appearance in block settings menu\n   */\n  render() {\n    return {\n      icon: Gi,\n      title: this.api.i18n.t(\"Delete\"),\n      name: \"delete\",\n      confirmation: {\n        title: this.api.i18n.t(\"Click to delete\"),\n        onActivate: () => this.handleClick()\n      }\n    };\n  }\n  /**\n   * Delete block conditions passed\n   */\n  handleClick() {\n    this.api.blocks.delete();\n  }\n}\nzn.isTune = !0;\nclass Un {\n  /**\n   * MoveUpTune constructor\n   *\n   * @param {API} api - Editor's API\n   */\n  constructor({ api: e }) {\n    this.CSS = {\n      animation: \"wobble\"\n    }, this.api = e;\n  }\n  /**\n   * Tune's appearance in block settings menu\n   */\n  render() {\n    return {\n      icon: Zi,\n      title: this.api.i18n.t(\"Move up\"),\n      onActivate: () => this.handleClick(),\n      name: \"move-up\"\n    };\n  }\n  /**\n   * Move current block up\n   */\n  handleClick() {\n    const e = this.api.blocks.getCurrentBlockIndex(), t = this.api.blocks.getBlockByIndex(e), o = this.api.blocks.getBlockByIndex(e - 1);\n    if (e === 0 || !t || !o)\n      throw new Error(\"Unable to move Block up since it is already the first\");\n    const i = t.holder, s = o.holder, r = i.getBoundingClientRect(), a = s.getBoundingClientRect();\n    let l;\n    a.top > 0 ? l = Math.abs(r.top) - Math.abs(a.top) : l = Math.abs(r.top) + a.height, window.scrollBy(0, -1 * l), this.api.blocks.move(e - 1), this.api.toolbar.toggleBlockSettings(!0);\n  }\n}\nUn.isTune = !0;\nvar Ba = Object.defineProperty, Ca = Object.getOwnPropertyDescriptor, Ta = (n, e, t, o) => {\n  for (var i = o > 1 ? void 0 : o ? Ca(e, t) : e, s = n.length - 1, r; s >= 0; s--)\n    (r = n[s]) && (i = (o ? r(e, t, i) : r(i)) || i);\n  return o && i && Ba(e, t, i), i;\n};\nclass Wn extends E {\n  constructor() {\n    super(...arguments), this.stubTool = \"stub\", this.toolsAvailable = new j(), this.toolsUnavailable = new j();\n  }\n  /**\n   * Returns available Tools\n   */\n  get available() {\n    return this.toolsAvailable;\n  }\n  /**\n   * Returns unavailable Tools\n   */\n  get unavailable() {\n    return this.toolsUnavailable;\n  }\n  /**\n   * Return Tools for the Inline Toolbar\n   */\n  get inlineTools() {\n    return this.available.inlineTools;\n  }\n  /**\n   * Return editor block tools\n   */\n  get blockTools() {\n    return this.available.blockTools;\n  }\n  /**\n   * Return available Block Tunes\n   *\n   * @returns {object} - object of Inline Tool's classes\n   */\n  get blockTunes() {\n    return this.available.blockTunes;\n  }\n  /**\n   * Returns default Tool object\n   */\n  get defaultTool() {\n    return this.blockTools.get(this.config.defaultBlock);\n  }\n  /**\n   * Returns internal tools\n   */\n  get internal() {\n    return this.available.internalTools;\n  }\n  /**\n   * Creates instances via passed or default configuration\n   *\n   * @returns {Promise<void>}\n   */\n  async prepare() {\n    if (this.validateTools(), this.config.tools = ut({}, this.internalTools, this.config.tools), !Object.prototype.hasOwnProperty.call(this.config, \"tools\") || Object.keys(this.config.tools).length === 0)\n      throw Error(\"Can't start without tools\");\n    const e = this.prepareConfig();\n    this.factory = new xa(e, this.config, this.Editor.API);\n    const t = this.getListOfPrepareFunctions(e);\n    if (t.length === 0)\n      return Promise.resolve();\n    await Qn(t, (o) => {\n      this.toolPrepareMethodSuccess(o);\n    }, (o) => {\n      this.toolPrepareMethodFallback(o);\n    }), this.prepareBlockTools();\n  }\n  getAllInlineToolsSanitizeConfig() {\n    const e = {};\n    return Array.from(this.inlineTools.values()).forEach((t) => {\n      Object.assign(e, t.sanitizeConfig);\n    }), e;\n  }\n  /**\n   * Calls each Tool reset method to clean up anything set by Tool\n   */\n  destroy() {\n    Object.values(this.available).forEach(async (e) => {\n      A(e.reset) && await e.reset();\n    });\n  }\n  /**\n   * Returns internal tools\n   * Includes Bold, Italic, Link and Paragraph\n   */\n  get internalTools() {\n    return {\n      convertTo: {\n        class: Fn,\n        isInternal: !0\n      },\n      link: {\n        class: bo,\n        isInternal: !0\n      },\n      bold: {\n        class: go,\n        isInternal: !0\n      },\n      italic: {\n        class: mo,\n        isInternal: !0\n      },\n      paragraph: {\n        class: fo,\n        inlineToolbar: !0,\n        isInternal: !0\n      },\n      stub: {\n        class: jn,\n        isInternal: !0\n      },\n      moveUp: {\n        class: Un,\n        isInternal: !0\n      },\n      delete: {\n        class: zn,\n        isInternal: !0\n      },\n      moveDown: {\n        class: $n,\n        isInternal: !0\n      }\n    };\n  }\n  /**\n   * Tool prepare method success callback\n   *\n   * @param {object} data - append tool to available list\n   */\n  toolPrepareMethodSuccess(e) {\n    const t = this.factory.get(e.toolName);\n    if (t.isInline()) {\n      const i = [\"render\"].filter((s) => !t.create()[s]);\n      if (i.length) {\n        S(\n          `Incorrect Inline Tool: ${t.name}. Some of required methods is not implemented %o`,\n          \"warn\",\n          i\n        ), this.toolsUnavailable.set(t.name, t);\n        return;\n      }\n    }\n    this.toolsAvailable.set(t.name, t);\n  }\n  /**\n   * Tool prepare method fail callback\n   *\n   * @param {object} data - append tool to unavailable list\n   */\n  toolPrepareMethodFallback(e) {\n    this.toolsUnavailable.set(e.toolName, this.factory.get(e.toolName));\n  }\n  /**\n   * Binds prepare function of plugins with user or default config\n   *\n   * @returns {Array} list of functions that needs to be fired sequentially\n   * @param config - tools config\n   */\n  getListOfPrepareFunctions(e) {\n    const t = [];\n    return Object.entries(e).forEach(([o, i]) => {\n      t.push({\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        function: A(i.class.prepare) ? i.class.prepare : () => {\n        },\n        data: {\n          toolName: o,\n          config: i.config\n        }\n      });\n    }), t;\n  }\n  /**\n   * Assign enabled Inline Tools and Block Tunes for Block Tool\n   */\n  prepareBlockTools() {\n    Array.from(this.blockTools.values()).forEach((e) => {\n      this.assignInlineToolsToBlockTool(e), this.assignBlockTunesToBlockTool(e);\n    });\n  }\n  /**\n   * Assign enabled Inline Tools for Block Tool\n   *\n   * @param tool - Block Tool\n   */\n  assignInlineToolsToBlockTool(e) {\n    if (this.config.inlineToolbar !== !1) {\n      if (e.enabledInlineTools === !0) {\n        e.inlineTools = new j(\n          Array.isArray(this.config.inlineToolbar) ? this.config.inlineToolbar.map((t) => [t, this.inlineTools.get(t)]) : Array.from(this.inlineTools.entries())\n        );\n        return;\n      }\n      Array.isArray(e.enabledInlineTools) && (e.inlineTools = new j(\n        /** Prepend ConvertTo Inline Tool */\n        [\"convertTo\", ...e.enabledInlineTools].map((t) => [t, this.inlineTools.get(t)])\n      ));\n    }\n  }\n  /**\n   * Assign enabled Block Tunes for Block Tool\n   *\n   * @param tool — Block Tool\n   */\n  assignBlockTunesToBlockTool(e) {\n    if (e.enabledBlockTunes !== !1) {\n      if (Array.isArray(e.enabledBlockTunes)) {\n        const t = new j(\n          e.enabledBlockTunes.map((o) => [o, this.blockTunes.get(o)])\n        );\n        e.tunes = new j([...t, ...this.blockTunes.internalTools]);\n        return;\n      }\n      if (Array.isArray(this.config.tunes)) {\n        const t = new j(\n          this.config.tunes.map((o) => [o, this.blockTunes.get(o)])\n        );\n        e.tunes = new j([...t, ...this.blockTunes.internalTools]);\n        return;\n      }\n      e.tunes = this.blockTunes.internalTools;\n    }\n  }\n  /**\n   * Validate Tools configuration objects and throw Error for user if it is invalid\n   */\n  validateTools() {\n    for (const e in this.config.tools)\n      if (Object.prototype.hasOwnProperty.call(this.config.tools, e)) {\n        if (e in this.internalTools)\n          return;\n        const t = this.config.tools[e];\n        if (!A(t) && !A(t.class))\n          throw Error(\n            `Tool «${e}» must be a constructor function or an object with function in the «class» property`\n          );\n      }\n  }\n  /**\n   * Unify tools config\n   */\n  prepareConfig() {\n    const e = {};\n    for (const t in this.config.tools)\n      D(this.config.tools[t]) ? e[t] = this.config.tools[t] : e[t] = { class: this.config.tools[t] };\n    return e;\n  }\n}\nTa([\n  me\n], Wn.prototype, \"getAllInlineToolsSanitizeConfig\", 1);\nconst Sa = `:root{--selectionColor: #e1f2ff;--inlineSelectionColor: #d4ecff;--bg-light: #eff2f5;--grayText: #707684;--color-dark: #1D202B;--color-active-icon: #388AE5;--color-gray-border: rgba(201, 201, 204, .48);--content-width: 650px;--narrow-mode-right-padding: 50px;--toolbox-buttons-size: 26px;--toolbox-buttons-size--mobile: 36px;--icon-size: 20px;--icon-size--mobile: 28px;--block-padding-vertical: .4em;--color-line-gray: #EFF0F1 }.codex-editor{position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;z-index:1}.codex-editor .hide{display:none}.codex-editor__redactor [contenteditable]:empty:after{content:\"\\\\feff\"}@media (min-width: 651px){.codex-editor--narrow .codex-editor__redactor{margin-right:50px}}@media (min-width: 651px){.codex-editor--narrow.codex-editor--rtl .codex-editor__redactor{margin-left:50px;margin-right:0}}@media (min-width: 651px){.codex-editor--narrow .ce-toolbar__actions{right:-5px}}.codex-editor-copyable{position:absolute;height:1px;width:1px;top:-400%;opacity:.001}.codex-editor-overlay{position:fixed;top:0;left:0;right:0;bottom:0;z-index:999;pointer-events:none;overflow:hidden}.codex-editor-overlay__container{position:relative;pointer-events:auto;z-index:0}.codex-editor-overlay__rectangle{position:absolute;pointer-events:none;background-color:#2eaadc33;border:1px solid transparent}.codex-editor svg{max-height:100%}.codex-editor path{stroke:currentColor}.codex-editor ::-moz-selection{background-color:#d4ecff}.codex-editor ::selection{background-color:#d4ecff}.codex-editor--toolbox-opened [contentEditable=true][data-placeholder]:focus:before{opacity:0!important}.ce-scroll-locked{overflow:hidden}.ce-scroll-locked--hard{overflow:hidden;top:calc(-1 * var(--window-scroll-offset));position:fixed;width:100%}.ce-toolbar{position:absolute;left:0;right:0;top:0;-webkit-transition:opacity .1s ease;transition:opacity .1s ease;will-change:opacity,top;display:none}.ce-toolbar--opened{display:block}.ce-toolbar__content{max-width:650px;margin:0 auto;position:relative}.ce-toolbar__plus{color:#1d202b;cursor:pointer;width:26px;height:26px;border-radius:7px;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-ms-flex-negative:0;flex-shrink:0}@media (max-width: 650px){.ce-toolbar__plus{width:36px;height:36px}}@media (hover: hover){.ce-toolbar__plus:hover{background-color:#eff2f5}}.ce-toolbar__plus--active{background-color:#eff2f5;-webkit-animation:bounceIn .75s 1;animation:bounceIn .75s 1;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards}.ce-toolbar__plus-shortcut{opacity:.6;word-spacing:-2px;margin-top:5px}@media (max-width: 650px){.ce-toolbar__plus{position:absolute;background-color:#fff;border:1px solid #E8E8EB;-webkit-box-shadow:0 3px 15px -3px rgba(13,20,33,.13);box-shadow:0 3px 15px -3px #0d142121;border-radius:6px;z-index:2;position:static}.ce-toolbar__plus--left-oriented:before{left:15px;margin-left:0}.ce-toolbar__plus--right-oriented:before{left:auto;right:15px;margin-left:0}}.ce-toolbar__actions{position:absolute;right:100%;opacity:0;display:-webkit-box;display:-ms-flexbox;display:flex;padding-right:5px}.ce-toolbar__actions--opened{opacity:1}@media (max-width: 650px){.ce-toolbar__actions{right:auto}}.ce-toolbar__settings-btn{color:#1d202b;width:26px;height:26px;border-radius:7px;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;margin-left:3px;cursor:pointer;user-select:none}@media (max-width: 650px){.ce-toolbar__settings-btn{width:36px;height:36px}}@media (hover: hover){.ce-toolbar__settings-btn:hover{background-color:#eff2f5}}.ce-toolbar__settings-btn--active{background-color:#eff2f5;-webkit-animation:bounceIn .75s 1;animation:bounceIn .75s 1;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards}@media (min-width: 651px){.ce-toolbar__settings-btn{width:24px}}.ce-toolbar__settings-btn--hidden{display:none}@media (max-width: 650px){.ce-toolbar__settings-btn{position:absolute;background-color:#fff;border:1px solid #E8E8EB;-webkit-box-shadow:0 3px 15px -3px rgba(13,20,33,.13);box-shadow:0 3px 15px -3px #0d142121;border-radius:6px;z-index:2;position:static}.ce-toolbar__settings-btn--left-oriented:before{left:15px;margin-left:0}.ce-toolbar__settings-btn--right-oriented:before{left:auto;right:15px;margin-left:0}}.ce-toolbar__plus svg,.ce-toolbar__settings-btn svg{width:24px;height:24px}@media (min-width: 651px){.codex-editor--narrow .ce-toolbar__plus{left:5px}}@media (min-width: 651px){.codex-editor--narrow .ce-toolbox .ce-popover{right:0;left:auto;left:initial}}.ce-inline-toolbar{--y-offset: 8px;--color-background-icon-active: rgba(56, 138, 229, .1);--color-text-icon-active: #388AE5;--color-text-primary: black;position:absolute;visibility:hidden;-webkit-transition:opacity .25s ease;transition:opacity .25s ease;will-change:opacity,left,top;top:0;left:0;z-index:3;opacity:1;visibility:visible}.ce-inline-toolbar [hidden]{display:none!important}.ce-inline-toolbar__toggler-and-button-wrapper{display:-webkit-box;display:-ms-flexbox;display:flex;width:100%;padding:0 6px}.ce-inline-toolbar__buttons{display:-webkit-box;display:-ms-flexbox;display:flex}.ce-inline-toolbar__dropdown{display:-webkit-box;display:-ms-flexbox;display:flex;padding:6px;margin:0 6px 0 -6px;-webkit-box-align:center;-ms-flex-align:center;align-items:center;cursor:pointer;border-right:1px solid rgba(201,201,204,.48);-webkit-box-sizing:border-box;box-sizing:border-box}@media (hover: hover){.ce-inline-toolbar__dropdown:hover{background:#eff2f5}}.ce-inline-toolbar__dropdown--hidden{display:none}.ce-inline-toolbar__dropdown-content,.ce-inline-toolbar__dropdown-arrow{display:-webkit-box;display:-ms-flexbox;display:flex}.ce-inline-toolbar__dropdown-content svg,.ce-inline-toolbar__dropdown-arrow svg{width:20px;height:20px}.ce-inline-toolbar__shortcut{opacity:.6;word-spacing:-3px;margin-top:3px}.ce-inline-tool{color:var(--color-text-primary);display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;border:0;border-radius:4px;line-height:normal;height:100%;padding:0;width:28px;background-color:transparent;cursor:pointer}@media (max-width: 650px){.ce-inline-tool{width:36px;height:36px}}@media (hover: hover){.ce-inline-tool:hover{background-color:#f8f8f8}}.ce-inline-tool svg{display:block;width:20px;height:20px}@media (max-width: 650px){.ce-inline-tool svg{width:28px;height:28px}}.ce-inline-tool--link .icon--unlink,.ce-inline-tool--unlink .icon--link{display:none}.ce-inline-tool--unlink .icon--unlink{display:inline-block;margin-bottom:-1px}.ce-inline-tool-input{background:#F8F8F8;border:1px solid rgba(226,226,229,.2);border-radius:6px;padding:4px 8px;font-size:14px;line-height:22px;outline:none;margin:0;width:100%;-webkit-box-sizing:border-box;box-sizing:border-box;display:none;font-weight:500;-webkit-appearance:none;font-family:inherit}@media (max-width: 650px){.ce-inline-tool-input{font-size:15px;font-weight:500}}.ce-inline-tool-input::-webkit-input-placeholder{color:#707684}.ce-inline-tool-input::-moz-placeholder{color:#707684}.ce-inline-tool-input:-ms-input-placeholder{color:#707684}.ce-inline-tool-input::-ms-input-placeholder{color:#707684}.ce-inline-tool-input::placeholder{color:#707684}.ce-inline-tool-input--showed{display:block}.ce-inline-tool--active{background:var(--color-background-icon-active);color:var(--color-text-icon-active)}@-webkit-keyframes fade-in{0%{opacity:0}to{opacity:1}}@keyframes fade-in{0%{opacity:0}to{opacity:1}}.ce-block{-webkit-animation:fade-in .3s ease;animation:fade-in .3s ease;-webkit-animation-fill-mode:none;animation-fill-mode:none;-webkit-animation-fill-mode:initial;animation-fill-mode:initial}.ce-block:first-of-type{margin-top:0}.ce-block--selected .ce-block__content{background:#e1f2ff}.ce-block--selected .ce-block__content [contenteditable]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ce-block--selected .ce-block__content img,.ce-block--selected .ce-block__content .ce-stub{opacity:.55}.ce-block--stretched .ce-block__content{max-width:none}.ce-block__content{position:relative;max-width:650px;margin:0 auto;-webkit-transition:background-color .15s ease;transition:background-color .15s ease}.ce-block--drop-target .ce-block__content:before{content:\"\";position:absolute;top:100%;left:-20px;margin-top:-1px;height:8px;width:8px;border:solid #388AE5;border-width:1px 1px 0 0;-webkit-transform-origin:right;transform-origin:right;-webkit-transform:rotate(45deg);transform:rotate(45deg)}.ce-block--drop-target .ce-block__content:after{content:\"\";position:absolute;top:100%;height:1px;width:100%;color:#388ae5;background:repeating-linear-gradient(90deg,#388AE5,#388AE5 1px,#fff 1px,#fff 6px)}.ce-block a{cursor:pointer;-webkit-text-decoration:underline;text-decoration:underline}.ce-block b{font-weight:700}.ce-block i{font-style:italic}@-webkit-keyframes bounceIn{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.9,.9,.9);transform:scale3d(.9,.9,.9)}20%{-webkit-transform:scale3d(1.03,1.03,1.03);transform:scale3d(1.03,1.03,1.03)}60%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@keyframes bounceIn{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.9,.9,.9);transform:scale3d(.9,.9,.9)}20%{-webkit-transform:scale3d(1.03,1.03,1.03);transform:scale3d(1.03,1.03,1.03)}60%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@-webkit-keyframes selectionBounce{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}50%{-webkit-transform:scale3d(1.01,1.01,1.01);transform:scale3d(1.01,1.01,1.01)}70%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@keyframes selectionBounce{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}50%{-webkit-transform:scale3d(1.01,1.01,1.01);transform:scale3d(1.01,1.01,1.01)}70%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@-webkit-keyframes buttonClicked{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.95,.95,.95);transform:scale3d(.95,.95,.95)}60%{-webkit-transform:scale3d(1.02,1.02,1.02);transform:scale3d(1.02,1.02,1.02)}80%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@keyframes buttonClicked{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.95,.95,.95);transform:scale3d(.95,.95,.95)}60%{-webkit-transform:scale3d(1.02,1.02,1.02);transform:scale3d(1.02,1.02,1.02)}80%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}.cdx-block{padding:.4em 0}.cdx-block::-webkit-input-placeholder{line-height:normal!important}.cdx-input{border:1px solid rgba(201,201,204,.48);-webkit-box-shadow:inset 0 1px 2px 0 rgba(35,44,72,.06);box-shadow:inset 0 1px 2px #232c480f;border-radius:3px;padding:10px 12px;outline:none;width:100%;-webkit-box-sizing:border-box;box-sizing:border-box}.cdx-input[data-placeholder]:before{position:static!important}.cdx-input[data-placeholder]:before{display:inline-block;width:0;white-space:nowrap;pointer-events:none}.cdx-settings-button{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;border-radius:3px;cursor:pointer;border:0;outline:none;background-color:transparent;vertical-align:bottom;color:inherit;margin:0;min-width:26px;min-height:26px}.cdx-settings-button--focused{background:rgba(34,186,255,.08)!important}.cdx-settings-button--focused{-webkit-box-shadow:inset 0 0 0px 1px rgba(7,161,227,.08);box-shadow:inset 0 0 0 1px #07a1e314}.cdx-settings-button--focused-animated{-webkit-animation-name:buttonClicked;animation-name:buttonClicked;-webkit-animation-duration:.25s;animation-duration:.25s}.cdx-settings-button--active{color:#388ae5}.cdx-settings-button svg{width:auto;height:auto}@media (max-width: 650px){.cdx-settings-button svg{width:28px;height:28px}}@media (max-width: 650px){.cdx-settings-button{width:36px;height:36px;border-radius:8px}}@media (hover: hover){.cdx-settings-button:hover{background-color:#eff2f5}}.cdx-loader{position:relative;border:1px solid rgba(201,201,204,.48)}.cdx-loader:before{content:\"\";position:absolute;left:50%;top:50%;width:18px;height:18px;margin:-11px 0 0 -11px;border:2px solid rgba(201,201,204,.48);border-left-color:#388ae5;border-radius:50%;-webkit-animation:cdxRotation 1.2s infinite linear;animation:cdxRotation 1.2s infinite linear}@-webkit-keyframes cdxRotation{0%{-webkit-transform:rotate(0deg);transform:rotate(0)}to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes cdxRotation{0%{-webkit-transform:rotate(0deg);transform:rotate(0)}to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.cdx-button{padding:13px;border-radius:3px;border:1px solid rgba(201,201,204,.48);font-size:14.9px;background:#fff;-webkit-box-shadow:0 2px 2px 0 rgba(18,30,57,.04);box-shadow:0 2px 2px #121e390a;color:#707684;text-align:center;cursor:pointer}@media (hover: hover){.cdx-button:hover{background:#FBFCFE;-webkit-box-shadow:0 1px 3px 0 rgba(18,30,57,.08);box-shadow:0 1px 3px #121e3914}}.cdx-button svg{height:20px;margin-right:.2em;margin-top:-2px}.ce-stub{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:12px 18px;margin:10px 0;border-radius:10px;background:#eff2f5;border:1px solid #EFF0F1;color:#707684;font-size:14px}.ce-stub svg{width:20px;height:20px}.ce-stub__info{margin-left:14px}.ce-stub__title{font-weight:500;text-transform:capitalize}.codex-editor.codex-editor--rtl{direction:rtl}.codex-editor.codex-editor--rtl .cdx-list{padding-left:0;padding-right:40px}.codex-editor.codex-editor--rtl .ce-toolbar__plus{right:-26px;left:auto}.codex-editor.codex-editor--rtl .ce-toolbar__actions{right:auto;left:-26px}@media (max-width: 650px){.codex-editor.codex-editor--rtl .ce-toolbar__actions{margin-left:0;margin-right:auto;padding-right:0;padding-left:10px}}.codex-editor.codex-editor--rtl .ce-settings{left:5px;right:auto}.codex-editor.codex-editor--rtl .ce-settings:before{right:auto;left:25px}.codex-editor.codex-editor--rtl .ce-settings__button:not(:nth-child(3n+3)){margin-left:3px;margin-right:0}.codex-editor.codex-editor--rtl .ce-conversion-tool__icon{margin-right:0;margin-left:10px}.codex-editor.codex-editor--rtl .ce-inline-toolbar__dropdown{border-right:0px solid transparent;border-left:1px solid rgba(201,201,204,.48);margin:0 -6px 0 6px}.codex-editor.codex-editor--rtl .ce-inline-toolbar__dropdown .icon--toggler-down{margin-left:0;margin-right:4px}@media (min-width: 651px){.codex-editor--narrow.codex-editor--rtl .ce-toolbar__plus{left:0;right:5px}}@media (min-width: 651px){.codex-editor--narrow.codex-editor--rtl .ce-toolbar__actions{left:-5px}}.cdx-search-field{--icon-margin-right: 10px;background:#F8F8F8;border:1px solid rgba(226,226,229,.2);border-radius:6px;padding:2px;display:grid;grid-template-columns:auto auto 1fr;grid-template-rows:auto}.cdx-search-field__icon{width:26px;height:26px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;margin-right:var(--icon-margin-right)}.cdx-search-field__icon svg{width:20px;height:20px;color:#707684}.cdx-search-field__input{font-size:14px;outline:none;font-weight:500;font-family:inherit;border:0;background:transparent;margin:0;padding:0;line-height:22px;min-width:calc(100% - 26px - var(--icon-margin-right))}.cdx-search-field__input::-webkit-input-placeholder{color:#707684;font-weight:500}.cdx-search-field__input::-moz-placeholder{color:#707684;font-weight:500}.cdx-search-field__input:-ms-input-placeholder{color:#707684;font-weight:500}.cdx-search-field__input::-ms-input-placeholder{color:#707684;font-weight:500}.cdx-search-field__input::placeholder{color:#707684;font-weight:500}.ce-popover{--border-radius: 6px;--width: 200px;--max-height: 270px;--padding: 6px;--offset-from-target: 8px;--color-border: #EFF0F1;--color-shadow: rgba(13, 20, 33, .1);--color-background: white;--color-text-primary: black;--color-text-secondary: #707684;--color-border-icon: rgba(201, 201, 204, .48);--color-border-icon-disabled: #EFF0F1;--color-text-icon-active: #388AE5;--color-background-icon-active: rgba(56, 138, 229, .1);--color-background-item-focus: rgba(34, 186, 255, .08);--color-shadow-item-focus: rgba(7, 161, 227, .08);--color-background-item-hover: #F8F8F8;--color-background-item-confirm: #E24A4A;--color-background-item-confirm-hover: #CE4343;--popover-top: calc(100% + var(--offset-from-target));--popover-left: 0;--nested-popover-overlap: 4px;--icon-size: 20px;--item-padding: 3px;--item-height: calc(var(--icon-size) + 2 * var(--item-padding))}.ce-popover__container{min-width:var(--width);width:var(--width);max-height:var(--max-height);border-radius:var(--border-radius);overflow:hidden;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-box-shadow:0px 3px 15px -3px var(--color-shadow);box-shadow:0 3px 15px -3px var(--color-shadow);position:absolute;left:var(--popover-left);top:var(--popover-top);background:var(--color-background);display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;z-index:4;opacity:0;max-height:0;pointer-events:none;padding:0;border:none}.ce-popover--opened>.ce-popover__container{opacity:1;padding:var(--padding);max-height:var(--max-height);pointer-events:auto;-webkit-animation:panelShowing .1s ease;animation:panelShowing .1s ease;border:1px solid var(--color-border)}@media (max-width: 650px){.ce-popover--opened>.ce-popover__container{-webkit-animation:panelShowingMobile .25s ease;animation:panelShowingMobile .25s ease}}.ce-popover--open-top .ce-popover__container{--popover-top: calc(-1 * (var(--offset-from-target) + var(--popover-height)))}.ce-popover--open-left .ce-popover__container{--popover-left: calc(-1 * var(--width) + 100%)}.ce-popover__items{overflow-y:auto;-ms-scroll-chaining:none;overscroll-behavior:contain}@media (max-width: 650px){.ce-popover__overlay{position:fixed;top:0;bottom:0;left:0;right:0;background:#1D202B;z-index:3;opacity:.5;-webkit-transition:opacity .12s ease-in;transition:opacity .12s ease-in;will-change:opacity;visibility:visible}}.ce-popover__overlay--hidden{display:none}@media (max-width: 650px){.ce-popover .ce-popover__container{--offset: 5px;position:fixed;max-width:none;min-width:calc(100% - var(--offset) * 2);left:var(--offset);right:var(--offset);bottom:calc(var(--offset) + env(safe-area-inset-bottom));top:auto;border-radius:10px}}.ce-popover__search{margin-bottom:5px}.ce-popover__nothing-found-message{color:#707684;display:none;cursor:default;padding:3px;font-size:14px;line-height:20px;font-weight:500;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.ce-popover__nothing-found-message--displayed{display:block}.ce-popover--nested .ce-popover__container{--popover-left: calc(var(--nesting-level) * (var(--width) - var(--nested-popover-overlap)));top:calc(var(--trigger-item-top) - var(--nested-popover-overlap));position:absolute}.ce-popover--open-top.ce-popover--nested .ce-popover__container{top:calc(var(--trigger-item-top) - var(--popover-height) + var(--item-height) + var(--offset-from-target) + var(--nested-popover-overlap))}.ce-popover--open-left .ce-popover--nested .ce-popover__container{--popover-left: calc(-1 * (var(--nesting-level) + 1) * var(--width) + 100%)}.ce-popover-item-separator{padding:4px 3px}.ce-popover-item-separator--hidden{display:none}.ce-popover-item-separator__line{height:1px;background:var(--color-border);width:100%}.ce-popover-item-html--hidden{display:none}.ce-popover-item{--border-radius: 6px;border-radius:var(--border-radius);display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:var(--item-padding);color:var(--color-text-primary);-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border:none;background:transparent}@media (max-width: 650px){.ce-popover-item{padding:4px}}.ce-popover-item:not(:last-of-type){margin-bottom:1px}.ce-popover-item__icon{width:26px;height:26px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.ce-popover-item__icon svg{width:20px;height:20px}@media (max-width: 650px){.ce-popover-item__icon{width:36px;height:36px;border-radius:8px}.ce-popover-item__icon svg{width:28px;height:28px}}.ce-popover-item__icon--tool{margin-right:4px}.ce-popover-item__title{font-size:14px;line-height:20px;font-weight:500;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;margin-right:auto}@media (max-width: 650px){.ce-popover-item__title{font-size:16px}}.ce-popover-item__secondary-title{color:var(--color-text-secondary);font-size:12px;white-space:nowrap;letter-spacing:-.1em;padding-right:5px;opacity:.6}@media (max-width: 650px){.ce-popover-item__secondary-title{display:none}}.ce-popover-item--active{background:var(--color-background-icon-active);color:var(--color-text-icon-active)}.ce-popover-item--disabled{color:var(--color-text-secondary);cursor:default;pointer-events:none}.ce-popover-item--focused:not(.ce-popover-item--no-focus){background:var(--color-background-item-focus)!important}.ce-popover-item--hidden{display:none}@media (hover: hover){.ce-popover-item:hover{cursor:pointer}.ce-popover-item:hover:not(.ce-popover-item--no-hover){background-color:var(--color-background-item-hover)}}.ce-popover-item--confirmation{background:var(--color-background-item-confirm)}.ce-popover-item--confirmation .ce-popover-item__title,.ce-popover-item--confirmation .ce-popover-item__icon{color:#fff}@media (hover: hover){.ce-popover-item--confirmation:not(.ce-popover-item--no-hover):hover{background:var(--color-background-item-confirm-hover)}}.ce-popover-item--confirmation:not(.ce-popover-item--no-focus).ce-popover-item--focused{background:var(--color-background-item-confirm-hover)!important}@-webkit-keyframes panelShowing{0%{opacity:0;-webkit-transform:translateY(-8px) scale(.9);transform:translateY(-8px) scale(.9)}70%{opacity:1;-webkit-transform:translateY(2px);transform:translateY(2px)}to{-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes panelShowing{0%{opacity:0;-webkit-transform:translateY(-8px) scale(.9);transform:translateY(-8px) scale(.9)}70%{opacity:1;-webkit-transform:translateY(2px);transform:translateY(2px)}to{-webkit-transform:translateY(0);transform:translateY(0)}}@-webkit-keyframes panelShowingMobile{0%{opacity:0;-webkit-transform:translateY(14px) scale(.98);transform:translateY(14px) scale(.98)}70%{opacity:1;-webkit-transform:translateY(-4px);transform:translateY(-4px)}to{-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes panelShowingMobile{0%{opacity:0;-webkit-transform:translateY(14px) scale(.98);transform:translateY(14px) scale(.98)}70%{opacity:1;-webkit-transform:translateY(-4px);transform:translateY(-4px)}to{-webkit-transform:translateY(0);transform:translateY(0)}}.wobble{-webkit-animation-name:wobble;animation-name:wobble;-webkit-animation-duration:.4s;animation-duration:.4s}@-webkit-keyframes wobble{0%{-webkit-transform:translate3d(0,0,0);transform:translateZ(0)}15%{-webkit-transform:translate3d(-9%,0,0);transform:translate3d(-9%,0,0)}30%{-webkit-transform:translate3d(9%,0,0);transform:translate3d(9%,0,0)}45%{-webkit-transform:translate3d(-4%,0,0);transform:translate3d(-4%,0,0)}60%{-webkit-transform:translate3d(4%,0,0);transform:translate3d(4%,0,0)}75%{-webkit-transform:translate3d(-1%,0,0);transform:translate3d(-1%,0,0)}to{-webkit-transform:translate3d(0,0,0);transform:translateZ(0)}}@keyframes wobble{0%{-webkit-transform:translate3d(0,0,0);transform:translateZ(0)}15%{-webkit-transform:translate3d(-9%,0,0);transform:translate3d(-9%,0,0)}30%{-webkit-transform:translate3d(9%,0,0);transform:translate3d(9%,0,0)}45%{-webkit-transform:translate3d(-4%,0,0);transform:translate3d(-4%,0,0)}60%{-webkit-transform:translate3d(4%,0,0);transform:translate3d(4%,0,0)}75%{-webkit-transform:translate3d(-1%,0,0);transform:translate3d(-1%,0,0)}to{-webkit-transform:translate3d(0,0,0);transform:translateZ(0)}}.ce-popover-header{margin-bottom:8px;margin-top:4px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.ce-popover-header__text{font-size:18px;font-weight:600}.ce-popover-header__back-button{border:0;background:transparent;width:36px;height:36px;color:var(--color-text-primary)}.ce-popover-header__back-button svg{display:block;width:28px;height:28px}.ce-popover--inline{--height: 38px;--height-mobile: 46px;--container-padding: 4px;position:relative}.ce-popover--inline .ce-popover__custom-content{margin-bottom:0}.ce-popover--inline .ce-popover__items{display:-webkit-box;display:-ms-flexbox;display:flex}.ce-popover--inline .ce-popover__container{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;padding:var(--container-padding);height:var(--height);top:0;min-width:-webkit-max-content;min-width:-moz-max-content;min-width:max-content;width:-webkit-max-content;width:-moz-max-content;width:max-content;-webkit-animation:none;animation:none}@media (max-width: 650px){.ce-popover--inline .ce-popover__container{height:var(--height-mobile);position:absolute}}.ce-popover--inline .ce-popover-item-separator{padding:0 4px}.ce-popover--inline .ce-popover-item-separator__line{height:100%;width:1px}.ce-popover--inline .ce-popover-item{border-radius:4px;padding:4px}.ce-popover--inline .ce-popover-item__icon--tool{-webkit-box-shadow:none;box-shadow:none;background:transparent;margin-right:0}.ce-popover--inline .ce-popover-item__icon{width:auto;width:initial;height:auto;height:initial}.ce-popover--inline .ce-popover-item__icon svg{width:20px;height:20px}@media (max-width: 650px){.ce-popover--inline .ce-popover-item__icon svg{width:28px;height:28px}}.ce-popover--inline .ce-popover-item:not(:last-of-type){margin-bottom:0;margin-bottom:initial}.ce-popover--inline .ce-popover-item-html{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.ce-popover--inline .ce-popover-item__icon--chevron-right{-webkit-transform:rotate(90deg);transform:rotate(90deg)}.ce-popover--inline .ce-popover--nested-level-1 .ce-popover__container{--offset: 3px;left:0;top:calc(var(--height) + var(--offset))}@media (max-width: 650px){.ce-popover--inline .ce-popover--nested-level-1 .ce-popover__container{top:calc(var(--height-mobile) + var(--offset))}}.ce-popover--inline .ce-popover--nested .ce-popover__container{min-width:var(--width);width:var(--width);height:-webkit-fit-content;height:-moz-fit-content;height:fit-content;padding:6px;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.ce-popover--inline .ce-popover--nested .ce-popover__items{display:block;width:100%}.ce-popover--inline .ce-popover--nested .ce-popover-item{border-radius:6px;padding:3px}@media (max-width: 650px){.ce-popover--inline .ce-popover--nested .ce-popover-item{padding:4px}}.ce-popover--inline .ce-popover--nested .ce-popover-item__icon--tool{margin-right:4px}.ce-popover--inline .ce-popover--nested .ce-popover-item__icon{width:26px;height:26px}.ce-popover--inline .ce-popover--nested .ce-popover-item-separator{padding:4px 3px}.ce-popover--inline .ce-popover--nested .ce-popover-item-separator__line{width:100%;height:1px}.codex-editor [data-placeholder]:empty:before,.codex-editor [data-placeholder][data-empty=true]:before{pointer-events:none;color:#707684;cursor:text;content:attr(data-placeholder)}.codex-editor [data-placeholder-active]:empty:before,.codex-editor [data-placeholder-active][data-empty=true]:before{pointer-events:none;color:#707684;cursor:text}.codex-editor [data-placeholder-active]:empty:focus:before,.codex-editor [data-placeholder-active][data-empty=true]:focus:before{content:attr(data-placeholder-active)}\n`;\nclass Ia extends E {\n  constructor() {\n    super(...arguments), this.isMobile = !1, this.contentRectCache = null, this.resizeDebouncer = Eo(() => {\n      this.windowResize();\n    }, 200), this.selectionChangeDebounced = Eo(() => {\n      this.selectionChanged();\n    }, da), this.documentTouchedListener = (e) => {\n      this.documentTouched(e);\n    };\n  }\n  /**\n   * Editor.js UI CSS class names\n   *\n   * @returns {{editorWrapper: string, editorZone: string}}\n   */\n  get CSS() {\n    return {\n      editorWrapper: \"codex-editor\",\n      editorWrapperNarrow: \"codex-editor--narrow\",\n      editorZone: \"codex-editor__redactor\",\n      editorZoneHidden: \"codex-editor__redactor--hidden\",\n      editorEmpty: \"codex-editor--empty\",\n      editorRtlFix: \"codex-editor--rtl\"\n    };\n  }\n  /**\n   * Return Width of center column of Editor\n   *\n   * @returns {DOMRect}\n   */\n  get contentRect() {\n    if (this.contentRectCache !== null)\n      return this.contentRectCache;\n    const e = this.nodes.wrapper.querySelector(`.${R.CSS.content}`);\n    return e ? (this.contentRectCache = e.getBoundingClientRect(), this.contentRectCache) : {\n      width: 650,\n      left: 0,\n      right: 0\n    };\n  }\n  /**\n   * Making main interface\n   */\n  async prepare() {\n    this.setIsMobile(), this.make(), this.loadStyles();\n  }\n  /**\n   * Toggle read-only state\n   *\n   * If readOnly is true:\n   *  - removes all listeners from main UI module elements\n   *\n   * if readOnly is false:\n   *  - enables all listeners to UI module elements\n   *\n   * @param {boolean} readOnlyEnabled - \"read only\" state\n   */\n  toggleReadOnly(e) {\n    e ? this.unbindReadOnlySensitiveListeners() : window.requestIdleCallback(() => {\n      this.bindReadOnlySensitiveListeners();\n    }, {\n      timeout: 2e3\n    });\n  }\n  /**\n   * Check if Editor is empty and set CSS class to wrapper\n   */\n  checkEmptiness() {\n    const { BlockManager: e } = this.Editor;\n    this.nodes.wrapper.classList.toggle(this.CSS.editorEmpty, e.isEditorEmpty);\n  }\n  /**\n   * Check if one of Toolbar is opened\n   * Used to prevent global keydowns (for example, Enter) conflicts with Enter-on-toolbar\n   *\n   * @returns {boolean}\n   */\n  get someToolbarOpened() {\n    const { Toolbar: e, BlockSettings: t, InlineToolbar: o } = this.Editor;\n    return !!(t.opened || o.opened || e.toolbox.opened);\n  }\n  /**\n   * Check for some Flipper-buttons is under focus\n   */\n  get someFlipperButtonFocused() {\n    return this.Editor.Toolbar.toolbox.hasFocus() ? !0 : Object.entries(this.Editor).filter(([e, t]) => t.flipper instanceof ce).some(([e, t]) => t.flipper.hasFocus());\n  }\n  /**\n   * Clean editor`s UI\n   */\n  destroy() {\n    this.nodes.holder.innerHTML = \"\", this.unbindReadOnlyInsensitiveListeners();\n  }\n  /**\n   * Close all Editor's toolbars\n   */\n  closeAllToolbars() {\n    const { Toolbar: e, BlockSettings: t, InlineToolbar: o } = this.Editor;\n    t.close(), o.close(), e.toolbox.close();\n  }\n  /**\n   * Check for mobile mode and save the result\n   */\n  setIsMobile() {\n    const e = window.innerWidth < Ro;\n    e !== this.isMobile && this.eventsDispatcher.emit(Te, {\n      isEnabled: this.isMobile\n    }), this.isMobile = e;\n  }\n  /**\n   * Makes Editor.js interface\n   */\n  make() {\n    this.nodes.holder = d.getHolder(this.config.holder), this.nodes.wrapper = d.make(\"div\", [\n      this.CSS.editorWrapper,\n      ...this.isRtl ? [this.CSS.editorRtlFix] : []\n    ]), this.nodes.redactor = d.make(\"div\", this.CSS.editorZone), this.nodes.holder.offsetWidth < this.contentRect.width && this.nodes.wrapper.classList.add(this.CSS.editorWrapperNarrow), this.nodes.redactor.style.paddingBottom = this.config.minHeight + \"px\", this.nodes.wrapper.appendChild(this.nodes.redactor), this.nodes.holder.appendChild(this.nodes.wrapper), this.bindReadOnlyInsensitiveListeners();\n  }\n  /**\n   * Appends CSS\n   */\n  loadStyles() {\n    const e = \"editor-js-styles\";\n    if (d.get(e))\n      return;\n    const t = d.make(\"style\", null, {\n      id: e,\n      textContent: Sa.toString()\n    });\n    this.config.style && !V(this.config.style) && this.config.style.nonce && t.setAttribute(\"nonce\", this.config.style.nonce), d.prepend(document.head, t);\n  }\n  /**\n   * Adds listeners that should work both in read-only and read-write modes\n   */\n  bindReadOnlyInsensitiveListeners() {\n    this.listeners.on(document, \"selectionchange\", this.selectionChangeDebounced), this.listeners.on(window, \"resize\", this.resizeDebouncer, {\n      passive: !0\n    }), this.listeners.on(this.nodes.redactor, \"mousedown\", this.documentTouchedListener, {\n      capture: !0,\n      passive: !0\n    }), this.listeners.on(this.nodes.redactor, \"touchstart\", this.documentTouchedListener, {\n      capture: !0,\n      passive: !0\n    });\n  }\n  /**\n   * Removes listeners that should work both in read-only and read-write modes\n   */\n  unbindReadOnlyInsensitiveListeners() {\n    this.listeners.off(document, \"selectionchange\", this.selectionChangeDebounced), this.listeners.off(window, \"resize\", this.resizeDebouncer), this.listeners.off(this.nodes.redactor, \"mousedown\", this.documentTouchedListener), this.listeners.off(this.nodes.redactor, \"touchstart\", this.documentTouchedListener);\n  }\n  /**\n   * Adds listeners that should work only in read-only mode\n   */\n  bindReadOnlySensitiveListeners() {\n    this.readOnlyMutableListeners.on(this.nodes.redactor, \"click\", (e) => {\n      this.redactorClicked(e);\n    }, !1), this.readOnlyMutableListeners.on(document, \"keydown\", (e) => {\n      this.documentKeydown(e);\n    }, !0), this.readOnlyMutableListeners.on(document, \"mousedown\", (e) => {\n      this.documentClicked(e);\n    }, !0), this.watchBlockHoveredEvents(), this.enableInputsEmptyMark();\n  }\n  /**\n   * Listen redactor mousemove to emit 'block-hovered' event\n   */\n  watchBlockHoveredEvents() {\n    let e;\n    this.readOnlyMutableListeners.on(this.nodes.redactor, \"mousemove\", dt((t) => {\n      const o = t.target.closest(\".ce-block\");\n      this.Editor.BlockSelection.anyBlockSelected || o && e !== o && (e = o, this.eventsDispatcher.emit(ln, {\n        block: this.Editor.BlockManager.getBlockByChildNode(o)\n      }));\n    }, 20), {\n      passive: !0\n    });\n  }\n  /**\n   * Unbind events that should work only in read-only mode\n   */\n  unbindReadOnlySensitiveListeners() {\n    this.readOnlyMutableListeners.clearAll();\n  }\n  /**\n   * Resize window handler\n   */\n  windowResize() {\n    this.contentRectCache = null, this.setIsMobile();\n  }\n  /**\n   * All keydowns on document\n   *\n   * @param {KeyboardEvent} event - keyboard event\n   */\n  documentKeydown(e) {\n    switch (e.keyCode) {\n      case y.ENTER:\n        this.enterPressed(e);\n        break;\n      case y.BACKSPACE:\n      case y.DELETE:\n        this.backspacePressed(e);\n        break;\n      case y.ESC:\n        this.escapePressed(e);\n        break;\n      default:\n        this.defaultBehaviour(e);\n        break;\n    }\n  }\n  /**\n   * Ignore all other document's keydown events\n   *\n   * @param {KeyboardEvent} event - keyboard event\n   */\n  defaultBehaviour(e) {\n    const { currentBlock: t } = this.Editor.BlockManager, o = e.target.closest(`.${this.CSS.editorWrapper}`), i = e.altKey || e.ctrlKey || e.metaKey || e.shiftKey;\n    if (t !== void 0 && o === null) {\n      this.Editor.BlockEvents.keydown(e);\n      return;\n    }\n    o || t && i || (this.Editor.BlockManager.unsetCurrentBlock(), this.Editor.Toolbar.close());\n  }\n  /**\n   * @param {KeyboardEvent} event - keyboard event\n   */\n  backspacePressed(e) {\n    const { BlockManager: t, BlockSelection: o, Caret: i } = this.Editor;\n    if (o.anyBlockSelected && !b.isSelectionExists) {\n      const s = t.removeSelectedBlocks(), r = t.insertDefaultBlockAtIndex(s, !0);\n      i.setToBlock(r, i.positions.START), o.clearSelection(e), e.preventDefault(), e.stopPropagation(), e.stopImmediatePropagation();\n    }\n  }\n  /**\n   * Escape pressed\n   * If some of Toolbar components are opened, then close it otherwise close Toolbar\n   *\n   * @param {Event} event - escape keydown event\n   */\n  escapePressed(e) {\n    this.Editor.BlockSelection.clearSelection(e), this.Editor.Toolbar.toolbox.opened ? (this.Editor.Toolbar.toolbox.close(), this.Editor.Caret.setToBlock(this.Editor.BlockManager.currentBlock, this.Editor.Caret.positions.END)) : this.Editor.BlockSettings.opened ? this.Editor.BlockSettings.close() : this.Editor.InlineToolbar.opened ? this.Editor.InlineToolbar.close() : this.Editor.Toolbar.close();\n  }\n  /**\n   * Enter pressed on document\n   *\n   * @param {KeyboardEvent} event - keyboard event\n   */\n  enterPressed(e) {\n    const { BlockManager: t, BlockSelection: o } = this.Editor;\n    if (this.someToolbarOpened)\n      return;\n    const i = t.currentBlockIndex >= 0;\n    if (o.anyBlockSelected && !b.isSelectionExists) {\n      o.clearSelection(e), e.preventDefault(), e.stopImmediatePropagation(), e.stopPropagation();\n      return;\n    }\n    if (!this.someToolbarOpened && i && e.target.tagName === \"BODY\") {\n      const s = this.Editor.BlockManager.insert();\n      e.preventDefault(), this.Editor.Caret.setToBlock(s), this.Editor.Toolbar.moveAndOpen(s);\n    }\n    this.Editor.BlockSelection.clearSelection(e);\n  }\n  /**\n   * All clicks on document\n   *\n   * @param {MouseEvent} event - Click event\n   */\n  documentClicked(e) {\n    var a, l;\n    if (!e.isTrusted)\n      return;\n    const t = e.target;\n    this.nodes.holder.contains(t) || b.isAtEditor || (this.Editor.BlockManager.unsetCurrentBlock(), this.Editor.Toolbar.close());\n    const i = (a = this.Editor.BlockSettings.nodes.wrapper) == null ? void 0 : a.contains(t), s = (l = this.Editor.Toolbar.nodes.settingsToggler) == null ? void 0 : l.contains(t), r = i || s;\n    if (this.Editor.BlockSettings.opened && !r) {\n      this.Editor.BlockSettings.close();\n      const c = this.Editor.BlockManager.getBlockByChildNode(t);\n      this.Editor.Toolbar.moveAndOpen(c);\n    }\n    this.Editor.BlockSelection.clearSelection(e);\n  }\n  /**\n   * First touch on editor\n   * Fired before click\n   *\n   * Used to change current block — we need to do it before 'selectionChange' event.\n   * Also:\n   * - Move and show the Toolbar\n   * - Set a Caret\n   *\n   * @param event - touch or mouse event\n   */\n  documentTouched(e) {\n    let t = e.target;\n    if (t === this.nodes.redactor) {\n      const o = e instanceof MouseEvent ? e.clientX : e.touches[0].clientX, i = e instanceof MouseEvent ? e.clientY : e.touches[0].clientY;\n      t = document.elementFromPoint(o, i);\n    }\n    try {\n      this.Editor.BlockManager.setCurrentBlockByChildNode(t);\n    } catch {\n      this.Editor.RectangleSelection.isRectActivated() || this.Editor.Caret.setToTheLastBlock();\n    }\n    this.Editor.ReadOnly.isEnabled || this.Editor.Toolbar.moveAndOpen();\n  }\n  /**\n   * All clicks on the redactor zone\n   *\n   * @param {MouseEvent} event - click event\n   * @description\n   * - By clicks on the Editor's bottom zone:\n   *      - if last Block is empty, set a Caret to this\n   *      - otherwise, add a new empty Block and set a Caret to that\n   */\n  redactorClicked(e) {\n    if (!b.isCollapsed)\n      return;\n    const t = e.target, o = e.metaKey || e.ctrlKey;\n    if (d.isAnchor(t) && o) {\n      e.stopImmediatePropagation(), e.stopPropagation();\n      const i = t.getAttribute(\"href\"), s = oi(i);\n      ii(s);\n      return;\n    }\n    this.processBottomZoneClick(e);\n  }\n  /**\n   * Check if user clicks on the Editor's bottom zone:\n   *  - set caret to the last block\n   *  - or add new empty block\n   *\n   * @param event - click event\n   */\n  processBottomZoneClick(e) {\n    const t = this.Editor.BlockManager.getBlockByIndex(-1), o = d.offset(t.holder).bottom, i = e.pageY, { BlockSelection: s } = this.Editor;\n    if (e.target instanceof Element && e.target.isEqualNode(this.nodes.redactor) && /**\n    * If there is cross block selection started, target will be equal to redactor so we need additional check\n    */\n    !s.anyBlockSelected && /**\n    * Prevent caret jumping (to last block) when clicking between blocks\n    */\n    o < i) {\n      e.stopImmediatePropagation(), e.stopPropagation();\n      const { BlockManager: a, Caret: l, Toolbar: c } = this.Editor;\n      (!a.lastBlock.tool.isDefault || !a.lastBlock.isEmpty) && a.insertAtEnd(), l.setToTheLastBlock(), c.moveAndOpen(a.lastBlock);\n    }\n  }\n  /**\n   * Handle selection changes on mobile devices\n   * Uses for showing the Inline Toolbar\n   */\n  selectionChanged() {\n    const { CrossBlockSelection: e, BlockSelection: t } = this.Editor, o = b.anchorElement;\n    if (e.isCrossBlockSelectionStarted && t.anyBlockSelected && b.get().removeAllRanges(), !o) {\n      b.range || this.Editor.InlineToolbar.close();\n      return;\n    }\n    const i = o.closest(`.${R.CSS.content}`);\n    (i === null || i.closest(`.${b.CSS.editorWrapper}`) !== this.nodes.wrapper) && (this.Editor.InlineToolbar.containsNode(o) || this.Editor.InlineToolbar.close(), !(o.dataset.inlineToolbar === \"true\")) || (this.Editor.BlockManager.currentBlock || this.Editor.BlockManager.setCurrentBlockByChildNode(o), this.Editor.InlineToolbar.tryToShow(!0));\n  }\n  /**\n   * Editor.js provides and ability to show placeholders for empty contenteditable elements\n   *\n   * This method watches for input and focus events and toggles 'data-empty' attribute\n   * to workaroud the case, when inputs contains only <br>s and has no visible content\n   * Then, CSS could rely on this attribute to show placeholders\n   */\n  enableInputsEmptyMark() {\n    function e(t) {\n      const o = t.target;\n      Do(o);\n    }\n    this.readOnlyMutableListeners.on(this.nodes.wrapper, \"input\", e), this.readOnlyMutableListeners.on(this.nodes.wrapper, \"focusin\", e), this.readOnlyMutableListeners.on(this.nodes.wrapper, \"focusout\", e);\n  }\n}\nconst Oa = {\n  // API Modules\n  BlocksAPI: gi,\n  CaretAPI: bi,\n  EventsAPI: vi,\n  I18nAPI: kt,\n  API: ki,\n  InlineToolbarAPI: yi,\n  ListenersAPI: wi,\n  NotifierAPI: Ci,\n  ReadOnlyAPI: Ti,\n  SanitizerAPI: Li,\n  SaverAPI: Pi,\n  SelectionAPI: Ni,\n  ToolsAPI: Ri,\n  StylesAPI: Di,\n  ToolbarAPI: Fi,\n  TooltipAPI: Ui,\n  UiAPI: Wi,\n  // Toolbar Modules\n  BlockSettings: ms,\n  Toolbar: Bs,\n  InlineToolbar: Cs,\n  // Modules\n  BlockEvents: na,\n  BlockManager: ra,\n  BlockSelection: aa,\n  Caret: Ye,\n  CrossBlockSelection: la,\n  DragNDrop: ca,\n  ModificationsObserver: ha,\n  Paste: pa,\n  ReadOnly: fa,\n  RectangleSelection: Be,\n  Renderer: ga,\n  Saver: ma,\n  Tools: Wn,\n  UI: Ia\n};\nclass _a {\n  /**\n   * @param {EditorConfig} config - user configuration\n   */\n  constructor(e) {\n    this.moduleInstances = {}, this.eventsDispatcher = new Oe();\n    let t, o;\n    this.isReady = new Promise((i, s) => {\n      t = i, o = s;\n    }), Promise.resolve().then(async () => {\n      this.configuration = e, this.validate(), this.init(), await this.start(), await this.render();\n      const { BlockManager: i, Caret: s, UI: r, ModificationsObserver: a } = this.moduleInstances;\n      r.checkEmptiness(), a.enable(), this.configuration.autofocus === !0 && this.configuration.readOnly !== !0 && s.setToBlock(i.blocks[0], s.positions.START), t();\n    }).catch((i) => {\n      S(`Editor.js is not ready because of ${i}`, \"error\"), o(i);\n    });\n  }\n  /**\n   * Setting for configuration\n   *\n   * @param {EditorConfig|string} config - Editor's config to set\n   */\n  set configuration(e) {\n    var o, i;\n    D(e) ? this.config = {\n      ...e\n    } : this.config = {\n      holder: e\n    }, ht(!!this.config.holderId, \"config.holderId\", \"config.holder\"), this.config.holderId && !this.config.holder && (this.config.holder = this.config.holderId, this.config.holderId = null), this.config.holder == null && (this.config.holder = \"editorjs\"), this.config.logLevel || (this.config.logLevel = Lo.VERBOSE), Zn(this.config.logLevel), ht(!!this.config.initialBlock, \"config.initialBlock\", \"config.defaultBlock\"), this.config.defaultBlock = this.config.defaultBlock || this.config.initialBlock || \"paragraph\", this.config.minHeight = this.config.minHeight !== void 0 ? this.config.minHeight : 300;\n    const t = {\n      type: this.config.defaultBlock,\n      data: {}\n    };\n    this.config.placeholder = this.config.placeholder || !1, this.config.sanitizer = this.config.sanitizer || {\n      p: !0,\n      b: !0,\n      a: !0\n    }, this.config.hideToolbar = this.config.hideToolbar ? this.config.hideToolbar : !1, this.config.tools = this.config.tools || {}, this.config.i18n = this.config.i18n || {}, this.config.data = this.config.data || { blocks: [] }, this.config.onReady = this.config.onReady || (() => {\n    }), this.config.onChange = this.config.onChange || (() => {\n    }), this.config.inlineToolbar = this.config.inlineToolbar !== void 0 ? this.config.inlineToolbar : !0, (V(this.config.data) || !this.config.data.blocks || this.config.data.blocks.length === 0) && (this.config.data = { blocks: [t] }), this.config.readOnly = this.config.readOnly || !1, (o = this.config.i18n) != null && o.messages && z.setDictionary(this.config.i18n.messages), this.config.i18n.direction = ((i = this.config.i18n) == null ? void 0 : i.direction) || \"ltr\";\n  }\n  /**\n   * Returns private property\n   *\n   * @returns {EditorConfig}\n   */\n  get configuration() {\n    return this.config;\n  }\n  /**\n   * Checks for required fields in Editor's config\n   */\n  validate() {\n    const { holderId: e, holder: t } = this.config;\n    if (e && t)\n      throw Error(\"«holderId» and «holder» param can't assign at the same time.\");\n    if (te(t) && !d.get(t))\n      throw Error(`element with ID «${t}» is missing. Pass correct holder's ID.`);\n    if (t && D(t) && !d.isElement(t))\n      throw Error(\"«holder» value must be an Element node\");\n  }\n  /**\n   * Initializes modules:\n   *  - make and save instances\n   *  - configure\n   */\n  init() {\n    this.constructModules(), this.configureModules();\n  }\n  /**\n   * Start Editor!\n   *\n   * Get list of modules that needs to be prepared and return a sequence (Promise)\n   *\n   * @returns {Promise<void>}\n   */\n  async start() {\n    await [\n      \"Tools\",\n      \"UI\",\n      \"BlockManager\",\n      \"Paste\",\n      \"BlockSelection\",\n      \"RectangleSelection\",\n      \"CrossBlockSelection\",\n      \"ReadOnly\"\n    ].reduce(\n      (t, o) => t.then(async () => {\n        try {\n          await this.moduleInstances[o].prepare();\n        } catch (i) {\n          if (i instanceof Ho)\n            throw new Error(i.message);\n          S(`Module ${o} was skipped because of %o`, \"warn\", i);\n        }\n      }),\n      Promise.resolve()\n    );\n  }\n  /**\n   * Render initial data\n   */\n  render() {\n    return this.moduleInstances.Renderer.render(this.config.data.blocks);\n  }\n  /**\n   * Make modules instances and save it to the @property this.moduleInstances\n   */\n  constructModules() {\n    Object.entries(Oa).forEach(([e, t]) => {\n      try {\n        this.moduleInstances[e] = new t({\n          config: this.configuration,\n          eventsDispatcher: this.eventsDispatcher\n        });\n      } catch (o) {\n        S(\"[constructModules]\", `Module ${e} skipped because`, \"error\", o);\n      }\n    });\n  }\n  /**\n   * Modules instances configuration:\n   *  - pass other modules to the 'state' property\n   *  - ...\n   */\n  configureModules() {\n    for (const e in this.moduleInstances)\n      Object.prototype.hasOwnProperty.call(this.moduleInstances, e) && (this.moduleInstances[e].state = this.getModulesDiff(e));\n  }\n  /**\n   * Return modules without passed name\n   *\n   * @param {string} name - module for witch modules difference should be calculated\n   */\n  getModulesDiff(e) {\n    const t = {};\n    for (const o in this.moduleInstances)\n      o !== e && (t[o] = this.moduleInstances[o]);\n    return t;\n  }\n}\n/**\n * Editor.js\n *\n * @license Apache-2.0\n * @see Editor.js <https://editorjs.io>\n * @author CodeX Team <https://codex.so>\n */\nclass Aa {\n  /** Editor version */\n  static get version() {\n    return \"2.31.0-rc.7\";\n  }\n  /**\n   * @param {EditorConfig|string|undefined} [configuration] - user configuration\n   */\n  constructor(e) {\n    let t = () => {\n    };\n    D(e) && A(e.onReady) && (t = e.onReady);\n    const o = new _a(e);\n    this.isReady = o.isReady.then(() => {\n      this.exportAPI(o), t();\n    });\n  }\n  /**\n   * Export external API methods\n   *\n   * @param {Core} editor — Editor's instance\n   */\n  exportAPI(e) {\n    const t = [\"configuration\"], o = () => {\n      Object.values(e.moduleInstances).forEach((s) => {\n        A(s.destroy) && s.destroy(), s.listeners.removeAll();\n      }), zi(), e = null;\n      for (const s in this)\n        Object.prototype.hasOwnProperty.call(this, s) && delete this[s];\n      Object.setPrototypeOf(this, null);\n    };\n    t.forEach((s) => {\n      this[s] = e[s];\n    }), this.destroy = o, Object.setPrototypeOf(this, e.moduleInstances.API.methods), delete this.exportAPI, Object.entries({\n      blocks: {\n        clear: \"clear\",\n        render: \"render\"\n      },\n      caret: {\n        focus: \"focus\"\n      },\n      events: {\n        on: \"on\",\n        off: \"off\",\n        emit: \"emit\"\n      },\n      saver: {\n        save: \"save\"\n      }\n    }).forEach(([s, r]) => {\n      Object.entries(r).forEach(([a, l]) => {\n        this[l] = e.moduleInstances.API.methods[s][a];\n      });\n    });\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@editorjs/editorjs/dist/editorjs.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@editorjs/header/dist/header.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/@editorjs/header/dist/header.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ v)\n/* harmony export */ });\n(function(){\"use strict\";try{if(typeof document<\"u\"){var e=document.createElement(\"style\");e.appendChild(document.createTextNode(\".ce-header{padding:.6em 0 3px;margin:0;line-height:1.25em;outline:none}.ce-header p,.ce-header div{padding:0!important;margin:0!important}\")),document.head.appendChild(e)}}catch(n){console.error(\"vite-plugin-css-injected-by-js\",n)}})();\nconst a = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M19 17V10.2135C19 10.1287 18.9011 10.0824 18.836 10.1367L16 12.5\"/></svg>', l = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M16 11C16 10 19 9.5 19 12C19 13.9771 16.0684 13.9997 16.0012 16.8981C15.9999 16.9533 16.0448 17 16.1 17L19.3 17\"/></svg>', o = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M16 11C16 10.5 16.8323 10 17.6 10C18.3677 10 19.5 10.311 19.5 11.5C19.5 12.5315 18.7474 12.9022 18.548 12.9823C18.5378 12.9864 18.5395 13.0047 18.5503 13.0063C18.8115 13.0456 20 13.3065 20 14.8C20 16 19.5 17 17.8 17C17.8 17 16 17 16 16.3\"/></svg>', h = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M18 10L15.2834 14.8511C15.246 14.9178 15.294 15 15.3704 15C16.8489 15 18.7561 15 20.2 15M19 17C19 15.7187 19 14.8813 19 13.6\"/></svg>', d = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M16 15.9C16 15.9 16.3768 17 17.8 17C19.5 17 20 15.6199 20 14.7C20 12.7323 17.6745 12.0486 16.1635 12.9894C16.094 13.0327 16 12.9846 16 12.9027V10.1C16 10.0448 16.0448 10 16.1 10H19.8\"/></svg>', u = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M19.5 10C16.5 10.5 16 13.3285 16 15M16 15V15C16 16.1046 16.8954 17 18 17H18.3246C19.3251 17 20.3191 16.3492 20.2522 15.3509C20.0612 12.4958 16 12.6611 16 15Z\"/></svg>', g = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M9 7L9 12M9 17V12M9 12L15 12M15 7V12M15 17L15 12\"/></svg>';\n/**\n * Header block for the Editor.js.\n *\n * @author CodeX (team@ifmo.su)\n * @copyright CodeX 2018\n * @license MIT\n * @version 2.0.0\n */\nclass v {\n  constructor({ data: e, config: t, api: s, readOnly: r }) {\n    this.api = s, this.readOnly = r, this._settings = t, this._data = this.normalizeData(e), this._element = this.getTag();\n  }\n  /**\n   * Styles\n   */\n  get _CSS() {\n    return {\n      block: this.api.styles.block,\n      wrapper: \"ce-header\"\n    };\n  }\n  /**\n   * Check if data is valid\n   * \n   * @param {any} data - data to check\n   * @returns {data is HeaderData}\n   * @private\n   */\n  isHeaderData(e) {\n    return e.text !== void 0;\n  }\n  /**\n   * Normalize input data\n   *\n   * @param {HeaderData} data - saved data to process\n   *\n   * @returns {HeaderData}\n   * @private\n   */\n  normalizeData(e) {\n    const t = { text: \"\", level: this.defaultLevel.number };\n    return this.isHeaderData(e) && (t.text = e.text || \"\", e.level !== void 0 && !isNaN(parseInt(e.level.toString())) && (t.level = parseInt(e.level.toString()))), t;\n  }\n  /**\n   * Return Tool's view\n   *\n   * @returns {HTMLHeadingElement}\n   * @public\n   */\n  render() {\n    return this._element;\n  }\n  /**\n   * Returns header block tunes config\n   *\n   * @returns {Array}\n   */\n  renderSettings() {\n    return this.levels.map((e) => ({\n      icon: e.svg,\n      label: this.api.i18n.t(`Heading ${e.number}`),\n      onActivate: () => this.setLevel(e.number),\n      closeOnActivate: !0,\n      isActive: this.currentLevel.number === e.number,\n      render: () => document.createElement(\"div\")\n    }));\n  }\n  /**\n   * Callback for Block's settings buttons\n   *\n   * @param {number} level - level to set\n   */\n  setLevel(e) {\n    this.data = {\n      level: e,\n      text: this.data.text\n    };\n  }\n  /**\n   * Method that specified how to merge two Text blocks.\n   * Called by Editor.js by backspace at the beginning of the Block\n   *\n   * @param {HeaderData} data - saved data to merger with current block\n   * @public\n   */\n  merge(e) {\n    this._element.insertAdjacentHTML(\"beforeend\", e.text);\n  }\n  /**\n   * Validate Text block data:\n   * - check for emptiness\n   *\n   * @param {HeaderData} blockData — data received after saving\n   * @returns {boolean} false if saved data is not correct, otherwise true\n   * @public\n   */\n  validate(e) {\n    return e.text.trim() !== \"\";\n  }\n  /**\n   * Extract Tool's data from the view\n   *\n   * @param {HTMLHeadingElement} toolsContent - Text tools rendered view\n   * @returns {HeaderData} - saved data\n   * @public\n   */\n  save(e) {\n    return {\n      text: e.innerHTML,\n      level: this.currentLevel.number\n    };\n  }\n  /**\n   * Allow Header to be converted to/from other blocks\n   */\n  static get conversionConfig() {\n    return {\n      export: \"text\",\n      // use 'text' property for other blocks\n      import: \"text\"\n      // fill 'text' property from other block's export string\n    };\n  }\n  /**\n   * Sanitizer Rules\n   */\n  static get sanitize() {\n    return {\n      level: !1,\n      text: {}\n    };\n  }\n  /**\n   * Returns true to notify core that read-only is supported\n   *\n   * @returns {boolean}\n   */\n  static get isReadOnlySupported() {\n    return !0;\n  }\n  /**\n   * Get current Tools`s data\n   *\n   * @returns {HeaderData} Current data\n   * @private\n   */\n  get data() {\n    return this._data.text = this._element.innerHTML, this._data.level = this.currentLevel.number, this._data;\n  }\n  /**\n   * Store data in plugin:\n   * - at the this._data property\n   * - at the HTML\n   *\n   * @param {HeaderData} data — data to set\n   * @private\n   */\n  set data(e) {\n    if (this._data = this.normalizeData(e), e.level !== void 0 && this._element.parentNode) {\n      const t = this.getTag();\n      t.innerHTML = this._element.innerHTML, this._element.parentNode.replaceChild(t, this._element), this._element = t;\n    }\n    e.text !== void 0 && (this._element.innerHTML = this._data.text || \"\");\n  }\n  /**\n   * Get tag for target level\n   * By default returns second-leveled header\n   *\n   * @returns {HTMLElement}\n   */\n  getTag() {\n    const e = document.createElement(this.currentLevel.tag);\n    return e.innerHTML = this._data.text || \"\", e.classList.add(this._CSS.wrapper), e.contentEditable = this.readOnly ? \"false\" : \"true\", e.dataset.placeholder = this.api.i18n.t(this._settings.placeholder || \"\"), e;\n  }\n  /**\n   * Get current level\n   *\n   * @returns {level}\n   */\n  get currentLevel() {\n    let e = this.levels.find((t) => t.number === this._data.level);\n    return e || (e = this.defaultLevel), e;\n  }\n  /**\n   * Return default level\n   *\n   * @returns {level}\n   */\n  get defaultLevel() {\n    if (this._settings.defaultLevel) {\n      const e = this.levels.find((t) => t.number === this._settings.defaultLevel);\n      if (e)\n        return e;\n      console.warn(\"(ง'̀-'́)ง Heading Tool: the default level specified was not found in available levels\");\n    }\n    return this.levels[1];\n  }\n  /**\n   * @typedef {object} level\n   * @property {number} number - level number\n   * @property {string} tag - tag corresponds with level number\n   * @property {string} svg - icon\n   */\n  /**\n   * Available header levels\n   *\n   * @returns {level[]}\n   */\n  get levels() {\n    const e = [\n      {\n        number: 1,\n        tag: \"H1\",\n        svg: a\n      },\n      {\n        number: 2,\n        tag: \"H2\",\n        svg: l\n      },\n      {\n        number: 3,\n        tag: \"H3\",\n        svg: o\n      },\n      {\n        number: 4,\n        tag: \"H4\",\n        svg: h\n      },\n      {\n        number: 5,\n        tag: \"H5\",\n        svg: d\n      },\n      {\n        number: 6,\n        tag: \"H6\",\n        svg: u\n      }\n    ];\n    return this._settings.levels ? e.filter(\n      (t) => this._settings.levels.includes(t.number)\n    ) : e;\n  }\n  /**\n   * Handle H1-H6 tags on paste to substitute it with header Tool\n   *\n   * @param {PasteEvent} event - event with pasted content\n   */\n  onPaste(e) {\n    const t = e.detail;\n    if (\"data\" in t) {\n      const s = t.data;\n      let r = this.defaultLevel.number;\n      switch (s.tagName) {\n        case \"H1\":\n          r = 1;\n          break;\n        case \"H2\":\n          r = 2;\n          break;\n        case \"H3\":\n          r = 3;\n          break;\n        case \"H4\":\n          r = 4;\n          break;\n        case \"H5\":\n          r = 5;\n          break;\n        case \"H6\":\n          r = 6;\n          break;\n      }\n      this._settings.levels && (r = this._settings.levels.reduce((n, i) => Math.abs(i - r) < Math.abs(n - r) ? i : n)), this.data = {\n        level: r,\n        text: s.innerHTML\n      };\n    }\n  }\n  /**\n   * Used by Editor.js paste handling API.\n   * Provides configuration to handle H1-H6 tags.\n   *\n   * @returns {{handler: (function(HTMLElement): {text: string}), tags: string[]}}\n   */\n  static get pasteConfig() {\n    return {\n      tags: [\"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\"]\n    };\n  }\n  /**\n   * Get Tool toolbox settings\n   * icon - Tool icon's SVG\n   * title - title to show in toolbox\n   *\n   * @returns {{icon: string, title: string}}\n   */\n  static get toolbox() {\n    return {\n      icon: g,\n      title: \"Heading\"\n    };\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@editorjs/header/dist/header.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@editorjs/image/dist/image.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@editorjs/image/dist/image.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ P)\n/* harmony export */ });\n(function(){\"use strict\";try{if(typeof document<\"u\"){var o=document.createElement(\"style\");o.appendChild(document.createTextNode('.image-tool{--bg-color: #cdd1e0;--front-color: #388ae5;--border-color: #e8e8eb}.image-tool__image{border-radius:3px;overflow:hidden;margin-bottom:10px}.image-tool__image-picture{max-width:100%;vertical-align:bottom;display:block}.image-tool__image-preloader{width:50px;height:50px;border-radius:50%;background-size:cover;margin:auto;position:relative;background-color:var(--bg-color);background-position:center center}.image-tool__image-preloader:after{content:\"\";position:absolute;z-index:3;width:60px;height:60px;border-radius:50%;border:2px solid var(--bg-color);border-top-color:var(--front-color);left:50%;top:50%;margin-top:-30px;margin-left:-30px;animation:image-preloader-spin 2s infinite linear;box-sizing:border-box}.image-tool__caption{display:none}.image-tool__caption[contentEditable=true][data-placeholder]:before{position:absolute!important;content:attr(data-placeholder);color:#707684;font-weight:400;display:none}.image-tool__caption[contentEditable=true][data-placeholder]:empty:before{display:block}.image-tool__caption[contentEditable=true][data-placeholder]:empty:focus:before{display:none}.image-tool--empty .image-tool__image{display:none}.image-tool--empty .image-tool__caption,.image-tool--uploading .image-tool__caption{display:none!important}.image-tool .cdx-button{display:flex;align-items:center;justify-content:center}.image-tool .cdx-button svg{height:auto;margin:0 6px 0 0}.image-tool--filled .cdx-button,.image-tool--filled .image-tool__image-preloader{display:none}.image-tool--uploading .image-tool__image{min-height:200px;display:flex;border:1px solid var(--border-color);background-color:#fff}.image-tool--uploading .image-tool__image-picture,.image-tool--uploading .cdx-button{display:none}.image-tool--withBorder .image-tool__image{border:1px solid var(--border-color)}.image-tool--withBackground .image-tool__image{padding:15px;background:var(--bg-color)}.image-tool--withBackground .image-tool__image-picture{max-width:60%;margin:0 auto}.image-tool--stretched .image-tool__image-picture{width:100%}.image-tool--caption .image-tool__caption{display:block}@keyframes image-preloader-spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}')),document.head.appendChild(o)}}catch(e){console.error(\"vite-plugin-css-injected-by-js\",e)}})();\nconst R = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M11 19V19C9.13623 19 8.20435 19 7.46927 18.6955C6.48915 18.2895 5.71046 17.5108 5.30448 16.5307C5 15.7956 5 14.8638 5 13V12C5 9.19108 5 7.78661 5.67412 6.77772C5.96596 6.34096 6.34096 5.96596 6.77772 5.67412C7.78661 5 9.19108 5 12 5H13.5C14.8956 5 15.5933 5 16.1611 5.17224C17.4395 5.56004 18.44 6.56046 18.8278 7.83886C19 8.40666 19 9.10444 19 10.5V10.5\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M16 13V16M16 19V16M19 16H16M16 16H13\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6.5 17.5L17.5 6.5\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M18.9919 10.5H19.0015\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10.9919 19H11.0015\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13L13 5\"/></svg>', I = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M18.9919 9.5H19.0015\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M14.5 5H14.5096\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M14.625 5H15C17.2091 5 19 6.79086 19 9V9.375\"/><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M9.375 5L9 5C6.79086 5 5 6.79086 5 9V9.375\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9.3725 5H9.38207\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 9.5H5.00957\"/><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M9.375 19H9C6.79086 19 5 17.2091 5 15V14.625\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9.3725 19H9.38207\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 14.55H5.00957\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M16 13V16M16 19V16M19 16H16M16 16H13\"/></svg>', L = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><rect width=\"14\" height=\"14\" x=\"5\" y=\"5\" stroke=\"currentColor\" stroke-width=\"2\" rx=\"4\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5.13968 15.32L8.69058 11.5661C9.02934 11.2036 9.48873 11 9.96774 11C10.4467 11 10.9061 11.2036 11.2449 11.5661L15.3871 16M13.5806 14.0664L15.0132 12.533C15.3519 12.1705 15.8113 11.9668 16.2903 11.9668C16.7693 11.9668 17.2287 12.1705 17.5675 12.533L18.841 13.9634\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13.7778 9.33331H13.7867\"/></svg>', x = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M17 9L20 12L17 15\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M14 12H20\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M7 9L4 12L7 15\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 12H10\"/></svg>', B = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M8 9V7.2C8 7.08954 8.08954 7 8.2 7L12 7M16 9V7.2C16 7.08954 15.9105 7 15.8 7L12 7M12 7L12 17M12 17H10M12 17H14\"/></svg>';\nfunction M(C, i = null, a = {}) {\n  const s = document.createElement(C);\n  Array.isArray(i) ? s.classList.add(...i) : i !== null && s.classList.add(i);\n  for (const r in a)\n    a.hasOwnProperty(r) && (s[r] = a[r]);\n  return s;\n}\nvar S = /* @__PURE__ */ ((C) => (C.Empty = \"empty\", C.Uploading = \"uploading\", C.Filled = \"filled\", C))(S || {});\nclass U {\n  /**\n   * @param ui - image tool Ui module\n   * @param ui.api - Editor.js API\n   * @param ui.config - user config\n   * @param ui.onSelectFile - callback for clicks on Select file button\n   * @param ui.readOnly - read-only mode flag\n   */\n  constructor({ api: i, config: a, onSelectFile: s, readOnly: r }) {\n    this.api = i, this.config = a, this.onSelectFile = s, this.readOnly = r, this.nodes = {\n      wrapper: M(\"div\", [this.CSS.baseClass, this.CSS.wrapper]),\n      imageContainer: M(\"div\", [this.CSS.imageContainer]),\n      fileButton: this.createFileButton(),\n      imageEl: void 0,\n      imagePreloader: M(\"div\", this.CSS.imagePreloader),\n      caption: M(\"div\", [this.CSS.input, this.CSS.caption], {\n        contentEditable: !this.readOnly\n      })\n    }, this.nodes.caption.dataset.placeholder = this.config.captionPlaceholder, this.nodes.imageContainer.appendChild(this.nodes.imagePreloader), this.nodes.wrapper.appendChild(this.nodes.imageContainer), this.nodes.wrapper.appendChild(this.nodes.caption), this.nodes.wrapper.appendChild(this.nodes.fileButton);\n  }\n  /**\n   * Apply visual representation of activated tune\n   * @param tuneName - one of available tunes {@link Tunes.tunes}\n   * @param status - true for enable, false for disable\n   */\n  applyTune(i, a) {\n    this.nodes.wrapper.classList.toggle(`${this.CSS.wrapper}--${i}`, a);\n  }\n  /**\n   * Renders tool UI\n   * @param toolData - saved tool data\n   */\n  render(i) {\n    return i.file === void 0 || Object.keys(i.file).length === 0 ? this.toggleStatus(\n      \"empty\"\n      /* Empty */\n    ) : this.toggleStatus(\n      \"uploading\"\n      /* Uploading */\n    ), this.nodes.wrapper;\n  }\n  /**\n   * Shows uploading preloader\n   * @param src - preview source\n   */\n  showPreloader(i) {\n    this.nodes.imagePreloader.style.backgroundImage = `url(${i})`, this.toggleStatus(\n      \"uploading\"\n      /* Uploading */\n    );\n  }\n  /**\n   * Hide uploading preloader\n   */\n  hidePreloader() {\n    this.nodes.imagePreloader.style.backgroundImage = \"\", this.toggleStatus(\n      \"empty\"\n      /* Empty */\n    );\n  }\n  /**\n   * Shows an image\n   * @param url - image source\n   */\n  fillImage(i) {\n    const a = /\\.mp4$/.test(i) ? \"VIDEO\" : \"IMG\", s = {\n      src: i\n    };\n    let r = \"load\";\n    a === \"VIDEO\" && (s.autoplay = !0, s.loop = !0, s.muted = !0, s.playsinline = !0, r = \"loadeddata\"), this.nodes.imageEl = M(a, this.CSS.imageEl, s), this.nodes.imageEl.addEventListener(r, () => {\n      this.toggleStatus(\n        \"filled\"\n        /* Filled */\n      ), this.nodes.imagePreloader !== void 0 && (this.nodes.imagePreloader.style.backgroundImage = \"\");\n    }), this.nodes.imageContainer.appendChild(this.nodes.imageEl);\n  }\n  /**\n   * Shows caption input\n   * @param text - caption content text\n   */\n  fillCaption(i) {\n    this.nodes.caption !== void 0 && (this.nodes.caption.innerHTML = i);\n  }\n  /**\n   * CSS classes\n   */\n  get CSS() {\n    return {\n      baseClass: this.api.styles.block,\n      loading: this.api.styles.loader,\n      input: this.api.styles.input,\n      button: this.api.styles.button,\n      /**\n       * Tool's classes\n       */\n      wrapper: \"image-tool\",\n      imageContainer: \"image-tool__image\",\n      imagePreloader: \"image-tool__image-preloader\",\n      imageEl: \"image-tool__image-picture\",\n      caption: \"image-tool__caption\"\n    };\n  }\n  /**\n   * Creates upload-file button\n   */\n  createFileButton() {\n    const i = M(\"div\", [this.CSS.button]);\n    return i.innerHTML = this.config.buttonContent ?? `${L} ${this.api.i18n.t(\"Select an Image\")}`, i.addEventListener(\"click\", () => {\n      this.onSelectFile();\n    }), i;\n  }\n  /**\n   * Changes UI status\n   * @param status - see {@link Ui.status} constants\n   */\n  toggleStatus(i) {\n    for (const a in S)\n      Object.prototype.hasOwnProperty.call(S, a) && this.nodes.wrapper.classList.toggle(`${this.CSS.wrapper}--${S[a]}`, i === S[a]);\n  }\n}\nfunction D(C) {\n  return C && C.__esModule && Object.prototype.hasOwnProperty.call(C, \"default\") ? C.default : C;\n}\nvar H = { exports: {} };\n(function(C, i) {\n  (function(a, s) {\n    C.exports = s();\n  })(window, function() {\n    return function(a) {\n      var s = {};\n      function r(e) {\n        if (s[e]) return s[e].exports;\n        var o = s[e] = { i: e, l: !1, exports: {} };\n        return a[e].call(o.exports, o, o.exports, r), o.l = !0, o.exports;\n      }\n      return r.m = a, r.c = s, r.d = function(e, o, d) {\n        r.o(e, o) || Object.defineProperty(e, o, { enumerable: !0, get: d });\n      }, r.r = function(e) {\n        typeof Symbol < \"u\" && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, { value: \"Module\" }), Object.defineProperty(e, \"__esModule\", { value: !0 });\n      }, r.t = function(e, o) {\n        if (1 & o && (e = r(e)), 8 & o || 4 & o && typeof e == \"object\" && e && e.__esModule) return e;\n        var d = /* @__PURE__ */ Object.create(null);\n        if (r.r(d), Object.defineProperty(d, \"default\", { enumerable: !0, value: e }), 2 & o && typeof e != \"string\") for (var v in e) r.d(d, v, (function(l) {\n          return e[l];\n        }).bind(null, v));\n        return d;\n      }, r.n = function(e) {\n        var o = e && e.__esModule ? function() {\n          return e.default;\n        } : function() {\n          return e;\n        };\n        return r.d(o, \"a\", o), o;\n      }, r.o = function(e, o) {\n        return Object.prototype.hasOwnProperty.call(e, o);\n      }, r.p = \"\", r(r.s = 3);\n    }([function(a, s) {\n      var r;\n      r = /* @__PURE__ */ function() {\n        return this;\n      }();\n      try {\n        r = r || new Function(\"return this\")();\n      } catch {\n        typeof window == \"object\" && (r = window);\n      }\n      a.exports = r;\n    }, function(a, s, r) {\n      (function(e) {\n        var o = r(2), d = setTimeout;\n        function v() {\n        }\n        function l(n) {\n          if (!(this instanceof l)) throw new TypeError(\"Promises must be constructed via new\");\n          if (typeof n != \"function\") throw new TypeError(\"not a function\");\n          this._state = 0, this._handled = !1, this._value = void 0, this._deferreds = [], t(n, this);\n        }\n        function f(n, c) {\n          for (; n._state === 3; ) n = n._value;\n          n._state !== 0 ? (n._handled = !0, l._immediateFn(function() {\n            var u = n._state === 1 ? c.onFulfilled : c.onRejected;\n            if (u !== null) {\n              var g;\n              try {\n                g = u(n._value);\n              } catch (m) {\n                return void y(c.promise, m);\n              }\n              p(c.promise, g);\n            } else (n._state === 1 ? p : y)(c.promise, n._value);\n          })) : n._deferreds.push(c);\n        }\n        function p(n, c) {\n          try {\n            if (c === n) throw new TypeError(\"A promise cannot be resolved with itself.\");\n            if (c && (typeof c == \"object\" || typeof c == \"function\")) {\n              var u = c.then;\n              if (c instanceof l) return n._state = 3, n._value = c, void w(n);\n              if (typeof u == \"function\") return void t((g = u, m = c, function() {\n                g.apply(m, arguments);\n              }), n);\n            }\n            n._state = 1, n._value = c, w(n);\n          } catch (h) {\n            y(n, h);\n          }\n          var g, m;\n        }\n        function y(n, c) {\n          n._state = 2, n._value = c, w(n);\n        }\n        function w(n) {\n          n._state === 2 && n._deferreds.length === 0 && l._immediateFn(function() {\n            n._handled || l._unhandledRejectionFn(n._value);\n          });\n          for (var c = 0, u = n._deferreds.length; c < u; c++) f(n, n._deferreds[c]);\n          n._deferreds = null;\n        }\n        function b(n, c, u) {\n          this.onFulfilled = typeof n == \"function\" ? n : null, this.onRejected = typeof c == \"function\" ? c : null, this.promise = u;\n        }\n        function t(n, c) {\n          var u = !1;\n          try {\n            n(function(g) {\n              u || (u = !0, p(c, g));\n            }, function(g) {\n              u || (u = !0, y(c, g));\n            });\n          } catch (g) {\n            if (u) return;\n            u = !0, y(c, g);\n          }\n        }\n        l.prototype.catch = function(n) {\n          return this.then(null, n);\n        }, l.prototype.then = function(n, c) {\n          var u = new this.constructor(v);\n          return f(this, new b(n, c, u)), u;\n        }, l.prototype.finally = o.a, l.all = function(n) {\n          return new l(function(c, u) {\n            if (!n || n.length === void 0) throw new TypeError(\"Promise.all accepts an array\");\n            var g = Array.prototype.slice.call(n);\n            if (g.length === 0) return c([]);\n            var m = g.length;\n            function h(T, E) {\n              try {\n                if (E && (typeof E == \"object\" || typeof E == \"function\")) {\n                  var j = E.then;\n                  if (typeof j == \"function\") return void j.call(E, function(F) {\n                    h(T, F);\n                  }, u);\n                }\n                g[T] = E, --m == 0 && c(g);\n              } catch (F) {\n                u(F);\n              }\n            }\n            for (var k = 0; k < g.length; k++) h(k, g[k]);\n          });\n        }, l.resolve = function(n) {\n          return n && typeof n == \"object\" && n.constructor === l ? n : new l(function(c) {\n            c(n);\n          });\n        }, l.reject = function(n) {\n          return new l(function(c, u) {\n            u(n);\n          });\n        }, l.race = function(n) {\n          return new l(function(c, u) {\n            for (var g = 0, m = n.length; g < m; g++) n[g].then(c, u);\n          });\n        }, l._immediateFn = typeof e == \"function\" && function(n) {\n          e(n);\n        } || function(n) {\n          d(n, 0);\n        }, l._unhandledRejectionFn = function(n) {\n          typeof console < \"u\" && console && console.warn(\"Possible Unhandled Promise Rejection:\", n);\n        }, s.a = l;\n      }).call(this, r(5).setImmediate);\n    }, function(a, s, r) {\n      s.a = function(e) {\n        var o = this.constructor;\n        return this.then(function(d) {\n          return o.resolve(e()).then(function() {\n            return d;\n          });\n        }, function(d) {\n          return o.resolve(e()).then(function() {\n            return o.reject(d);\n          });\n        });\n      };\n    }, function(a, s, r) {\n      function e(t) {\n        return (e = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(n) {\n          return typeof n;\n        } : function(n) {\n          return n && typeof Symbol == \"function\" && n.constructor === Symbol && n !== Symbol.prototype ? \"symbol\" : typeof n;\n        })(t);\n      }\n      r(4);\n      var o, d, v, l, f, p, y, w = r(8), b = (d = function(t) {\n        return new Promise(function(n, c) {\n          t = l(t), (t = f(t)).beforeSend && t.beforeSend();\n          var u = window.XMLHttpRequest ? new window.XMLHttpRequest() : new window.ActiveXObject(\"Microsoft.XMLHTTP\");\n          u.open(t.method, t.url), u.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\"), Object.keys(t.headers).forEach(function(m) {\n            var h = t.headers[m];\n            u.setRequestHeader(m, h);\n          });\n          var g = t.ratio;\n          u.upload.addEventListener(\"progress\", function(m) {\n            var h = Math.round(m.loaded / m.total * 100), k = Math.ceil(h * g / 100);\n            t.progress(Math.min(k, 100));\n          }, !1), u.addEventListener(\"progress\", function(m) {\n            var h = Math.round(m.loaded / m.total * 100), k = Math.ceil(h * (100 - g) / 100) + g;\n            t.progress(Math.min(k, 100));\n          }, !1), u.onreadystatechange = function() {\n            if (u.readyState === 4) {\n              var m = u.response;\n              try {\n                m = JSON.parse(m);\n              } catch {\n              }\n              var h = w.parseHeaders(u.getAllResponseHeaders()), k = { body: m, code: u.status, headers: h };\n              y(u.status) ? n(k) : c(k);\n            }\n          }, u.send(t.data);\n        });\n      }, v = function(t) {\n        return t.method = \"POST\", d(t);\n      }, l = function() {\n        var t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        if (t.url && typeof t.url != \"string\") throw new Error(\"Url must be a string\");\n        if (t.url = t.url || \"\", t.method && typeof t.method != \"string\") throw new Error(\"`method` must be a string or null\");\n        if (t.method = t.method ? t.method.toUpperCase() : \"GET\", t.headers && e(t.headers) !== \"object\") throw new Error(\"`headers` must be an object or null\");\n        if (t.headers = t.headers || {}, t.type && (typeof t.type != \"string\" || !Object.values(o).includes(t.type))) throw new Error(\"`type` must be taken from module's «contentType» library\");\n        if (t.progress && typeof t.progress != \"function\") throw new Error(\"`progress` must be a function or null\");\n        if (t.progress = t.progress || function(n) {\n        }, t.beforeSend = t.beforeSend || function(n) {\n        }, t.ratio && typeof t.ratio != \"number\") throw new Error(\"`ratio` must be a number\");\n        if (t.ratio < 0 || t.ratio > 100) throw new Error(\"`ratio` must be in a 0-100 interval\");\n        if (t.ratio = t.ratio || 90, t.accept && typeof t.accept != \"string\") throw new Error(\"`accept` must be a string with a list of allowed mime-types\");\n        if (t.accept = t.accept || \"*/*\", t.multiple && typeof t.multiple != \"boolean\") throw new Error(\"`multiple` must be a true or false\");\n        if (t.multiple = t.multiple || !1, t.fieldName && typeof t.fieldName != \"string\") throw new Error(\"`fieldName` must be a string\");\n        return t.fieldName = t.fieldName || \"files\", t;\n      }, f = function(t) {\n        switch (t.method) {\n          case \"GET\":\n            var n = p(t.data, o.URLENCODED);\n            delete t.data, t.url = /\\?/.test(t.url) ? t.url + \"&\" + n : t.url + \"?\" + n;\n            break;\n          case \"POST\":\n          case \"PUT\":\n          case \"DELETE\":\n          case \"UPDATE\":\n            var c = function() {\n              return (arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}).type || o.JSON;\n            }(t);\n            (w.isFormData(t.data) || w.isFormElement(t.data)) && (c = o.FORM), t.data = p(t.data, c), c !== b.contentType.FORM && (t.headers[\"content-type\"] = c);\n        }\n        return t;\n      }, p = function() {\n        var t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        switch (arguments.length > 1 ? arguments[1] : void 0) {\n          case o.URLENCODED:\n            return w.urlEncode(t);\n          case o.JSON:\n            return w.jsonEncode(t);\n          case o.FORM:\n            return w.formEncode(t);\n          default:\n            return t;\n        }\n      }, y = function(t) {\n        return t >= 200 && t < 300;\n      }, { contentType: o = { URLENCODED: \"application/x-www-form-urlencoded; charset=utf-8\", FORM: \"multipart/form-data\", JSON: \"application/json; charset=utf-8\" }, request: d, get: function(t) {\n        return t.method = \"GET\", d(t);\n      }, post: v, transport: function(t) {\n        return t = l(t), w.selectFiles(t).then(function(n) {\n          for (var c = new FormData(), u = 0; u < n.length; u++) c.append(t.fieldName, n[u], n[u].name);\n          w.isObject(t.data) && Object.keys(t.data).forEach(function(m) {\n            var h = t.data[m];\n            c.append(m, h);\n          });\n          var g = t.beforeSend;\n          return t.beforeSend = function() {\n            return g(n);\n          }, t.data = c, v(t);\n        });\n      }, selectFiles: function(t) {\n        return delete (t = l(t)).beforeSend, w.selectFiles(t);\n      } });\n      a.exports = b;\n    }, function(a, s, r) {\n      r.r(s);\n      var e = r(1);\n      window.Promise = window.Promise || e.a;\n    }, function(a, s, r) {\n      (function(e) {\n        var o = e !== void 0 && e || typeof self < \"u\" && self || window, d = Function.prototype.apply;\n        function v(l, f) {\n          this._id = l, this._clearFn = f;\n        }\n        s.setTimeout = function() {\n          return new v(d.call(setTimeout, o, arguments), clearTimeout);\n        }, s.setInterval = function() {\n          return new v(d.call(setInterval, o, arguments), clearInterval);\n        }, s.clearTimeout = s.clearInterval = function(l) {\n          l && l.close();\n        }, v.prototype.unref = v.prototype.ref = function() {\n        }, v.prototype.close = function() {\n          this._clearFn.call(o, this._id);\n        }, s.enroll = function(l, f) {\n          clearTimeout(l._idleTimeoutId), l._idleTimeout = f;\n        }, s.unenroll = function(l) {\n          clearTimeout(l._idleTimeoutId), l._idleTimeout = -1;\n        }, s._unrefActive = s.active = function(l) {\n          clearTimeout(l._idleTimeoutId);\n          var f = l._idleTimeout;\n          f >= 0 && (l._idleTimeoutId = setTimeout(function() {\n            l._onTimeout && l._onTimeout();\n          }, f));\n        }, r(6), s.setImmediate = typeof self < \"u\" && self.setImmediate || e !== void 0 && e.setImmediate || this && this.setImmediate, s.clearImmediate = typeof self < \"u\" && self.clearImmediate || e !== void 0 && e.clearImmediate || this && this.clearImmediate;\n      }).call(this, r(0));\n    }, function(a, s, r) {\n      (function(e, o) {\n        (function(d, v) {\n          if (!d.setImmediate) {\n            var l, f, p, y, w, b = 1, t = {}, n = !1, c = d.document, u = Object.getPrototypeOf && Object.getPrototypeOf(d);\n            u = u && u.setTimeout ? u : d, {}.toString.call(d.process) === \"[object process]\" ? l = function(h) {\n              o.nextTick(function() {\n                m(h);\n              });\n            } : function() {\n              if (d.postMessage && !d.importScripts) {\n                var h = !0, k = d.onmessage;\n                return d.onmessage = function() {\n                  h = !1;\n                }, d.postMessage(\"\", \"*\"), d.onmessage = k, h;\n              }\n            }() ? (y = \"setImmediate$\" + Math.random() + \"$\", w = function(h) {\n              h.source === d && typeof h.data == \"string\" && h.data.indexOf(y) === 0 && m(+h.data.slice(y.length));\n            }, d.addEventListener ? d.addEventListener(\"message\", w, !1) : d.attachEvent(\"onmessage\", w), l = function(h) {\n              d.postMessage(y + h, \"*\");\n            }) : d.MessageChannel ? ((p = new MessageChannel()).port1.onmessage = function(h) {\n              m(h.data);\n            }, l = function(h) {\n              p.port2.postMessage(h);\n            }) : c && \"onreadystatechange\" in c.createElement(\"script\") ? (f = c.documentElement, l = function(h) {\n              var k = c.createElement(\"script\");\n              k.onreadystatechange = function() {\n                m(h), k.onreadystatechange = null, f.removeChild(k), k = null;\n              }, f.appendChild(k);\n            }) : l = function(h) {\n              setTimeout(m, 0, h);\n            }, u.setImmediate = function(h) {\n              typeof h != \"function\" && (h = new Function(\"\" + h));\n              for (var k = new Array(arguments.length - 1), T = 0; T < k.length; T++) k[T] = arguments[T + 1];\n              var E = { callback: h, args: k };\n              return t[b] = E, l(b), b++;\n            }, u.clearImmediate = g;\n          }\n          function g(h) {\n            delete t[h];\n          }\n          function m(h) {\n            if (n) setTimeout(m, 0, h);\n            else {\n              var k = t[h];\n              if (k) {\n                n = !0;\n                try {\n                  (function(T) {\n                    var E = T.callback, j = T.args;\n                    switch (j.length) {\n                      case 0:\n                        E();\n                        break;\n                      case 1:\n                        E(j[0]);\n                        break;\n                      case 2:\n                        E(j[0], j[1]);\n                        break;\n                      case 3:\n                        E(j[0], j[1], j[2]);\n                        break;\n                      default:\n                        E.apply(v, j);\n                    }\n                  })(k);\n                } finally {\n                  g(h), n = !1;\n                }\n              }\n            }\n          }\n        })(typeof self > \"u\" ? e === void 0 ? this : e : self);\n      }).call(this, r(0), r(7));\n    }, function(a, s) {\n      var r, e, o = a.exports = {};\n      function d() {\n        throw new Error(\"setTimeout has not been defined\");\n      }\n      function v() {\n        throw new Error(\"clearTimeout has not been defined\");\n      }\n      function l(u) {\n        if (r === setTimeout) return setTimeout(u, 0);\n        if ((r === d || !r) && setTimeout) return r = setTimeout, setTimeout(u, 0);\n        try {\n          return r(u, 0);\n        } catch {\n          try {\n            return r.call(null, u, 0);\n          } catch {\n            return r.call(this, u, 0);\n          }\n        }\n      }\n      (function() {\n        try {\n          r = typeof setTimeout == \"function\" ? setTimeout : d;\n        } catch {\n          r = d;\n        }\n        try {\n          e = typeof clearTimeout == \"function\" ? clearTimeout : v;\n        } catch {\n          e = v;\n        }\n      })();\n      var f, p = [], y = !1, w = -1;\n      function b() {\n        y && f && (y = !1, f.length ? p = f.concat(p) : w = -1, p.length && t());\n      }\n      function t() {\n        if (!y) {\n          var u = l(b);\n          y = !0;\n          for (var g = p.length; g; ) {\n            for (f = p, p = []; ++w < g; ) f && f[w].run();\n            w = -1, g = p.length;\n          }\n          f = null, y = !1, function(m) {\n            if (e === clearTimeout) return clearTimeout(m);\n            if ((e === v || !e) && clearTimeout) return e = clearTimeout, clearTimeout(m);\n            try {\n              e(m);\n            } catch {\n              try {\n                return e.call(null, m);\n              } catch {\n                return e.call(this, m);\n              }\n            }\n          }(u);\n        }\n      }\n      function n(u, g) {\n        this.fun = u, this.array = g;\n      }\n      function c() {\n      }\n      o.nextTick = function(u) {\n        var g = new Array(arguments.length - 1);\n        if (arguments.length > 1) for (var m = 1; m < arguments.length; m++) g[m - 1] = arguments[m];\n        p.push(new n(u, g)), p.length !== 1 || y || l(t);\n      }, n.prototype.run = function() {\n        this.fun.apply(null, this.array);\n      }, o.title = \"browser\", o.browser = !0, o.env = {}, o.argv = [], o.version = \"\", o.versions = {}, o.on = c, o.addListener = c, o.once = c, o.off = c, o.removeListener = c, o.removeAllListeners = c, o.emit = c, o.prependListener = c, o.prependOnceListener = c, o.listeners = function(u) {\n        return [];\n      }, o.binding = function(u) {\n        throw new Error(\"process.binding is not supported\");\n      }, o.cwd = function() {\n        return \"/\";\n      }, o.chdir = function(u) {\n        throw new Error(\"process.chdir is not supported\");\n      }, o.umask = function() {\n        return 0;\n      };\n    }, function(a, s, r) {\n      function e(d, v) {\n        for (var l = 0; l < v.length; l++) {\n          var f = v[l];\n          f.enumerable = f.enumerable || !1, f.configurable = !0, \"value\" in f && (f.writable = !0), Object.defineProperty(d, f.key, f);\n        }\n      }\n      var o = r(9);\n      a.exports = function() {\n        function d() {\n          (function(p, y) {\n            if (!(p instanceof y)) throw new TypeError(\"Cannot call a class as a function\");\n          })(this, d);\n        }\n        var v, l, f;\n        return v = d, f = [{ key: \"urlEncode\", value: function(p) {\n          return o(p);\n        } }, { key: \"jsonEncode\", value: function(p) {\n          return JSON.stringify(p);\n        } }, { key: \"formEncode\", value: function(p) {\n          if (this.isFormData(p)) return p;\n          if (this.isFormElement(p)) return new FormData(p);\n          if (this.isObject(p)) {\n            var y = new FormData();\n            return Object.keys(p).forEach(function(w) {\n              var b = p[w];\n              y.append(w, b);\n            }), y;\n          }\n          throw new Error(\"`data` must be an instance of Object, FormData or <FORM> HTMLElement\");\n        } }, { key: \"isObject\", value: function(p) {\n          return Object.prototype.toString.call(p) === \"[object Object]\";\n        } }, { key: \"isFormData\", value: function(p) {\n          return p instanceof FormData;\n        } }, { key: \"isFormElement\", value: function(p) {\n          return p instanceof HTMLFormElement;\n        } }, { key: \"selectFiles\", value: function() {\n          var p = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n          return new Promise(function(y, w) {\n            var b = document.createElement(\"INPUT\");\n            b.type = \"file\", p.multiple && b.setAttribute(\"multiple\", \"multiple\"), p.accept && b.setAttribute(\"accept\", p.accept), b.style.display = \"none\", document.body.appendChild(b), b.addEventListener(\"change\", function(t) {\n              var n = t.target.files;\n              y(n), document.body.removeChild(b);\n            }, !1), b.click();\n          });\n        } }, { key: \"parseHeaders\", value: function(p) {\n          var y = p.trim().split(/[\\r\\n]+/), w = {};\n          return y.forEach(function(b) {\n            var t = b.split(\": \"), n = t.shift(), c = t.join(\": \");\n            n && (w[n] = c);\n          }), w;\n        } }], (l = null) && e(v.prototype, l), f && e(v, f), d;\n      }();\n    }, function(a, s) {\n      var r = function(o) {\n        return encodeURIComponent(o).replace(/[!'()*]/g, escape).replace(/%20/g, \"+\");\n      }, e = function(o, d, v, l) {\n        return d = d || null, v = v || \"&\", l = l || null, o ? function(f) {\n          for (var p = new Array(), y = 0; y < f.length; y++) f[y] && p.push(f[y]);\n          return p;\n        }(Object.keys(o).map(function(f) {\n          var p, y, w = f;\n          if (l && (w = l + \"[\" + w + \"]\"), typeof o[f] == \"object\" && o[f] !== null) p = e(o[f], null, v, w);\n          else {\n            d && (y = w, w = !isNaN(parseFloat(y)) && isFinite(y) ? d + Number(w) : w);\n            var b = o[f];\n            b = (b = (b = (b = b === !0 ? \"1\" : b) === !1 ? \"0\" : b) === 0 ? \"0\" : b) || \"\", p = r(w) + \"=\" + r(b);\n          }\n          return p;\n        })).join(v).replace(/[!'()*]/g, \"\") : \"\";\n      };\n      a.exports = e;\n    }]);\n  });\n})(H);\nvar q = H.exports;\nconst _ = /* @__PURE__ */ D(q);\nfunction O(C) {\n  return C !== void 0 && typeof C.then == \"function\";\n}\nclass A {\n  /**\n   * @param params - uploader module params\n   * @param params.config - image tool config\n   * @param params.onUpload - one callback for all uploading (file, url, d-n-d, pasting)\n   * @param params.onError - callback for uploading errors\n   */\n  constructor({ config: i, onUpload: a, onError: s }) {\n    this.config = i, this.onUpload = a, this.onError = s;\n  }\n  /**\n   * Handle clicks on the upload file button\n   * Fires ajax.transport()\n   * @param onPreview - callback fired when preview is ready\n   */\n  uploadSelectedFile({ onPreview: i }) {\n    const a = function(r) {\n      const e = new FileReader();\n      e.readAsDataURL(r), e.onload = (o) => {\n        i(o.target.result);\n      };\n    };\n    let s;\n    if (this.config.uploader && typeof this.config.uploader.uploadByFile == \"function\") {\n      const r = this.config.uploader.uploadByFile;\n      s = _.selectFiles({ accept: this.config.types ?? \"image/*\" }).then((e) => {\n        a(e[0]);\n        const o = r(e[0]);\n        return O(o) || console.warn(\"Custom uploader method uploadByFile should return a Promise\"), o;\n      });\n    } else\n      s = _.transport({\n        url: this.config.endpoints.byFile,\n        data: this.config.additionalRequestData,\n        accept: this.config.types ?? \"image/*\",\n        headers: this.config.additionalRequestHeaders,\n        beforeSend: (r) => {\n          a(r[0]);\n        },\n        fieldName: this.config.field ?? \"image\"\n      }).then((r) => r.body);\n    s.then((r) => {\n      this.onUpload(r);\n    }).catch((r) => {\n      this.onError(r);\n    });\n  }\n  /**\n   * Handle clicks on the upload file button\n   * Fires ajax.post()\n   * @param url - image source url\n   */\n  uploadByUrl(i) {\n    let a;\n    this.config.uploader && typeof this.config.uploader.uploadByUrl == \"function\" ? (a = this.config.uploader.uploadByUrl(i), O(a) || console.warn(\"Custom uploader method uploadByUrl should return a Promise\")) : a = _.post({\n      url: this.config.endpoints.byUrl,\n      data: Object.assign({\n        url: i\n      }, this.config.additionalRequestData),\n      type: _.contentType.JSON,\n      headers: this.config.additionalRequestHeaders\n    }).then((s) => s.body), a.then((s) => {\n      this.onUpload(s);\n    }).catch((s) => {\n      this.onError(s);\n    });\n  }\n  /**\n   * Handle clicks on the upload file button\n   * Fires ajax.post()\n   * @param file - file pasted by drag-n-drop\n   * @param onPreview - file pasted by drag-n-drop\n   */\n  uploadByFile(i, { onPreview: a }) {\n    const s = new FileReader();\n    s.readAsDataURL(i), s.onload = (e) => {\n      a(e.target.result);\n    };\n    let r;\n    if (this.config.uploader && typeof this.config.uploader.uploadByFile == \"function\")\n      r = this.config.uploader.uploadByFile(i), O(r) || console.warn(\"Custom uploader method uploadByFile should return a Promise\");\n    else {\n      const e = new FormData();\n      e.append(this.config.field ?? \"image\", i), this.config.additionalRequestData && Object.keys(this.config.additionalRequestData).length && Object.entries(this.config.additionalRequestData).forEach(([o, d]) => {\n        e.append(o, d);\n      }), r = _.post({\n        url: this.config.endpoints.byFile,\n        data: e,\n        type: _.contentType.JSON,\n        headers: this.config.additionalRequestHeaders\n      }).then((o) => o.body);\n    }\n    r.then((e) => {\n      this.onUpload(e);\n    }).catch((e) => {\n      this.onError(e);\n    });\n  }\n}\n/**\n * Image Tool for the Editor.js\n * @author CodeX <team@codex.so>\n * @license MIT\n * @see {@link https://github.com/editor-js/image}\n *\n * To developers.\n * To simplify Tool structure, we split it to 4 parts:\n *  1) index.ts — main Tool's interface, public API and methods for working with data\n *  2) uploader.ts — module that has methods for sending files via AJAX: from device, by URL or File pasting\n *  3) ui.ts — module for UI manipulations: render, showing preloader, etc\n *\n * For debug purposes there is a testing server\n * that can save uploaded files and return a Response {@link UploadResponseFormat}\n *\n *       $ node dev/server.js\n *\n * It will expose 8008 port, so you can pass http://localhost:8008 with the Tools config:\n *\n * image: {\n *   class: ImageTool,\n *   config: {\n *     endpoints: {\n *       byFile: 'http://localhost:8008/uploadFile',\n *       byUrl: 'http://localhost:8008/fetchUrl',\n *     }\n *   },\n * },\n */\nclass P {\n  /**\n   * @param tool - tool properties got from editor.js\n   * @param tool.data - previously saved data\n   * @param tool.config - user config for Tool\n   * @param tool.api - Editor.js API\n   * @param tool.readOnly - read-only mode flag\n   * @param tool.block - current Block API\n   */\n  constructor({ data: i, config: a, api: s, readOnly: r, block: e }) {\n    this.api = s, this.block = e, this.config = {\n      endpoints: a.endpoints,\n      additionalRequestData: a.additionalRequestData,\n      additionalRequestHeaders: a.additionalRequestHeaders,\n      field: a.field,\n      types: a.types,\n      captionPlaceholder: this.api.i18n.t(a.captionPlaceholder ?? \"Caption\"),\n      buttonContent: a.buttonContent,\n      uploader: a.uploader,\n      actions: a.actions,\n      features: a.features || {}\n    }, this.uploader = new A({\n      config: this.config,\n      onUpload: (o) => this.onUpload(o),\n      onError: (o) => this.uploadingFailed(o)\n    }), this.ui = new U({\n      api: s,\n      config: this.config,\n      onSelectFile: () => {\n        this.uploader.uploadSelectedFile({\n          onPreview: (o) => {\n            this.ui.showPreloader(o);\n          }\n        });\n      },\n      readOnly: r\n    }), this._data = {\n      caption: \"\",\n      withBorder: !1,\n      withBackground: !1,\n      stretched: !1,\n      file: {\n        url: \"\"\n      }\n    }, this.data = i;\n  }\n  /**\n   * Notify core that read-only mode is supported\n   */\n  static get isReadOnlySupported() {\n    return !0;\n  }\n  /**\n   * Get Tool toolbox settings\n   * icon - Tool icon's SVG\n   * title - title to show in toolbox\n   */\n  static get toolbox() {\n    return {\n      icon: L,\n      title: \"Image\"\n    };\n  }\n  /**\n   * Available image tools\n   */\n  static get tunes() {\n    return [\n      {\n        name: \"withBorder\",\n        icon: I,\n        title: \"With border\",\n        toggle: !0\n      },\n      {\n        name: \"stretched\",\n        icon: x,\n        title: \"Stretch image\",\n        toggle: !0\n      },\n      {\n        name: \"withBackground\",\n        icon: R,\n        title: \"With background\",\n        toggle: !0\n      }\n    ];\n  }\n  /**\n   * Renders Block content\n   */\n  render() {\n    var i, a, s;\n    return (((i = this.config.features) == null ? void 0 : i.caption) === !0 || ((a = this.config.features) == null ? void 0 : a.caption) === void 0 || ((s = this.config.features) == null ? void 0 : s.caption) === \"optional\" && this.data.caption) && this.ui.applyTune(\"caption\", !0), this.ui.render(this.data);\n  }\n  /**\n   * Validate data: check if Image exists\n   * @param savedData — data received after saving\n   * @returns false if saved data is not correct, otherwise true\n   */\n  validate(i) {\n    return !!i.file.url;\n  }\n  /**\n   * Return Block data\n   */\n  save() {\n    const i = this.ui.nodes.caption;\n    return this._data.caption = i.innerHTML, this.data;\n  }\n  /**\n   * Returns configuration for block tunes: add background, add border, stretch image\n   * @returns TunesMenuConfig\n   */\n  renderSettings() {\n    var r;\n    const i = P.tunes.concat(this.config.actions || []), a = {\n      border: \"withBorder\",\n      background: \"withBackground\",\n      stretch: \"stretched\",\n      caption: \"caption\"\n    };\n    return ((r = this.config.features) == null ? void 0 : r.caption) === \"optional\" && i.push({\n      name: \"caption\",\n      icon: B,\n      title: \"With caption\",\n      toggle: !0\n    }), i.filter((e) => {\n      var d, v;\n      const o = Object.keys(a).find((l) => a[l] === e.name);\n      return o === \"caption\" ? ((d = this.config.features) == null ? void 0 : d.caption) !== !1 : o == null || ((v = this.config.features) == null ? void 0 : v[o]) !== !1;\n    }).map((e) => ({\n      icon: e.icon,\n      label: this.api.i18n.t(e.title),\n      name: e.name,\n      toggle: e.toggle,\n      isActive: this.data[e.name],\n      onActivate: () => {\n        if (typeof e.action == \"function\") {\n          e.action(e.name);\n          return;\n        }\n        this.tuneToggled(e.name);\n      }\n    }));\n  }\n  /**\n   * Fires after clicks on the Toolbox Image Icon\n   * Initiates click on the Select File button\n   */\n  appendCallback() {\n    this.ui.nodes.fileButton.click();\n  }\n  /**\n   * Specify paste substitutes\n   * @see {@link https://github.com/codex-team/editor.js/blob/master/docs/tools.md#paste-handling}\n   */\n  static get pasteConfig() {\n    return {\n      /**\n       * Paste HTML into Editor\n       */\n      tags: [\n        {\n          img: { src: !0 }\n        }\n      ],\n      /**\n       * Paste URL of image into the Editor\n       */\n      patterns: {\n        image: /https?:\\/\\/\\S+\\.(gif|jpe?g|tiff|png|svg|webp)(\\?[a-z0-9=]*)?$/i\n      },\n      /**\n       * Drag n drop file from into the Editor\n       */\n      files: {\n        mimeTypes: [\"image/*\"]\n      }\n    };\n  }\n  /**\n   * Specify paste handlers\n   * @see {@link https://github.com/codex-team/editor.js/blob/master/docs/tools.md#paste-handling}\n   * @param event - editor.js custom paste event\n   *                              {@link https://github.com/codex-team/editor.js/blob/master/types/tools/paste-events.d.ts}\n   */\n  async onPaste(i) {\n    switch (i.type) {\n      case \"tag\": {\n        const a = i.detail.data;\n        if (/^blob:/.test(a.src)) {\n          const r = await (await fetch(a.src)).blob();\n          this.uploadFile(r);\n          break;\n        }\n        this.uploadUrl(a.src);\n        break;\n      }\n      case \"pattern\": {\n        const a = i.detail.data;\n        this.uploadUrl(a);\n        break;\n      }\n      case \"file\": {\n        const a = i.detail.file;\n        this.uploadFile(a);\n        break;\n      }\n    }\n  }\n  /**\n   * Private methods\n   * ̿̿ ̿̿ ̿̿ ̿'̿'\\̵͇̿̿\\з= ( ▀ ͜͞ʖ▀) =ε/̵͇̿̿/’̿’̿ ̿ ̿̿ ̿̿ ̿̿\n   */\n  /**\n   * Stores all Tool's data\n   * @param data - data in Image Tool format\n   */\n  set data(i) {\n    this.image = i.file, this._data.caption = i.caption || \"\", this.ui.fillCaption(this._data.caption), P.tunes.forEach(({ name: a }) => {\n      const s = typeof i[a] < \"u\" ? i[a] === !0 || i[a] === \"true\" : !1;\n      this.setTune(a, s);\n    });\n  }\n  /**\n   * Return Tool data\n   */\n  get data() {\n    return this._data;\n  }\n  /**\n   * Set new image file\n   * @param file - uploaded file data\n   */\n  set image(i) {\n    this._data.file = i || { url: \"\" }, i && i.url && this.ui.fillImage(i.url);\n  }\n  /**\n   * File uploading callback\n   * @param response - uploading server response\n   */\n  onUpload(i) {\n    i.success && i.file ? this.image = i.file : this.uploadingFailed(\"incorrect response: \" + JSON.stringify(i));\n  }\n  /**\n   * Handle uploader errors\n   * @param errorText - uploading error info\n   */\n  uploadingFailed(i) {\n    console.log(\"Image Tool: uploading failed because of\", i), this.api.notifier.show({\n      message: this.api.i18n.t(\"Couldn’t upload image. Please try another.\"),\n      style: \"error\"\n    }), this.ui.hidePreloader();\n  }\n  /**\n   * Callback fired when Block Tune is activated\n   * @param tuneName - tune that has been clicked\n   */\n  tuneToggled(i) {\n    this.setTune(i, !this._data[i]), i === \"caption\" && !this._data[i] && (this._data.caption = \"\", this.ui.fillCaption(\"\"));\n  }\n  /**\n   * Set one tune\n   * @param tuneName - {@link Tunes.tunes}\n   * @param value - tune state\n   */\n  setTune(i, a) {\n    this._data[i] = a, this.ui.applyTune(i, a), i === \"stretched\" && Promise.resolve().then(() => {\n      this.block.stretched = a;\n    }).catch((s) => {\n      console.error(s);\n    });\n  }\n  /**\n   * Show preloader and upload image file\n   * @param file - file that is currently uploading (from paste)\n   */\n  uploadFile(i) {\n    this.uploader.uploadByFile(i, {\n      onPreview: (a) => {\n        this.ui.showPreloader(a);\n      }\n    });\n  }\n  /**\n   * Show preloader and upload image by target url\n   * @param url - url pasted\n   */\n  uploadUrl(i) {\n    this.ui.showPreloader(i), this.uploader.uploadByUrl(i);\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGVkaXRvcmpzL2ltYWdlL2Rpc3QvaW1hZ2UubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxZQUFZLGFBQWEsSUFBSSx3QkFBd0Isc0NBQXNDLG1EQUFtRCxvQkFBb0IsdUJBQXVCLHdCQUF3QixtQkFBbUIsa0JBQWtCLGdCQUFnQixtQkFBbUIsMkJBQTJCLGVBQWUsc0JBQXNCLGNBQWMsNkJBQTZCLFdBQVcsWUFBWSxrQkFBa0Isc0JBQXNCLFlBQVksa0JBQWtCLGlDQUFpQyxrQ0FBa0MsbUNBQW1DLFdBQVcsa0JBQWtCLFVBQVUsV0FBVyxZQUFZLGtCQUFrQixpQ0FBaUMsb0NBQW9DLFNBQVMsUUFBUSxpQkFBaUIsa0JBQWtCLGtEQUFrRCxzQkFBc0IscUJBQXFCLGFBQWEsb0VBQW9FLDRCQUE0QiwrQkFBK0IsY0FBYyxnQkFBZ0IsYUFBYSwwRUFBMEUsY0FBYyxnRkFBZ0YsYUFBYSxzQ0FBc0MsYUFBYSxvRkFBb0YsdUJBQXVCLHdCQUF3QixhQUFhLG1CQUFtQix1QkFBdUIsNEJBQTRCLFlBQVksaUJBQWlCLGlGQUFpRixhQUFhLDBDQUEwQyxpQkFBaUIsYUFBYSxxQ0FBcUMsc0JBQXNCLHFGQUFxRixhQUFhLDJDQUEyQyxxQ0FBcUMsK0NBQStDLGFBQWEsMkJBQTJCLHVEQUF1RCxjQUFjLGNBQWMsa0RBQWtELFdBQVcsMENBQTBDLGNBQWMsZ0NBQWdDLEdBQUcsb0JBQW9CLEdBQUcsMEJBQTBCLGtDQUFrQyxTQUFTLG1EQUFtRDtBQUNuMkU7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0dBQStHO0FBQy9HO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsaURBQWlEO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLCtDQUErQztBQUMvQztBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsaUJBQWlCLElBQUksRUFBRTtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RCxFQUFFO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlELEdBQUcsRUFBRSxtQ0FBbUM7QUFDakc7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGlCQUFpQjtBQUMzQztBQUNBO0FBQ0E7QUFDQSwyRkFBMkYsaUJBQWlCLElBQUksS0FBSztBQUNySDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsd0JBQXdCO0FBQzNFLE9BQU87QUFDUCxvR0FBb0csaUJBQWlCLDRDQUE0QyxXQUFXO0FBQzVLLE9BQU87QUFDUDtBQUNBO0FBQ0EsMERBQTBELDBCQUEwQjtBQUNwRjtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGdCQUFnQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxtREFBbUQsT0FBTztBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLGFBQWE7QUFDYixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixjQUFjO0FBQzFDLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQSwwQ0FBMEMsT0FBTztBQUNqRCxXQUFXO0FBQ1gsU0FBUztBQUNUO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsdUVBQXVFO0FBQ3ZFO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0EsU0FBUztBQUNULFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUZBQXlGO0FBQ3pGLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU8sSUFBSSxtQkFBbUIsZ0RBQWdELHNFQUFzRSxnQkFBZ0I7QUFDcEs7QUFDQSxPQUFPO0FBQ1A7QUFDQSw4Q0FBOEMsY0FBYztBQUM1RDtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNULFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1QsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUMsNkNBQTZDO0FBQzdDO0FBQ0E7QUFDQSxlQUFlO0FBQ2YsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZixhQUFhO0FBQ2I7QUFDQSxhQUFhO0FBQ2I7QUFDQSxtRUFBbUUsY0FBYztBQUNqRix3QkFBd0I7QUFDeEI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQixrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxHQUFHO0FBQ3BDLGdDQUFnQyxTQUFTO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxzQkFBc0I7QUFDeEU7QUFDQSxPQUFPO0FBQ1A7QUFDQSxPQUFPLGlEQUFpRCw4Q0FBOEM7QUFDdEc7QUFDQSxPQUFPO0FBQ1A7QUFDQSxPQUFPO0FBQ1A7QUFDQSxPQUFPO0FBQ1A7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLHdCQUF3QixjQUFjO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0EsV0FBVyxJQUFJO0FBQ2Y7QUFDQSxXQUFXLElBQUk7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsV0FBVyxJQUFJO0FBQ2Y7QUFDQSxXQUFXLElBQUk7QUFDZjtBQUNBLFdBQVcsSUFBSTtBQUNmO0FBQ0EsV0FBVyxJQUFJO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFdBQVc7QUFDWCxXQUFXLElBQUk7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxXQUFXO0FBQ1gsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsMkNBQTJDLGNBQWM7QUFDekQ7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG9DQUFvQztBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixjQUFjO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQix3Q0FBd0M7QUFDbEU7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGNBQWM7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixtREFBbUQ7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwySEFBMkgsU0FBUztBQUNwSTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixTQUFTO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcmVlLW5leHRqcy1hZG1pbi1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvQGVkaXRvcmpzL2ltYWdlL2Rpc3QvaW1hZ2UubWpzPzczYTkiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dHJ5e2lmKHR5cGVvZiBkb2N1bWVudDxcInVcIil7dmFyIG89ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO28uYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJy5pbWFnZS10b29sey0tYmctY29sb3I6ICNjZGQxZTA7LS1mcm9udC1jb2xvcjogIzM4OGFlNTstLWJvcmRlci1jb2xvcjogI2U4ZThlYn0uaW1hZ2UtdG9vbF9faW1hZ2V7Ym9yZGVyLXJhZGl1czozcHg7b3ZlcmZsb3c6aGlkZGVuO21hcmdpbi1ib3R0b206MTBweH0uaW1hZ2UtdG9vbF9faW1hZ2UtcGljdHVyZXttYXgtd2lkdGg6MTAwJTt2ZXJ0aWNhbC1hbGlnbjpib3R0b207ZGlzcGxheTpibG9ja30uaW1hZ2UtdG9vbF9faW1hZ2UtcHJlbG9hZGVye3dpZHRoOjUwcHg7aGVpZ2h0OjUwcHg7Ym9yZGVyLXJhZGl1czo1MCU7YmFja2dyb3VuZC1zaXplOmNvdmVyO21hcmdpbjphdXRvO3Bvc2l0aW9uOnJlbGF0aXZlO2JhY2tncm91bmQtY29sb3I6dmFyKC0tYmctY29sb3IpO2JhY2tncm91bmQtcG9zaXRpb246Y2VudGVyIGNlbnRlcn0uaW1hZ2UtdG9vbF9faW1hZ2UtcHJlbG9hZGVyOmFmdGVye2NvbnRlbnQ6XCJcIjtwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjM7d2lkdGg6NjBweDtoZWlnaHQ6NjBweDtib3JkZXItcmFkaXVzOjUwJTtib3JkZXI6MnB4IHNvbGlkIHZhcigtLWJnLWNvbG9yKTtib3JkZXItdG9wLWNvbG9yOnZhcigtLWZyb250LWNvbG9yKTtsZWZ0OjUwJTt0b3A6NTAlO21hcmdpbi10b3A6LTMwcHg7bWFyZ2luLWxlZnQ6LTMwcHg7YW5pbWF0aW9uOmltYWdlLXByZWxvYWRlci1zcGluIDJzIGluZmluaXRlIGxpbmVhcjtib3gtc2l6aW5nOmJvcmRlci1ib3h9LmltYWdlLXRvb2xfX2NhcHRpb257ZGlzcGxheTpub25lfS5pbWFnZS10b29sX19jYXB0aW9uW2NvbnRlbnRFZGl0YWJsZT10cnVlXVtkYXRhLXBsYWNlaG9sZGVyXTpiZWZvcmV7cG9zaXRpb246YWJzb2x1dGUhaW1wb3J0YW50O2NvbnRlbnQ6YXR0cihkYXRhLXBsYWNlaG9sZGVyKTtjb2xvcjojNzA3Njg0O2ZvbnQtd2VpZ2h0OjQwMDtkaXNwbGF5Om5vbmV9LmltYWdlLXRvb2xfX2NhcHRpb25bY29udGVudEVkaXRhYmxlPXRydWVdW2RhdGEtcGxhY2Vob2xkZXJdOmVtcHR5OmJlZm9yZXtkaXNwbGF5OmJsb2NrfS5pbWFnZS10b29sX19jYXB0aW9uW2NvbnRlbnRFZGl0YWJsZT10cnVlXVtkYXRhLXBsYWNlaG9sZGVyXTplbXB0eTpmb2N1czpiZWZvcmV7ZGlzcGxheTpub25lfS5pbWFnZS10b29sLS1lbXB0eSAuaW1hZ2UtdG9vbF9faW1hZ2V7ZGlzcGxheTpub25lfS5pbWFnZS10b29sLS1lbXB0eSAuaW1hZ2UtdG9vbF9fY2FwdGlvbiwuaW1hZ2UtdG9vbC0tdXBsb2FkaW5nIC5pbWFnZS10b29sX19jYXB0aW9ue2Rpc3BsYXk6bm9uZSFpbXBvcnRhbnR9LmltYWdlLXRvb2wgLmNkeC1idXR0b257ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5pbWFnZS10b29sIC5jZHgtYnV0dG9uIHN2Z3toZWlnaHQ6YXV0bzttYXJnaW46MCA2cHggMCAwfS5pbWFnZS10b29sLS1maWxsZWQgLmNkeC1idXR0b24sLmltYWdlLXRvb2wtLWZpbGxlZCAuaW1hZ2UtdG9vbF9faW1hZ2UtcHJlbG9hZGVye2Rpc3BsYXk6bm9uZX0uaW1hZ2UtdG9vbC0tdXBsb2FkaW5nIC5pbWFnZS10b29sX19pbWFnZXttaW4taGVpZ2h0OjIwMHB4O2Rpc3BsYXk6ZmxleDtib3JkZXI6MXB4IHNvbGlkIHZhcigtLWJvcmRlci1jb2xvcik7YmFja2dyb3VuZC1jb2xvcjojZmZmfS5pbWFnZS10b29sLS11cGxvYWRpbmcgLmltYWdlLXRvb2xfX2ltYWdlLXBpY3R1cmUsLmltYWdlLXRvb2wtLXVwbG9hZGluZyAuY2R4LWJ1dHRvbntkaXNwbGF5Om5vbmV9LmltYWdlLXRvb2wtLXdpdGhCb3JkZXIgLmltYWdlLXRvb2xfX2ltYWdle2JvcmRlcjoxcHggc29saWQgdmFyKC0tYm9yZGVyLWNvbG9yKX0uaW1hZ2UtdG9vbC0td2l0aEJhY2tncm91bmQgLmltYWdlLXRvb2xfX2ltYWdle3BhZGRpbmc6MTVweDtiYWNrZ3JvdW5kOnZhcigtLWJnLWNvbG9yKX0uaW1hZ2UtdG9vbC0td2l0aEJhY2tncm91bmQgLmltYWdlLXRvb2xfX2ltYWdlLXBpY3R1cmV7bWF4LXdpZHRoOjYwJTttYXJnaW46MCBhdXRvfS5pbWFnZS10b29sLS1zdHJldGNoZWQgLmltYWdlLXRvb2xfX2ltYWdlLXBpY3R1cmV7d2lkdGg6MTAwJX0uaW1hZ2UtdG9vbC0tY2FwdGlvbiAuaW1hZ2UtdG9vbF9fY2FwdGlvbntkaXNwbGF5OmJsb2NrfUBrZXlmcmFtZXMgaW1hZ2UtcHJlbG9hZGVyLXNwaW57MCV7dHJhbnNmb3JtOnJvdGF0ZSgwKX10b3t0cmFuc2Zvcm06cm90YXRlKDM2MGRlZyl9fScpKSxkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKG8pfX1jYXRjaChlKXtjb25zb2xlLmVycm9yKFwidml0ZS1wbHVnaW4tY3NzLWluamVjdGVkLWJ5LWpzXCIsZSl9fSkoKTtcbmNvbnN0IFIgPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgZmlsbD1cIm5vbmVcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNMTEgMTlWMTlDOS4xMzYyMyAxOSA4LjIwNDM1IDE5IDcuNDY5MjcgMTguNjk1NUM2LjQ4OTE1IDE4LjI4OTUgNS43MTA0NiAxNy41MTA4IDUuMzA0NDggMTYuNTMwN0M1IDE1Ljc5NTYgNSAxNC44NjM4IDUgMTNWMTJDNSA5LjE5MTA4IDUgNy43ODY2MSA1LjY3NDEyIDYuNzc3NzJDNS45NjU5NiA2LjM0MDk2IDYuMzQwOTYgNS45NjU5NiA2Ljc3NzcyIDUuNjc0MTJDNy43ODY2MSA1IDkuMTkxMDggNSAxMiA1SDEzLjVDMTQuODk1NiA1IDE1LjU5MzMgNSAxNi4xNjExIDUuMTcyMjRDMTcuNDM5NSA1LjU2MDA0IDE4LjQ0IDYuNTYwNDYgMTguODI3OCA3LjgzODg2QzE5IDguNDA2NjYgMTkgOS4xMDQ0NCAxOSAxMC41VjEwLjVcIi8+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTE2IDEzVjE2TTE2IDE5VjE2TTE5IDE2SDE2TTE2IDE2SDEzXCIvPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTYuNSAxNy41TDE3LjUgNi41XCIvPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTE4Ljk5MTkgMTAuNUgxOS4wMDE1XCIvPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTEwLjk5MTkgMTlIMTEuMDAxNVwiLz48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk01IDEzTDEzIDVcIi8+PC9zdmc+JywgSSA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk0xOC45OTE5IDkuNUgxOS4wMDE1XCIvPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTE0LjUgNUgxNC41MDk2XCIvPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk0xNC42MjUgNUgxNUMxNy4yMDkxIDUgMTkgNi43OTA4NiAxOSA5VjkuMzc1XCIvPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTkuMzc1IDVMOSA1QzYuNzkwODYgNSA1IDYuNzkwODYgNSA5VjkuMzc1XCIvPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTkuMzcyNSA1SDkuMzgyMDdcIi8+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNNSA5LjVINS4wMDk1N1wiLz48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk05LjM3NSAxOUg5QzYuNzkwODYgMTkgNSAxNy4yMDkxIDUgMTVWMTQuNjI1XCIvPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTkuMzcyNSAxOUg5LjM4MjA3XCIvPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTUgMTQuNTVINS4wMDk1N1wiLz48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNMTYgMTNWMTZNMTYgMTlWMTZNMTkgMTZIMTZNMTYgMTZIMTNcIi8+PC9zdmc+JywgTCA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cmVjdCB3aWR0aD1cIjE0XCIgaGVpZ2h0PVwiMTRcIiB4PVwiNVwiIHk9XCI1XCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIHJ4PVwiNFwiLz48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk01LjEzOTY4IDE1LjMyTDguNjkwNTggMTEuNTY2MUM5LjAyOTM0IDExLjIwMzYgOS40ODg3MyAxMSA5Ljk2Nzc0IDExQzEwLjQ0NjcgMTEgMTAuOTA2MSAxMS4yMDM2IDExLjI0NDkgMTEuNTY2MUwxNS4zODcxIDE2TTEzLjU4MDYgMTQuMDY2NEwxNS4wMTMyIDEyLjUzM0MxNS4zNTE5IDEyLjE3MDUgMTUuODExMyAxMS45NjY4IDE2LjI5MDMgMTEuOTY2OEMxNi43NjkzIDExLjk2NjggMTcuMjI4NyAxMi4xNzA1IDE3LjU2NzUgMTIuNTMzTDE4Ljg0MSAxMy45NjM0XCIvPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTEzLjc3NzggOS4zMzMzMUgxMy43ODY3XCIvPjwvc3ZnPicsIHggPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgZmlsbD1cIm5vbmVcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNMTcgOUwyMCAxMkwxNyAxNVwiLz48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk0xNCAxMkgyMFwiLz48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk03IDlMNCAxMkw3IDE1XCIvPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTQgMTJIMTBcIi8+PC9zdmc+JywgQiA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNOCA5VjcuMkM4IDcuMDg5NTQgOC4wODk1NCA3IDguMiA3TDEyIDdNMTYgOVY3LjJDMTYgNy4wODk1NCAxNS45MTA1IDcgMTUuOCA3TDEyIDdNMTIgN0wxMiAxN00xMiAxN0gxME0xMiAxN0gxNFwiLz48L3N2Zz4nO1xuZnVuY3Rpb24gTShDLCBpID0gbnVsbCwgYSA9IHt9KSB7XG4gIGNvbnN0IHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KEMpO1xuICBBcnJheS5pc0FycmF5KGkpID8gcy5jbGFzc0xpc3QuYWRkKC4uLmkpIDogaSAhPT0gbnVsbCAmJiBzLmNsYXNzTGlzdC5hZGQoaSk7XG4gIGZvciAoY29uc3QgciBpbiBhKVxuICAgIGEuaGFzT3duUHJvcGVydHkocikgJiYgKHNbcl0gPSBhW3JdKTtcbiAgcmV0dXJuIHM7XG59XG52YXIgUyA9IC8qIEBfX1BVUkVfXyAqLyAoKEMpID0+IChDLkVtcHR5ID0gXCJlbXB0eVwiLCBDLlVwbG9hZGluZyA9IFwidXBsb2FkaW5nXCIsIEMuRmlsbGVkID0gXCJmaWxsZWRcIiwgQykpKFMgfHwge30pO1xuY2xhc3MgVSB7XG4gIC8qKlxuICAgKiBAcGFyYW0gdWkgLSBpbWFnZSB0b29sIFVpIG1vZHVsZVxuICAgKiBAcGFyYW0gdWkuYXBpIC0gRWRpdG9yLmpzIEFQSVxuICAgKiBAcGFyYW0gdWkuY29uZmlnIC0gdXNlciBjb25maWdcbiAgICogQHBhcmFtIHVpLm9uU2VsZWN0RmlsZSAtIGNhbGxiYWNrIGZvciBjbGlja3Mgb24gU2VsZWN0IGZpbGUgYnV0dG9uXG4gICAqIEBwYXJhbSB1aS5yZWFkT25seSAtIHJlYWQtb25seSBtb2RlIGZsYWdcbiAgICovXG4gIGNvbnN0cnVjdG9yKHsgYXBpOiBpLCBjb25maWc6IGEsIG9uU2VsZWN0RmlsZTogcywgcmVhZE9ubHk6IHIgfSkge1xuICAgIHRoaXMuYXBpID0gaSwgdGhpcy5jb25maWcgPSBhLCB0aGlzLm9uU2VsZWN0RmlsZSA9IHMsIHRoaXMucmVhZE9ubHkgPSByLCB0aGlzLm5vZGVzID0ge1xuICAgICAgd3JhcHBlcjogTShcImRpdlwiLCBbdGhpcy5DU1MuYmFzZUNsYXNzLCB0aGlzLkNTUy53cmFwcGVyXSksXG4gICAgICBpbWFnZUNvbnRhaW5lcjogTShcImRpdlwiLCBbdGhpcy5DU1MuaW1hZ2VDb250YWluZXJdKSxcbiAgICAgIGZpbGVCdXR0b246IHRoaXMuY3JlYXRlRmlsZUJ1dHRvbigpLFxuICAgICAgaW1hZ2VFbDogdm9pZCAwLFxuICAgICAgaW1hZ2VQcmVsb2FkZXI6IE0oXCJkaXZcIiwgdGhpcy5DU1MuaW1hZ2VQcmVsb2FkZXIpLFxuICAgICAgY2FwdGlvbjogTShcImRpdlwiLCBbdGhpcy5DU1MuaW5wdXQsIHRoaXMuQ1NTLmNhcHRpb25dLCB7XG4gICAgICAgIGNvbnRlbnRFZGl0YWJsZTogIXRoaXMucmVhZE9ubHlcbiAgICAgIH0pXG4gICAgfSwgdGhpcy5ub2Rlcy5jYXB0aW9uLmRhdGFzZXQucGxhY2Vob2xkZXIgPSB0aGlzLmNvbmZpZy5jYXB0aW9uUGxhY2Vob2xkZXIsIHRoaXMubm9kZXMuaW1hZ2VDb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5ub2Rlcy5pbWFnZVByZWxvYWRlciksIHRoaXMubm9kZXMud3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLm5vZGVzLmltYWdlQ29udGFpbmVyKSwgdGhpcy5ub2Rlcy53cmFwcGVyLmFwcGVuZENoaWxkKHRoaXMubm9kZXMuY2FwdGlvbiksIHRoaXMubm9kZXMud3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLm5vZGVzLmZpbGVCdXR0b24pO1xuICB9XG4gIC8qKlxuICAgKiBBcHBseSB2aXN1YWwgcmVwcmVzZW50YXRpb24gb2YgYWN0aXZhdGVkIHR1bmVcbiAgICogQHBhcmFtIHR1bmVOYW1lIC0gb25lIG9mIGF2YWlsYWJsZSB0dW5lcyB7QGxpbmsgVHVuZXMudHVuZXN9XG4gICAqIEBwYXJhbSBzdGF0dXMgLSB0cnVlIGZvciBlbmFibGUsIGZhbHNlIGZvciBkaXNhYmxlXG4gICAqL1xuICBhcHBseVR1bmUoaSwgYSkge1xuICAgIHRoaXMubm9kZXMud3JhcHBlci5jbGFzc0xpc3QudG9nZ2xlKGAke3RoaXMuQ1NTLndyYXBwZXJ9LS0ke2l9YCwgYSk7XG4gIH1cbiAgLyoqXG4gICAqIFJlbmRlcnMgdG9vbCBVSVxuICAgKiBAcGFyYW0gdG9vbERhdGEgLSBzYXZlZCB0b29sIGRhdGFcbiAgICovXG4gIHJlbmRlcihpKSB7XG4gICAgcmV0dXJuIGkuZmlsZSA9PT0gdm9pZCAwIHx8IE9iamVjdC5rZXlzKGkuZmlsZSkubGVuZ3RoID09PSAwID8gdGhpcy50b2dnbGVTdGF0dXMoXG4gICAgICBcImVtcHR5XCJcbiAgICAgIC8qIEVtcHR5ICovXG4gICAgKSA6IHRoaXMudG9nZ2xlU3RhdHVzKFxuICAgICAgXCJ1cGxvYWRpbmdcIlxuICAgICAgLyogVXBsb2FkaW5nICovXG4gICAgKSwgdGhpcy5ub2Rlcy53cmFwcGVyO1xuICB9XG4gIC8qKlxuICAgKiBTaG93cyB1cGxvYWRpbmcgcHJlbG9hZGVyXG4gICAqIEBwYXJhbSBzcmMgLSBwcmV2aWV3IHNvdXJjZVxuICAgKi9cbiAgc2hvd1ByZWxvYWRlcihpKSB7XG4gICAgdGhpcy5ub2Rlcy5pbWFnZVByZWxvYWRlci5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSBgdXJsKCR7aX0pYCwgdGhpcy50b2dnbGVTdGF0dXMoXG4gICAgICBcInVwbG9hZGluZ1wiXG4gICAgICAvKiBVcGxvYWRpbmcgKi9cbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBIaWRlIHVwbG9hZGluZyBwcmVsb2FkZXJcbiAgICovXG4gIGhpZGVQcmVsb2FkZXIoKSB7XG4gICAgdGhpcy5ub2Rlcy5pbWFnZVByZWxvYWRlci5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSBcIlwiLCB0aGlzLnRvZ2dsZVN0YXR1cyhcbiAgICAgIFwiZW1wdHlcIlxuICAgICAgLyogRW1wdHkgKi9cbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBTaG93cyBhbiBpbWFnZVxuICAgKiBAcGFyYW0gdXJsIC0gaW1hZ2Ugc291cmNlXG4gICAqL1xuICBmaWxsSW1hZ2UoaSkge1xuICAgIGNvbnN0IGEgPSAvXFwubXA0JC8udGVzdChpKSA/IFwiVklERU9cIiA6IFwiSU1HXCIsIHMgPSB7XG4gICAgICBzcmM6IGlcbiAgICB9O1xuICAgIGxldCByID0gXCJsb2FkXCI7XG4gICAgYSA9PT0gXCJWSURFT1wiICYmIChzLmF1dG9wbGF5ID0gITAsIHMubG9vcCA9ICEwLCBzLm11dGVkID0gITAsIHMucGxheXNpbmxpbmUgPSAhMCwgciA9IFwibG9hZGVkZGF0YVwiKSwgdGhpcy5ub2Rlcy5pbWFnZUVsID0gTShhLCB0aGlzLkNTUy5pbWFnZUVsLCBzKSwgdGhpcy5ub2Rlcy5pbWFnZUVsLmFkZEV2ZW50TGlzdGVuZXIociwgKCkgPT4ge1xuICAgICAgdGhpcy50b2dnbGVTdGF0dXMoXG4gICAgICAgIFwiZmlsbGVkXCJcbiAgICAgICAgLyogRmlsbGVkICovXG4gICAgICApLCB0aGlzLm5vZGVzLmltYWdlUHJlbG9hZGVyICE9PSB2b2lkIDAgJiYgKHRoaXMubm9kZXMuaW1hZ2VQcmVsb2FkZXIuc3R5bGUuYmFja2dyb3VuZEltYWdlID0gXCJcIik7XG4gICAgfSksIHRoaXMubm9kZXMuaW1hZ2VDb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5ub2Rlcy5pbWFnZUVsKTtcbiAgfVxuICAvKipcbiAgICogU2hvd3MgY2FwdGlvbiBpbnB1dFxuICAgKiBAcGFyYW0gdGV4dCAtIGNhcHRpb24gY29udGVudCB0ZXh0XG4gICAqL1xuICBmaWxsQ2FwdGlvbihpKSB7XG4gICAgdGhpcy5ub2Rlcy5jYXB0aW9uICE9PSB2b2lkIDAgJiYgKHRoaXMubm9kZXMuY2FwdGlvbi5pbm5lckhUTUwgPSBpKTtcbiAgfVxuICAvKipcbiAgICogQ1NTIGNsYXNzZXNcbiAgICovXG4gIGdldCBDU1MoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJhc2VDbGFzczogdGhpcy5hcGkuc3R5bGVzLmJsb2NrLFxuICAgICAgbG9hZGluZzogdGhpcy5hcGkuc3R5bGVzLmxvYWRlcixcbiAgICAgIGlucHV0OiB0aGlzLmFwaS5zdHlsZXMuaW5wdXQsXG4gICAgICBidXR0b246IHRoaXMuYXBpLnN0eWxlcy5idXR0b24sXG4gICAgICAvKipcbiAgICAgICAqIFRvb2wncyBjbGFzc2VzXG4gICAgICAgKi9cbiAgICAgIHdyYXBwZXI6IFwiaW1hZ2UtdG9vbFwiLFxuICAgICAgaW1hZ2VDb250YWluZXI6IFwiaW1hZ2UtdG9vbF9faW1hZ2VcIixcbiAgICAgIGltYWdlUHJlbG9hZGVyOiBcImltYWdlLXRvb2xfX2ltYWdlLXByZWxvYWRlclwiLFxuICAgICAgaW1hZ2VFbDogXCJpbWFnZS10b29sX19pbWFnZS1waWN0dXJlXCIsXG4gICAgICBjYXB0aW9uOiBcImltYWdlLXRvb2xfX2NhcHRpb25cIlxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgdXBsb2FkLWZpbGUgYnV0dG9uXG4gICAqL1xuICBjcmVhdGVGaWxlQnV0dG9uKCkge1xuICAgIGNvbnN0IGkgPSBNKFwiZGl2XCIsIFt0aGlzLkNTUy5idXR0b25dKTtcbiAgICByZXR1cm4gaS5pbm5lckhUTUwgPSB0aGlzLmNvbmZpZy5idXR0b25Db250ZW50ID8/IGAke0x9ICR7dGhpcy5hcGkuaTE4bi50KFwiU2VsZWN0IGFuIEltYWdlXCIpfWAsIGkuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIHRoaXMub25TZWxlY3RGaWxlKCk7XG4gICAgfSksIGk7XG4gIH1cbiAgLyoqXG4gICAqIENoYW5nZXMgVUkgc3RhdHVzXG4gICAqIEBwYXJhbSBzdGF0dXMgLSBzZWUge0BsaW5rIFVpLnN0YXR1c30gY29uc3RhbnRzXG4gICAqL1xuICB0b2dnbGVTdGF0dXMoaSkge1xuICAgIGZvciAoY29uc3QgYSBpbiBTKVxuICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKFMsIGEpICYmIHRoaXMubm9kZXMud3JhcHBlci5jbGFzc0xpc3QudG9nZ2xlKGAke3RoaXMuQ1NTLndyYXBwZXJ9LS0ke1NbYV19YCwgaSA9PT0gU1thXSk7XG4gIH1cbn1cbmZ1bmN0aW9uIEQoQykge1xuICByZXR1cm4gQyAmJiBDLl9fZXNNb2R1bGUgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKEMsIFwiZGVmYXVsdFwiKSA/IEMuZGVmYXVsdCA6IEM7XG59XG52YXIgSCA9IHsgZXhwb3J0czoge30gfTtcbihmdW5jdGlvbihDLCBpKSB7XG4gIChmdW5jdGlvbihhLCBzKSB7XG4gICAgQy5leHBvcnRzID0gcygpO1xuICB9KSh3aW5kb3csIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbihhKSB7XG4gICAgICB2YXIgcyA9IHt9O1xuICAgICAgZnVuY3Rpb24gcihlKSB7XG4gICAgICAgIGlmIChzW2VdKSByZXR1cm4gc1tlXS5leHBvcnRzO1xuICAgICAgICB2YXIgbyA9IHNbZV0gPSB7IGk6IGUsIGw6ICExLCBleHBvcnRzOiB7fSB9O1xuICAgICAgICByZXR1cm4gYVtlXS5jYWxsKG8uZXhwb3J0cywgbywgby5leHBvcnRzLCByKSwgby5sID0gITAsIG8uZXhwb3J0cztcbiAgICAgIH1cbiAgICAgIHJldHVybiByLm0gPSBhLCByLmMgPSBzLCByLmQgPSBmdW5jdGlvbihlLCBvLCBkKSB7XG4gICAgICAgIHIubyhlLCBvKSB8fCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgbywgeyBlbnVtZXJhYmxlOiAhMCwgZ2V0OiBkIH0pO1xuICAgICAgfSwgci5yID0gZnVuY3Rpb24oZSkge1xuICAgICAgICB0eXBlb2YgU3ltYm9sIDwgXCJ1XCIgJiYgU3ltYm9sLnRvU3RyaW5nVGFnICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6IFwiTW9kdWxlXCIgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSk7XG4gICAgICB9LCByLnQgPSBmdW5jdGlvbihlLCBvKSB7XG4gICAgICAgIGlmICgxICYgbyAmJiAoZSA9IHIoZSkpLCA4ICYgbyB8fCA0ICYgbyAmJiB0eXBlb2YgZSA9PSBcIm9iamVjdFwiICYmIGUgJiYgZS5fX2VzTW9kdWxlKSByZXR1cm4gZTtcbiAgICAgICAgdmFyIGQgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgaWYgKHIucihkKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGQsIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6ICEwLCB2YWx1ZTogZSB9KSwgMiAmIG8gJiYgdHlwZW9mIGUgIT0gXCJzdHJpbmdcIikgZm9yICh2YXIgdiBpbiBlKSByLmQoZCwgdiwgKGZ1bmN0aW9uKGwpIHtcbiAgICAgICAgICByZXR1cm4gZVtsXTtcbiAgICAgICAgfSkuYmluZChudWxsLCB2KSk7XG4gICAgICAgIHJldHVybiBkO1xuICAgICAgfSwgci5uID0gZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgbyA9IGUgJiYgZS5fX2VzTW9kdWxlID8gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGUuZGVmYXVsdDtcbiAgICAgICAgfSA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gci5kKG8sIFwiYVwiLCBvKSwgbztcbiAgICAgIH0sIHIubyA9IGZ1bmN0aW9uKGUsIG8pIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCBvKTtcbiAgICAgIH0sIHIucCA9IFwiXCIsIHIoci5zID0gMyk7XG4gICAgfShbZnVuY3Rpb24oYSwgcykge1xuICAgICAgdmFyIHI7XG4gICAgICByID0gLyogQF9fUFVSRV9fICovIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0oKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHIgPSByIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG4gICAgICB9IGNhdGNoIHtcbiAgICAgICAgdHlwZW9mIHdpbmRvdyA9PSBcIm9iamVjdFwiICYmIChyID0gd2luZG93KTtcbiAgICAgIH1cbiAgICAgIGEuZXhwb3J0cyA9IHI7XG4gICAgfSwgZnVuY3Rpb24oYSwgcywgcikge1xuICAgICAgKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIG8gPSByKDIpLCBkID0gc2V0VGltZW91dDtcbiAgICAgICAgZnVuY3Rpb24gdigpIHtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBsKG4pIHtcbiAgICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgbCkpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcm9taXNlcyBtdXN0IGJlIGNvbnN0cnVjdGVkIHZpYSBuZXdcIik7XG4gICAgICAgICAgaWYgKHR5cGVvZiBuICE9IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIm5vdCBhIGZ1bmN0aW9uXCIpO1xuICAgICAgICAgIHRoaXMuX3N0YXRlID0gMCwgdGhpcy5faGFuZGxlZCA9ICExLCB0aGlzLl92YWx1ZSA9IHZvaWQgMCwgdGhpcy5fZGVmZXJyZWRzID0gW10sIHQobiwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZihuLCBjKSB7XG4gICAgICAgICAgZm9yICg7IG4uX3N0YXRlID09PSAzOyApIG4gPSBuLl92YWx1ZTtcbiAgICAgICAgICBuLl9zdGF0ZSAhPT0gMCA/IChuLl9oYW5kbGVkID0gITAsIGwuX2ltbWVkaWF0ZUZuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHUgPSBuLl9zdGF0ZSA9PT0gMSA/IGMub25GdWxmaWxsZWQgOiBjLm9uUmVqZWN0ZWQ7XG4gICAgICAgICAgICBpZiAodSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICB2YXIgZztcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBnID0gdShuLl92YWx1ZSk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKG0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCB5KGMucHJvbWlzZSwgbSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcChjLnByb21pc2UsIGcpO1xuICAgICAgICAgICAgfSBlbHNlIChuLl9zdGF0ZSA9PT0gMSA/IHAgOiB5KShjLnByb21pc2UsIG4uX3ZhbHVlKTtcbiAgICAgICAgICB9KSkgOiBuLl9kZWZlcnJlZHMucHVzaChjKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBwKG4sIGMpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGMgPT09IG4pIHRocm93IG5ldyBUeXBlRXJyb3IoXCJBIHByb21pc2UgY2Fubm90IGJlIHJlc29sdmVkIHdpdGggaXRzZWxmLlwiKTtcbiAgICAgICAgICAgIGlmIChjICYmICh0eXBlb2YgYyA9PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjID09IFwiZnVuY3Rpb25cIikpIHtcbiAgICAgICAgICAgICAgdmFyIHUgPSBjLnRoZW47XG4gICAgICAgICAgICAgIGlmIChjIGluc3RhbmNlb2YgbCkgcmV0dXJuIG4uX3N0YXRlID0gMywgbi5fdmFsdWUgPSBjLCB2b2lkIHcobik7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgdSA9PSBcImZ1bmN0aW9uXCIpIHJldHVybiB2b2lkIHQoKGcgPSB1LCBtID0gYywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZy5hcHBseShtLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICB9KSwgbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuLl9zdGF0ZSA9IDEsIG4uX3ZhbHVlID0gYywgdyhuKTtcbiAgICAgICAgICB9IGNhdGNoIChoKSB7XG4gICAgICAgICAgICB5KG4sIGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgZywgbTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB5KG4sIGMpIHtcbiAgICAgICAgICBuLl9zdGF0ZSA9IDIsIG4uX3ZhbHVlID0gYywgdyhuKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB3KG4pIHtcbiAgICAgICAgICBuLl9zdGF0ZSA9PT0gMiAmJiBuLl9kZWZlcnJlZHMubGVuZ3RoID09PSAwICYmIGwuX2ltbWVkaWF0ZUZuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbi5faGFuZGxlZCB8fCBsLl91bmhhbmRsZWRSZWplY3Rpb25GbihuLl92YWx1ZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZm9yICh2YXIgYyA9IDAsIHUgPSBuLl9kZWZlcnJlZHMubGVuZ3RoOyBjIDwgdTsgYysrKSBmKG4sIG4uX2RlZmVycmVkc1tjXSk7XG4gICAgICAgICAgbi5fZGVmZXJyZWRzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBiKG4sIGMsIHUpIHtcbiAgICAgICAgICB0aGlzLm9uRnVsZmlsbGVkID0gdHlwZW9mIG4gPT0gXCJmdW5jdGlvblwiID8gbiA6IG51bGwsIHRoaXMub25SZWplY3RlZCA9IHR5cGVvZiBjID09IFwiZnVuY3Rpb25cIiA/IGMgOiBudWxsLCB0aGlzLnByb21pc2UgPSB1O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHQobiwgYykge1xuICAgICAgICAgIHZhciB1ID0gITE7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG4oZnVuY3Rpb24oZykge1xuICAgICAgICAgICAgICB1IHx8ICh1ID0gITAsIHAoYywgZykpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24oZykge1xuICAgICAgICAgICAgICB1IHx8ICh1ID0gITAsIHkoYywgZykpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBjYXRjaCAoZykge1xuICAgICAgICAgICAgaWYgKHUpIHJldHVybjtcbiAgICAgICAgICAgIHUgPSAhMCwgeShjLCBnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbC5wcm90b3R5cGUuY2F0Y2ggPSBmdW5jdGlvbihuKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudGhlbihudWxsLCBuKTtcbiAgICAgICAgfSwgbC5wcm90b3R5cGUudGhlbiA9IGZ1bmN0aW9uKG4sIGMpIHtcbiAgICAgICAgICB2YXIgdSA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKHYpO1xuICAgICAgICAgIHJldHVybiBmKHRoaXMsIG5ldyBiKG4sIGMsIHUpKSwgdTtcbiAgICAgICAgfSwgbC5wcm90b3R5cGUuZmluYWxseSA9IG8uYSwgbC5hbGwgPSBmdW5jdGlvbihuKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBsKGZ1bmN0aW9uKGMsIHUpIHtcbiAgICAgICAgICAgIGlmICghbiB8fCBuLmxlbmd0aCA9PT0gdm9pZCAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJvbWlzZS5hbGwgYWNjZXB0cyBhbiBhcnJheVwiKTtcbiAgICAgICAgICAgIHZhciBnID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobik7XG4gICAgICAgICAgICBpZiAoZy5sZW5ndGggPT09IDApIHJldHVybiBjKFtdKTtcbiAgICAgICAgICAgIHZhciBtID0gZy5sZW5ndGg7XG4gICAgICAgICAgICBmdW5jdGlvbiBoKFQsIEUpIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoRSAmJiAodHlwZW9mIEUgPT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgRSA9PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgaiA9IEUudGhlbjtcbiAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaiA9PSBcImZ1bmN0aW9uXCIpIHJldHVybiB2b2lkIGouY2FsbChFLCBmdW5jdGlvbihGKSB7XG4gICAgICAgICAgICAgICAgICAgIGgoVCwgRik7XG4gICAgICAgICAgICAgICAgICB9LCB1KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZ1tUXSA9IEUsIC0tbSA9PSAwICYmIGMoZyk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKEYpIHtcbiAgICAgICAgICAgICAgICB1KEYpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IGcubGVuZ3RoOyBrKyspIGgoaywgZ1trXSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sIGwucmVzb2x2ZSA9IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICByZXR1cm4gbiAmJiB0eXBlb2YgbiA9PSBcIm9iamVjdFwiICYmIG4uY29uc3RydWN0b3IgPT09IGwgPyBuIDogbmV3IGwoZnVuY3Rpb24oYykge1xuICAgICAgICAgICAgYyhuKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgbC5yZWplY3QgPSBmdW5jdGlvbihuKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBsKGZ1bmN0aW9uKGMsIHUpIHtcbiAgICAgICAgICAgIHUobik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sIGwucmFjZSA9IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICByZXR1cm4gbmV3IGwoZnVuY3Rpb24oYywgdSkge1xuICAgICAgICAgICAgZm9yICh2YXIgZyA9IDAsIG0gPSBuLmxlbmd0aDsgZyA8IG07IGcrKykgbltnXS50aGVuKGMsIHUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LCBsLl9pbW1lZGlhdGVGbiA9IHR5cGVvZiBlID09IFwiZnVuY3Rpb25cIiAmJiBmdW5jdGlvbihuKSB7XG4gICAgICAgICAgZShuKTtcbiAgICAgICAgfSB8fCBmdW5jdGlvbihuKSB7XG4gICAgICAgICAgZChuLCAwKTtcbiAgICAgICAgfSwgbC5fdW5oYW5kbGVkUmVqZWN0aW9uRm4gPSBmdW5jdGlvbihuKSB7XG4gICAgICAgICAgdHlwZW9mIGNvbnNvbGUgPCBcInVcIiAmJiBjb25zb2xlICYmIGNvbnNvbGUud2FybihcIlBvc3NpYmxlIFVuaGFuZGxlZCBQcm9taXNlIFJlamVjdGlvbjpcIiwgbik7XG4gICAgICAgIH0sIHMuYSA9IGw7XG4gICAgICB9KS5jYWxsKHRoaXMsIHIoNSkuc2V0SW1tZWRpYXRlKTtcbiAgICB9LCBmdW5jdGlvbihhLCBzLCByKSB7XG4gICAgICBzLmEgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciBvID0gdGhpcy5jb25zdHJ1Y3RvcjtcbiAgICAgICAgcmV0dXJuIHRoaXMudGhlbihmdW5jdGlvbihkKSB7XG4gICAgICAgICAgcmV0dXJuIG8ucmVzb2x2ZShlKCkpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgIHJldHVybiBvLnJlc29sdmUoZSgpKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIG8ucmVqZWN0KGQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfSwgZnVuY3Rpb24oYSwgcywgcikge1xuICAgICAgZnVuY3Rpb24gZSh0KSB7XG4gICAgICAgIHJldHVybiAoZSA9IHR5cGVvZiBTeW1ib2wgPT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICByZXR1cm4gdHlwZW9mIG47XG4gICAgICAgIH0gOiBmdW5jdGlvbihuKSB7XG4gICAgICAgICAgcmV0dXJuIG4gJiYgdHlwZW9mIFN5bWJvbCA9PSBcImZ1bmN0aW9uXCIgJiYgbi5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG4gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG47XG4gICAgICAgIH0pKHQpO1xuICAgICAgfVxuICAgICAgcig0KTtcbiAgICAgIHZhciBvLCBkLCB2LCBsLCBmLCBwLCB5LCB3ID0gcig4KSwgYiA9IChkID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24obiwgYykge1xuICAgICAgICAgIHQgPSBsKHQpLCAodCA9IGYodCkpLmJlZm9yZVNlbmQgJiYgdC5iZWZvcmVTZW5kKCk7XG4gICAgICAgICAgdmFyIHUgPSB3aW5kb3cuWE1MSHR0cFJlcXVlc3QgPyBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCkgOiBuZXcgd2luZG93LkFjdGl2ZVhPYmplY3QoXCJNaWNyb3NvZnQuWE1MSFRUUFwiKTtcbiAgICAgICAgICB1Lm9wZW4odC5tZXRob2QsIHQudXJsKSwgdS5zZXRSZXF1ZXN0SGVhZGVyKFwiWC1SZXF1ZXN0ZWQtV2l0aFwiLCBcIlhNTEh0dHBSZXF1ZXN0XCIpLCBPYmplY3Qua2V5cyh0LmhlYWRlcnMpLmZvckVhY2goZnVuY3Rpb24obSkge1xuICAgICAgICAgICAgdmFyIGggPSB0LmhlYWRlcnNbbV07XG4gICAgICAgICAgICB1LnNldFJlcXVlc3RIZWFkZXIobSwgaCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdmFyIGcgPSB0LnJhdGlvO1xuICAgICAgICAgIHUudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoXCJwcm9ncmVzc1wiLCBmdW5jdGlvbihtKSB7XG4gICAgICAgICAgICB2YXIgaCA9IE1hdGgucm91bmQobS5sb2FkZWQgLyBtLnRvdGFsICogMTAwKSwgayA9IE1hdGguY2VpbChoICogZyAvIDEwMCk7XG4gICAgICAgICAgICB0LnByb2dyZXNzKE1hdGgubWluKGssIDEwMCkpO1xuICAgICAgICAgIH0sICExKSwgdS5hZGRFdmVudExpc3RlbmVyKFwicHJvZ3Jlc3NcIiwgZnVuY3Rpb24obSkge1xuICAgICAgICAgICAgdmFyIGggPSBNYXRoLnJvdW5kKG0ubG9hZGVkIC8gbS50b3RhbCAqIDEwMCksIGsgPSBNYXRoLmNlaWwoaCAqICgxMDAgLSBnKSAvIDEwMCkgKyBnO1xuICAgICAgICAgICAgdC5wcm9ncmVzcyhNYXRoLm1pbihrLCAxMDApKTtcbiAgICAgICAgICB9LCAhMSksIHUub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAodS5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgICAgIHZhciBtID0gdS5yZXNwb25zZTtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBtID0gSlNPTi5wYXJzZShtKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdmFyIGggPSB3LnBhcnNlSGVhZGVycyh1LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSwgayA9IHsgYm9keTogbSwgY29kZTogdS5zdGF0dXMsIGhlYWRlcnM6IGggfTtcbiAgICAgICAgICAgICAgeSh1LnN0YXR1cykgPyBuKGspIDogYyhrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCB1LnNlbmQodC5kYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICB9LCB2ID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdC5tZXRob2QgPSBcIlBPU1RcIiwgZCh0KTtcbiAgICAgIH0sIGwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHZvaWQgMCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgICBpZiAodC51cmwgJiYgdHlwZW9mIHQudXJsICE9IFwic3RyaW5nXCIpIHRocm93IG5ldyBFcnJvcihcIlVybCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xuICAgICAgICBpZiAodC51cmwgPSB0LnVybCB8fCBcIlwiLCB0Lm1ldGhvZCAmJiB0eXBlb2YgdC5tZXRob2QgIT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IEVycm9yKFwiYG1ldGhvZGAgbXVzdCBiZSBhIHN0cmluZyBvciBudWxsXCIpO1xuICAgICAgICBpZiAodC5tZXRob2QgPSB0Lm1ldGhvZCA/IHQubWV0aG9kLnRvVXBwZXJDYXNlKCkgOiBcIkdFVFwiLCB0LmhlYWRlcnMgJiYgZSh0LmhlYWRlcnMpICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJgaGVhZGVyc2AgbXVzdCBiZSBhbiBvYmplY3Qgb3IgbnVsbFwiKTtcbiAgICAgICAgaWYgKHQuaGVhZGVycyA9IHQuaGVhZGVycyB8fCB7fSwgdC50eXBlICYmICh0eXBlb2YgdC50eXBlICE9IFwic3RyaW5nXCIgfHwgIU9iamVjdC52YWx1ZXMobykuaW5jbHVkZXModC50eXBlKSkpIHRocm93IG5ldyBFcnJvcihcImB0eXBlYCBtdXN0IGJlIHRha2VuIGZyb20gbW9kdWxlJ3Mgwqtjb250ZW50VHlwZcK7IGxpYnJhcnlcIik7XG4gICAgICAgIGlmICh0LnByb2dyZXNzICYmIHR5cGVvZiB0LnByb2dyZXNzICE9IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yKFwiYHByb2dyZXNzYCBtdXN0IGJlIGEgZnVuY3Rpb24gb3IgbnVsbFwiKTtcbiAgICAgICAgaWYgKHQucHJvZ3Jlc3MgPSB0LnByb2dyZXNzIHx8IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgfSwgdC5iZWZvcmVTZW5kID0gdC5iZWZvcmVTZW5kIHx8IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgfSwgdC5yYXRpbyAmJiB0eXBlb2YgdC5yYXRpbyAhPSBcIm51bWJlclwiKSB0aHJvdyBuZXcgRXJyb3IoXCJgcmF0aW9gIG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgICAgIGlmICh0LnJhdGlvIDwgMCB8fCB0LnJhdGlvID4gMTAwKSB0aHJvdyBuZXcgRXJyb3IoXCJgcmF0aW9gIG11c3QgYmUgaW4gYSAwLTEwMCBpbnRlcnZhbFwiKTtcbiAgICAgICAgaWYgKHQucmF0aW8gPSB0LnJhdGlvIHx8IDkwLCB0LmFjY2VwdCAmJiB0eXBlb2YgdC5hY2NlcHQgIT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IEVycm9yKFwiYGFjY2VwdGAgbXVzdCBiZSBhIHN0cmluZyB3aXRoIGEgbGlzdCBvZiBhbGxvd2VkIG1pbWUtdHlwZXNcIik7XG4gICAgICAgIGlmICh0LmFjY2VwdCA9IHQuYWNjZXB0IHx8IFwiKi8qXCIsIHQubXVsdGlwbGUgJiYgdHlwZW9mIHQubXVsdGlwbGUgIT0gXCJib29sZWFuXCIpIHRocm93IG5ldyBFcnJvcihcImBtdWx0aXBsZWAgbXVzdCBiZSBhIHRydWUgb3IgZmFsc2VcIik7XG4gICAgICAgIGlmICh0Lm11bHRpcGxlID0gdC5tdWx0aXBsZSB8fCAhMSwgdC5maWVsZE5hbWUgJiYgdHlwZW9mIHQuZmllbGROYW1lICE9IFwic3RyaW5nXCIpIHRocm93IG5ldyBFcnJvcihcImBmaWVsZE5hbWVgIG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgICAgIHJldHVybiB0LmZpZWxkTmFtZSA9IHQuZmllbGROYW1lIHx8IFwiZmlsZXNcIiwgdDtcbiAgICAgIH0sIGYgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHN3aXRjaCAodC5tZXRob2QpIHtcbiAgICAgICAgICBjYXNlIFwiR0VUXCI6XG4gICAgICAgICAgICB2YXIgbiA9IHAodC5kYXRhLCBvLlVSTEVOQ09ERUQpO1xuICAgICAgICAgICAgZGVsZXRlIHQuZGF0YSwgdC51cmwgPSAvXFw/Ly50ZXN0KHQudXJsKSA/IHQudXJsICsgXCImXCIgKyBuIDogdC51cmwgKyBcIj9cIiArIG47XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiUE9TVFwiOlxuICAgICAgICAgIGNhc2UgXCJQVVRcIjpcbiAgICAgICAgICBjYXNlIFwiREVMRVRFXCI6XG4gICAgICAgICAgY2FzZSBcIlVQREFURVwiOlxuICAgICAgICAgICAgdmFyIGMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIChhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHZvaWQgMCA/IGFyZ3VtZW50c1swXSA6IHt9KS50eXBlIHx8IG8uSlNPTjtcbiAgICAgICAgICAgIH0odCk7XG4gICAgICAgICAgICAody5pc0Zvcm1EYXRhKHQuZGF0YSkgfHwgdy5pc0Zvcm1FbGVtZW50KHQuZGF0YSkpICYmIChjID0gby5GT1JNKSwgdC5kYXRhID0gcCh0LmRhdGEsIGMpLCBjICE9PSBiLmNvbnRlbnRUeXBlLkZPUk0gJiYgKHQuaGVhZGVyc1tcImNvbnRlbnQtdHlwZVwiXSA9IGMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgICAgfSwgcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdm9pZCAwID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB2b2lkIDApIHtcbiAgICAgICAgICBjYXNlIG8uVVJMRU5DT0RFRDpcbiAgICAgICAgICAgIHJldHVybiB3LnVybEVuY29kZSh0KTtcbiAgICAgICAgICBjYXNlIG8uSlNPTjpcbiAgICAgICAgICAgIHJldHVybiB3Lmpzb25FbmNvZGUodCk7XG4gICAgICAgICAgY2FzZSBvLkZPUk06XG4gICAgICAgICAgICByZXR1cm4gdy5mb3JtRW5jb2RlKHQpO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gdDtcbiAgICAgICAgfVxuICAgICAgfSwgeSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHQgPj0gMjAwICYmIHQgPCAzMDA7XG4gICAgICB9LCB7IGNvbnRlbnRUeXBlOiBvID0geyBVUkxFTkNPREVEOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD11dGYtOFwiLCBGT1JNOiBcIm11bHRpcGFydC9mb3JtLWRhdGFcIiwgSlNPTjogXCJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04XCIgfSwgcmVxdWVzdDogZCwgZ2V0OiBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0Lm1ldGhvZCA9IFwiR0VUXCIsIGQodCk7XG4gICAgICB9LCBwb3N0OiB2LCB0cmFuc3BvcnQ6IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHQgPSBsKHQpLCB3LnNlbGVjdEZpbGVzKHQpLnRoZW4oZnVuY3Rpb24obikge1xuICAgICAgICAgIGZvciAodmFyIGMgPSBuZXcgRm9ybURhdGEoKSwgdSA9IDA7IHUgPCBuLmxlbmd0aDsgdSsrKSBjLmFwcGVuZCh0LmZpZWxkTmFtZSwgblt1XSwgblt1XS5uYW1lKTtcbiAgICAgICAgICB3LmlzT2JqZWN0KHQuZGF0YSkgJiYgT2JqZWN0LmtleXModC5kYXRhKS5mb3JFYWNoKGZ1bmN0aW9uKG0pIHtcbiAgICAgICAgICAgIHZhciBoID0gdC5kYXRhW21dO1xuICAgICAgICAgICAgYy5hcHBlbmQobSwgaCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdmFyIGcgPSB0LmJlZm9yZVNlbmQ7XG4gICAgICAgICAgcmV0dXJuIHQuYmVmb3JlU2VuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGcobik7XG4gICAgICAgICAgfSwgdC5kYXRhID0gYywgdih0KTtcbiAgICAgICAgfSk7XG4gICAgICB9LCBzZWxlY3RGaWxlczogZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gZGVsZXRlICh0ID0gbCh0KSkuYmVmb3JlU2VuZCwgdy5zZWxlY3RGaWxlcyh0KTtcbiAgICAgIH0gfSk7XG4gICAgICBhLmV4cG9ydHMgPSBiO1xuICAgIH0sIGZ1bmN0aW9uKGEsIHMsIHIpIHtcbiAgICAgIHIucihzKTtcbiAgICAgIHZhciBlID0gcigxKTtcbiAgICAgIHdpbmRvdy5Qcm9taXNlID0gd2luZG93LlByb21pc2UgfHwgZS5hO1xuICAgIH0sIGZ1bmN0aW9uKGEsIHMsIHIpIHtcbiAgICAgIChmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciBvID0gZSAhPT0gdm9pZCAwICYmIGUgfHwgdHlwZW9mIHNlbGYgPCBcInVcIiAmJiBzZWxmIHx8IHdpbmRvdywgZCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcbiAgICAgICAgZnVuY3Rpb24gdihsLCBmKSB7XG4gICAgICAgICAgdGhpcy5faWQgPSBsLCB0aGlzLl9jbGVhckZuID0gZjtcbiAgICAgICAgfVxuICAgICAgICBzLnNldFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IHYoZC5jYWxsKHNldFRpbWVvdXQsIG8sIGFyZ3VtZW50cyksIGNsZWFyVGltZW91dCk7XG4gICAgICAgIH0sIHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IHYoZC5jYWxsKHNldEludGVydmFsLCBvLCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTtcbiAgICAgICAgfSwgcy5jbGVhclRpbWVvdXQgPSBzLmNsZWFySW50ZXJ2YWwgPSBmdW5jdGlvbihsKSB7XG4gICAgICAgICAgbCAmJiBsLmNsb3NlKCk7XG4gICAgICAgIH0sIHYucHJvdG90eXBlLnVucmVmID0gdi5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIH0sIHYucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdGhpcy5fY2xlYXJGbi5jYWxsKG8sIHRoaXMuX2lkKTtcbiAgICAgICAgfSwgcy5lbnJvbGwgPSBmdW5jdGlvbihsLCBmKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KGwuX2lkbGVUaW1lb3V0SWQpLCBsLl9pZGxlVGltZW91dCA9IGY7XG4gICAgICAgIH0sIHMudW5lbnJvbGwgPSBmdW5jdGlvbihsKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KGwuX2lkbGVUaW1lb3V0SWQpLCBsLl9pZGxlVGltZW91dCA9IC0xO1xuICAgICAgICB9LCBzLl91bnJlZkFjdGl2ZSA9IHMuYWN0aXZlID0gZnVuY3Rpb24obCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dChsLl9pZGxlVGltZW91dElkKTtcbiAgICAgICAgICB2YXIgZiA9IGwuX2lkbGVUaW1lb3V0O1xuICAgICAgICAgIGYgPj0gMCAmJiAobC5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBsLl9vblRpbWVvdXQgJiYgbC5fb25UaW1lb3V0KCk7XG4gICAgICAgICAgfSwgZikpO1xuICAgICAgICB9LCByKDYpLCBzLnNldEltbWVkaWF0ZSA9IHR5cGVvZiBzZWxmIDwgXCJ1XCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUgfHwgZSAhPT0gdm9pZCAwICYmIGUuc2V0SW1tZWRpYXRlIHx8IHRoaXMgJiYgdGhpcy5zZXRJbW1lZGlhdGUsIHMuY2xlYXJJbW1lZGlhdGUgPSB0eXBlb2Ygc2VsZiA8IFwidVwiICYmIHNlbGYuY2xlYXJJbW1lZGlhdGUgfHwgZSAhPT0gdm9pZCAwICYmIGUuY2xlYXJJbW1lZGlhdGUgfHwgdGhpcyAmJiB0aGlzLmNsZWFySW1tZWRpYXRlO1xuICAgICAgfSkuY2FsbCh0aGlzLCByKDApKTtcbiAgICB9LCBmdW5jdGlvbihhLCBzLCByKSB7XG4gICAgICAoZnVuY3Rpb24oZSwgbykge1xuICAgICAgICAoZnVuY3Rpb24oZCwgdikge1xuICAgICAgICAgIGlmICghZC5zZXRJbW1lZGlhdGUpIHtcbiAgICAgICAgICAgIHZhciBsLCBmLCBwLCB5LCB3LCBiID0gMSwgdCA9IHt9LCBuID0gITEsIGMgPSBkLmRvY3VtZW50LCB1ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihkKTtcbiAgICAgICAgICAgIHUgPSB1ICYmIHUuc2V0VGltZW91dCA/IHUgOiBkLCB7fS50b1N0cmluZy5jYWxsKGQucHJvY2VzcykgPT09IFwiW29iamVjdCBwcm9jZXNzXVwiID8gbCA9IGZ1bmN0aW9uKGgpIHtcbiAgICAgICAgICAgICAgby5uZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBtKGgpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgaWYgKGQucG9zdE1lc3NhZ2UgJiYgIWQuaW1wb3J0U2NyaXB0cykge1xuICAgICAgICAgICAgICAgIHZhciBoID0gITAsIGsgPSBkLm9ubWVzc2FnZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZC5vbm1lc3NhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIGggPSAhMTtcbiAgICAgICAgICAgICAgICB9LCBkLnBvc3RNZXNzYWdlKFwiXCIsIFwiKlwiKSwgZC5vbm1lc3NhZ2UgPSBrLCBoO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KCkgPyAoeSA9IFwic2V0SW1tZWRpYXRlJFwiICsgTWF0aC5yYW5kb20oKSArIFwiJFwiLCB3ID0gZnVuY3Rpb24oaCkge1xuICAgICAgICAgICAgICBoLnNvdXJjZSA9PT0gZCAmJiB0eXBlb2YgaC5kYXRhID09IFwic3RyaW5nXCIgJiYgaC5kYXRhLmluZGV4T2YoeSkgPT09IDAgJiYgbSgraC5kYXRhLnNsaWNlKHkubGVuZ3RoKSk7XG4gICAgICAgICAgICB9LCBkLmFkZEV2ZW50TGlzdGVuZXIgPyBkLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIHcsICExKSA6IGQuYXR0YWNoRXZlbnQoXCJvbm1lc3NhZ2VcIiwgdyksIGwgPSBmdW5jdGlvbihoKSB7XG4gICAgICAgICAgICAgIGQucG9zdE1lc3NhZ2UoeSArIGgsIFwiKlwiKTtcbiAgICAgICAgICAgIH0pIDogZC5NZXNzYWdlQ2hhbm5lbCA/ICgocCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpKS5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbihoKSB7XG4gICAgICAgICAgICAgIG0oaC5kYXRhKTtcbiAgICAgICAgICAgIH0sIGwgPSBmdW5jdGlvbihoKSB7XG4gICAgICAgICAgICAgIHAucG9ydDIucG9zdE1lc3NhZ2UoaCk7XG4gICAgICAgICAgICB9KSA6IGMgJiYgXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIiBpbiBjLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikgPyAoZiA9IGMuZG9jdW1lbnRFbGVtZW50LCBsID0gZnVuY3Rpb24oaCkge1xuICAgICAgICAgICAgICB2YXIgayA9IGMuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgICAgay5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBtKGgpLCBrLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGwsIGYucmVtb3ZlQ2hpbGQoayksIGsgPSBudWxsO1xuICAgICAgICAgICAgICB9LCBmLmFwcGVuZENoaWxkKGspO1xuICAgICAgICAgICAgfSkgOiBsID0gZnVuY3Rpb24oaCkge1xuICAgICAgICAgICAgICBzZXRUaW1lb3V0KG0sIDAsIGgpO1xuICAgICAgICAgICAgfSwgdS5zZXRJbW1lZGlhdGUgPSBmdW5jdGlvbihoKSB7XG4gICAgICAgICAgICAgIHR5cGVvZiBoICE9IFwiZnVuY3Rpb25cIiAmJiAoaCA9IG5ldyBGdW5jdGlvbihcIlwiICsgaCkpO1xuICAgICAgICAgICAgICBmb3IgKHZhciBrID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKSwgVCA9IDA7IFQgPCBrLmxlbmd0aDsgVCsrKSBrW1RdID0gYXJndW1lbnRzW1QgKyAxXTtcbiAgICAgICAgICAgICAgdmFyIEUgPSB7IGNhbGxiYWNrOiBoLCBhcmdzOiBrIH07XG4gICAgICAgICAgICAgIHJldHVybiB0W2JdID0gRSwgbChiKSwgYisrO1xuICAgICAgICAgICAgfSwgdS5jbGVhckltbWVkaWF0ZSA9IGc7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIGcoaCkge1xuICAgICAgICAgICAgZGVsZXRlIHRbaF07XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIG0oaCkge1xuICAgICAgICAgICAgaWYgKG4pIHNldFRpbWVvdXQobSwgMCwgaCk7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIGsgPSB0W2hdO1xuICAgICAgICAgICAgICBpZiAoaykge1xuICAgICAgICAgICAgICAgIG4gPSAhMDtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uKFQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIEUgPSBULmNhbGxiYWNrLCBqID0gVC5hcmdzO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGoubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgRSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgRShqWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIEUoalswXSwgalsxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICBFKGpbMF0sIGpbMV0sIGpbMl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIEUuYXBwbHkodiwgaik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pKGspO1xuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICBnKGgpLCBuID0gITE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KSh0eXBlb2Ygc2VsZiA+IFwidVwiID8gZSA9PT0gdm9pZCAwID8gdGhpcyA6IGUgOiBzZWxmKTtcbiAgICAgIH0pLmNhbGwodGhpcywgcigwKSwgcig3KSk7XG4gICAgfSwgZnVuY3Rpb24oYSwgcykge1xuICAgICAgdmFyIHIsIGUsIG8gPSBhLmV4cG9ydHMgPSB7fTtcbiAgICAgIGZ1bmN0aW9uIGQoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInNldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWRcIik7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiB2KCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWRcIik7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBsKHUpIHtcbiAgICAgICAgaWYgKHIgPT09IHNldFRpbWVvdXQpIHJldHVybiBzZXRUaW1lb3V0KHUsIDApO1xuICAgICAgICBpZiAoKHIgPT09IGQgfHwgIXIpICYmIHNldFRpbWVvdXQpIHJldHVybiByID0gc2V0VGltZW91dCwgc2V0VGltZW91dCh1LCAwKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gcih1LCAwKTtcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiByLmNhbGwobnVsbCwgdSwgMCk7XG4gICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICByZXR1cm4gci5jYWxsKHRoaXMsIHUsIDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgKGZ1bmN0aW9uKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHIgPSB0eXBlb2Ygc2V0VGltZW91dCA9PSBcImZ1bmN0aW9uXCIgPyBzZXRUaW1lb3V0IDogZDtcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgciA9IGQ7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBlID0gdHlwZW9mIGNsZWFyVGltZW91dCA9PSBcImZ1bmN0aW9uXCIgPyBjbGVhclRpbWVvdXQgOiB2O1xuICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICBlID0gdjtcbiAgICAgICAgfVxuICAgICAgfSkoKTtcbiAgICAgIHZhciBmLCBwID0gW10sIHkgPSAhMSwgdyA9IC0xO1xuICAgICAgZnVuY3Rpb24gYigpIHtcbiAgICAgICAgeSAmJiBmICYmICh5ID0gITEsIGYubGVuZ3RoID8gcCA9IGYuY29uY2F0KHApIDogdyA9IC0xLCBwLmxlbmd0aCAmJiB0KCkpO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gdCgpIHtcbiAgICAgICAgaWYgKCF5KSB7XG4gICAgICAgICAgdmFyIHUgPSBsKGIpO1xuICAgICAgICAgIHkgPSAhMDtcbiAgICAgICAgICBmb3IgKHZhciBnID0gcC5sZW5ndGg7IGc7ICkge1xuICAgICAgICAgICAgZm9yIChmID0gcCwgcCA9IFtdOyArK3cgPCBnOyApIGYgJiYgZlt3XS5ydW4oKTtcbiAgICAgICAgICAgIHcgPSAtMSwgZyA9IHAubGVuZ3RoO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmID0gbnVsbCwgeSA9ICExLCBmdW5jdGlvbihtKSB7XG4gICAgICAgICAgICBpZiAoZSA9PT0gY2xlYXJUaW1lb3V0KSByZXR1cm4gY2xlYXJUaW1lb3V0KG0pO1xuICAgICAgICAgICAgaWYgKChlID09PSB2IHx8ICFlKSAmJiBjbGVhclRpbWVvdXQpIHJldHVybiBlID0gY2xlYXJUaW1lb3V0LCBjbGVhclRpbWVvdXQobSk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBlKG0pO1xuICAgICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUuY2FsbChudWxsLCBtKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUuY2FsbCh0aGlzLCBtKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0odSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIG4odSwgZykge1xuICAgICAgICB0aGlzLmZ1biA9IHUsIHRoaXMuYXJyYXkgPSBnO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gYygpIHtcbiAgICAgIH1cbiAgICAgIG8ubmV4dFRpY2sgPSBmdW5jdGlvbih1KSB7XG4gICAgICAgIHZhciBnID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSBmb3IgKHZhciBtID0gMTsgbSA8IGFyZ3VtZW50cy5sZW5ndGg7IG0rKykgZ1ttIC0gMV0gPSBhcmd1bWVudHNbbV07XG4gICAgICAgIHAucHVzaChuZXcgbih1LCBnKSksIHAubGVuZ3RoICE9PSAxIHx8IHkgfHwgbCh0KTtcbiAgICAgIH0sIG4ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbiAgICAgIH0sIG8udGl0bGUgPSBcImJyb3dzZXJcIiwgby5icm93c2VyID0gITAsIG8uZW52ID0ge30sIG8uYXJndiA9IFtdLCBvLnZlcnNpb24gPSBcIlwiLCBvLnZlcnNpb25zID0ge30sIG8ub24gPSBjLCBvLmFkZExpc3RlbmVyID0gYywgby5vbmNlID0gYywgby5vZmYgPSBjLCBvLnJlbW92ZUxpc3RlbmVyID0gYywgby5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBjLCBvLmVtaXQgPSBjLCBvLnByZXBlbmRMaXN0ZW5lciA9IGMsIG8ucHJlcGVuZE9uY2VMaXN0ZW5lciA9IGMsIG8ubGlzdGVuZXJzID0gZnVuY3Rpb24odSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9LCBvLmJpbmRpbmcgPSBmdW5jdGlvbih1KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInByb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkXCIpO1xuICAgICAgfSwgby5jd2QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFwiL1wiO1xuICAgICAgfSwgby5jaGRpciA9IGZ1bmN0aW9uKHUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkXCIpO1xuICAgICAgfSwgby51bWFzayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH07XG4gICAgfSwgZnVuY3Rpb24oYSwgcywgcikge1xuICAgICAgZnVuY3Rpb24gZShkLCB2KSB7XG4gICAgICAgIGZvciAodmFyIGwgPSAwOyBsIDwgdi5sZW5ndGg7IGwrKykge1xuICAgICAgICAgIHZhciBmID0gdltsXTtcbiAgICAgICAgICBmLmVudW1lcmFibGUgPSBmLmVudW1lcmFibGUgfHwgITEsIGYuY29uZmlndXJhYmxlID0gITAsIFwidmFsdWVcIiBpbiBmICYmIChmLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZCwgZi5rZXksIGYpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgbyA9IHIoOSk7XG4gICAgICBhLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZnVuY3Rpb24gZCgpIHtcbiAgICAgICAgICAoZnVuY3Rpb24ocCwgeSkge1xuICAgICAgICAgICAgaWYgKCEocCBpbnN0YW5jZW9mIHkpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgICAgICAgIH0pKHRoaXMsIGQpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB2LCBsLCBmO1xuICAgICAgICByZXR1cm4gdiA9IGQsIGYgPSBbeyBrZXk6IFwidXJsRW5jb2RlXCIsIHZhbHVlOiBmdW5jdGlvbihwKSB7XG4gICAgICAgICAgcmV0dXJuIG8ocCk7XG4gICAgICAgIH0gfSwgeyBrZXk6IFwianNvbkVuY29kZVwiLCB2YWx1ZTogZnVuY3Rpb24ocCkge1xuICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShwKTtcbiAgICAgICAgfSB9LCB7IGtleTogXCJmb3JtRW5jb2RlXCIsIHZhbHVlOiBmdW5jdGlvbihwKSB7XG4gICAgICAgICAgaWYgKHRoaXMuaXNGb3JtRGF0YShwKSkgcmV0dXJuIHA7XG4gICAgICAgICAgaWYgKHRoaXMuaXNGb3JtRWxlbWVudChwKSkgcmV0dXJuIG5ldyBGb3JtRGF0YShwKTtcbiAgICAgICAgICBpZiAodGhpcy5pc09iamVjdChwKSkge1xuICAgICAgICAgICAgdmFyIHkgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhwKS5mb3JFYWNoKGZ1bmN0aW9uKHcpIHtcbiAgICAgICAgICAgICAgdmFyIGIgPSBwW3ddO1xuICAgICAgICAgICAgICB5LmFwcGVuZCh3LCBiKTtcbiAgICAgICAgICAgIH0pLCB5O1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgZGF0YWAgbXVzdCBiZSBhbiBpbnN0YW5jZSBvZiBPYmplY3QsIEZvcm1EYXRhIG9yIDxGT1JNPiBIVE1MRWxlbWVudFwiKTtcbiAgICAgICAgfSB9LCB7IGtleTogXCJpc09iamVjdFwiLCB2YWx1ZTogZnVuY3Rpb24ocCkge1xuICAgICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocCkgPT09IFwiW29iamVjdCBPYmplY3RdXCI7XG4gICAgICAgIH0gfSwgeyBrZXk6IFwiaXNGb3JtRGF0YVwiLCB2YWx1ZTogZnVuY3Rpb24ocCkge1xuICAgICAgICAgIHJldHVybiBwIGluc3RhbmNlb2YgRm9ybURhdGE7XG4gICAgICAgIH0gfSwgeyBrZXk6IFwiaXNGb3JtRWxlbWVudFwiLCB2YWx1ZTogZnVuY3Rpb24ocCkge1xuICAgICAgICAgIHJldHVybiBwIGluc3RhbmNlb2YgSFRNTEZvcm1FbGVtZW50O1xuICAgICAgICB9IH0sIHsga2V5OiBcInNlbGVjdEZpbGVzXCIsIHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgcCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdm9pZCAwID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHksIHcpIHtcbiAgICAgICAgICAgIHZhciBiID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIklOUFVUXCIpO1xuICAgICAgICAgICAgYi50eXBlID0gXCJmaWxlXCIsIHAubXVsdGlwbGUgJiYgYi5zZXRBdHRyaWJ1dGUoXCJtdWx0aXBsZVwiLCBcIm11bHRpcGxlXCIpLCBwLmFjY2VwdCAmJiBiLnNldEF0dHJpYnV0ZShcImFjY2VwdFwiLCBwLmFjY2VwdCksIGIuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiLCBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGIpLCBiLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICB2YXIgbiA9IHQudGFyZ2V0LmZpbGVzO1xuICAgICAgICAgICAgICB5KG4pLCBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGIpO1xuICAgICAgICAgICAgfSwgITEpLCBiLmNsaWNrKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gfSwgeyBrZXk6IFwicGFyc2VIZWFkZXJzXCIsIHZhbHVlOiBmdW5jdGlvbihwKSB7XG4gICAgICAgICAgdmFyIHkgPSBwLnRyaW0oKS5zcGxpdCgvW1xcclxcbl0rLyksIHcgPSB7fTtcbiAgICAgICAgICByZXR1cm4geS5mb3JFYWNoKGZ1bmN0aW9uKGIpIHtcbiAgICAgICAgICAgIHZhciB0ID0gYi5zcGxpdChcIjogXCIpLCBuID0gdC5zaGlmdCgpLCBjID0gdC5qb2luKFwiOiBcIik7XG4gICAgICAgICAgICBuICYmICh3W25dID0gYyk7XG4gICAgICAgICAgfSksIHc7XG4gICAgICAgIH0gfV0sIChsID0gbnVsbCkgJiYgZSh2LnByb3RvdHlwZSwgbCksIGYgJiYgZSh2LCBmKSwgZDtcbiAgICAgIH0oKTtcbiAgICB9LCBmdW5jdGlvbihhLCBzKSB7XG4gICAgICB2YXIgciA9IGZ1bmN0aW9uKG8pIHtcbiAgICAgICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChvKS5yZXBsYWNlKC9bIScoKSpdL2csIGVzY2FwZSkucmVwbGFjZSgvJTIwL2csIFwiK1wiKTtcbiAgICAgIH0sIGUgPSBmdW5jdGlvbihvLCBkLCB2LCBsKSB7XG4gICAgICAgIHJldHVybiBkID0gZCB8fCBudWxsLCB2ID0gdiB8fCBcIiZcIiwgbCA9IGwgfHwgbnVsbCwgbyA/IGZ1bmN0aW9uKGYpIHtcbiAgICAgICAgICBmb3IgKHZhciBwID0gbmV3IEFycmF5KCksIHkgPSAwOyB5IDwgZi5sZW5ndGg7IHkrKykgZlt5XSAmJiBwLnB1c2goZlt5XSk7XG4gICAgICAgICAgcmV0dXJuIHA7XG4gICAgICAgIH0oT2JqZWN0LmtleXMobykubWFwKGZ1bmN0aW9uKGYpIHtcbiAgICAgICAgICB2YXIgcCwgeSwgdyA9IGY7XG4gICAgICAgICAgaWYgKGwgJiYgKHcgPSBsICsgXCJbXCIgKyB3ICsgXCJdXCIpLCB0eXBlb2Ygb1tmXSA9PSBcIm9iamVjdFwiICYmIG9bZl0gIT09IG51bGwpIHAgPSBlKG9bZl0sIG51bGwsIHYsIHcpO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZCAmJiAoeSA9IHcsIHcgPSAhaXNOYU4ocGFyc2VGbG9hdCh5KSkgJiYgaXNGaW5pdGUoeSkgPyBkICsgTnVtYmVyKHcpIDogdyk7XG4gICAgICAgICAgICB2YXIgYiA9IG9bZl07XG4gICAgICAgICAgICBiID0gKGIgPSAoYiA9IChiID0gYiA9PT0gITAgPyBcIjFcIiA6IGIpID09PSAhMSA/IFwiMFwiIDogYikgPT09IDAgPyBcIjBcIiA6IGIpIHx8IFwiXCIsIHAgPSByKHcpICsgXCI9XCIgKyByKGIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcDtcbiAgICAgICAgfSkpLmpvaW4odikucmVwbGFjZSgvWyEnKCkqXS9nLCBcIlwiKSA6IFwiXCI7XG4gICAgICB9O1xuICAgICAgYS5leHBvcnRzID0gZTtcbiAgICB9XSk7XG4gIH0pO1xufSkoSCk7XG52YXIgcSA9IEguZXhwb3J0cztcbmNvbnN0IF8gPSAvKiBAX19QVVJFX18gKi8gRChxKTtcbmZ1bmN0aW9uIE8oQykge1xuICByZXR1cm4gQyAhPT0gdm9pZCAwICYmIHR5cGVvZiBDLnRoZW4gPT0gXCJmdW5jdGlvblwiO1xufVxuY2xhc3MgQSB7XG4gIC8qKlxuICAgKiBAcGFyYW0gcGFyYW1zIC0gdXBsb2FkZXIgbW9kdWxlIHBhcmFtc1xuICAgKiBAcGFyYW0gcGFyYW1zLmNvbmZpZyAtIGltYWdlIHRvb2wgY29uZmlnXG4gICAqIEBwYXJhbSBwYXJhbXMub25VcGxvYWQgLSBvbmUgY2FsbGJhY2sgZm9yIGFsbCB1cGxvYWRpbmcgKGZpbGUsIHVybCwgZC1uLWQsIHBhc3RpbmcpXG4gICAqIEBwYXJhbSBwYXJhbXMub25FcnJvciAtIGNhbGxiYWNrIGZvciB1cGxvYWRpbmcgZXJyb3JzXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7IGNvbmZpZzogaSwgb25VcGxvYWQ6IGEsIG9uRXJyb3I6IHMgfSkge1xuICAgIHRoaXMuY29uZmlnID0gaSwgdGhpcy5vblVwbG9hZCA9IGEsIHRoaXMub25FcnJvciA9IHM7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSBjbGlja3Mgb24gdGhlIHVwbG9hZCBmaWxlIGJ1dHRvblxuICAgKiBGaXJlcyBhamF4LnRyYW5zcG9ydCgpXG4gICAqIEBwYXJhbSBvblByZXZpZXcgLSBjYWxsYmFjayBmaXJlZCB3aGVuIHByZXZpZXcgaXMgcmVhZHlcbiAgICovXG4gIHVwbG9hZFNlbGVjdGVkRmlsZSh7IG9uUHJldmlldzogaSB9KSB7XG4gICAgY29uc3QgYSA9IGZ1bmN0aW9uKHIpIHtcbiAgICAgIGNvbnN0IGUgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgZS5yZWFkQXNEYXRhVVJMKHIpLCBlLm9ubG9hZCA9IChvKSA9PiB7XG4gICAgICAgIGkoby50YXJnZXQucmVzdWx0KTtcbiAgICAgIH07XG4gICAgfTtcbiAgICBsZXQgcztcbiAgICBpZiAodGhpcy5jb25maWcudXBsb2FkZXIgJiYgdHlwZW9mIHRoaXMuY29uZmlnLnVwbG9hZGVyLnVwbG9hZEJ5RmlsZSA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGNvbnN0IHIgPSB0aGlzLmNvbmZpZy51cGxvYWRlci51cGxvYWRCeUZpbGU7XG4gICAgICBzID0gXy5zZWxlY3RGaWxlcyh7IGFjY2VwdDogdGhpcy5jb25maWcudHlwZXMgPz8gXCJpbWFnZS8qXCIgfSkudGhlbigoZSkgPT4ge1xuICAgICAgICBhKGVbMF0pO1xuICAgICAgICBjb25zdCBvID0gcihlWzBdKTtcbiAgICAgICAgcmV0dXJuIE8obykgfHwgY29uc29sZS53YXJuKFwiQ3VzdG9tIHVwbG9hZGVyIG1ldGhvZCB1cGxvYWRCeUZpbGUgc2hvdWxkIHJldHVybiBhIFByb21pc2VcIiksIG87XG4gICAgICB9KTtcbiAgICB9IGVsc2VcbiAgICAgIHMgPSBfLnRyYW5zcG9ydCh7XG4gICAgICAgIHVybDogdGhpcy5jb25maWcuZW5kcG9pbnRzLmJ5RmlsZSxcbiAgICAgICAgZGF0YTogdGhpcy5jb25maWcuYWRkaXRpb25hbFJlcXVlc3REYXRhLFxuICAgICAgICBhY2NlcHQ6IHRoaXMuY29uZmlnLnR5cGVzID8/IFwiaW1hZ2UvKlwiLFxuICAgICAgICBoZWFkZXJzOiB0aGlzLmNvbmZpZy5hZGRpdGlvbmFsUmVxdWVzdEhlYWRlcnMsXG4gICAgICAgIGJlZm9yZVNlbmQ6IChyKSA9PiB7XG4gICAgICAgICAgYShyWzBdKTtcbiAgICAgICAgfSxcbiAgICAgICAgZmllbGROYW1lOiB0aGlzLmNvbmZpZy5maWVsZCA/PyBcImltYWdlXCJcbiAgICAgIH0pLnRoZW4oKHIpID0+IHIuYm9keSk7XG4gICAgcy50aGVuKChyKSA9PiB7XG4gICAgICB0aGlzLm9uVXBsb2FkKHIpO1xuICAgIH0pLmNhdGNoKChyKSA9PiB7XG4gICAgICB0aGlzLm9uRXJyb3Iocik7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSBjbGlja3Mgb24gdGhlIHVwbG9hZCBmaWxlIGJ1dHRvblxuICAgKiBGaXJlcyBhamF4LnBvc3QoKVxuICAgKiBAcGFyYW0gdXJsIC0gaW1hZ2Ugc291cmNlIHVybFxuICAgKi9cbiAgdXBsb2FkQnlVcmwoaSkge1xuICAgIGxldCBhO1xuICAgIHRoaXMuY29uZmlnLnVwbG9hZGVyICYmIHR5cGVvZiB0aGlzLmNvbmZpZy51cGxvYWRlci51cGxvYWRCeVVybCA9PSBcImZ1bmN0aW9uXCIgPyAoYSA9IHRoaXMuY29uZmlnLnVwbG9hZGVyLnVwbG9hZEJ5VXJsKGkpLCBPKGEpIHx8IGNvbnNvbGUud2FybihcIkN1c3RvbSB1cGxvYWRlciBtZXRob2QgdXBsb2FkQnlVcmwgc2hvdWxkIHJldHVybiBhIFByb21pc2VcIikpIDogYSA9IF8ucG9zdCh7XG4gICAgICB1cmw6IHRoaXMuY29uZmlnLmVuZHBvaW50cy5ieVVybCxcbiAgICAgIGRhdGE6IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICB1cmw6IGlcbiAgICAgIH0sIHRoaXMuY29uZmlnLmFkZGl0aW9uYWxSZXF1ZXN0RGF0YSksXG4gICAgICB0eXBlOiBfLmNvbnRlbnRUeXBlLkpTT04sXG4gICAgICBoZWFkZXJzOiB0aGlzLmNvbmZpZy5hZGRpdGlvbmFsUmVxdWVzdEhlYWRlcnNcbiAgICB9KS50aGVuKChzKSA9PiBzLmJvZHkpLCBhLnRoZW4oKHMpID0+IHtcbiAgICAgIHRoaXMub25VcGxvYWQocyk7XG4gICAgfSkuY2F0Y2goKHMpID0+IHtcbiAgICAgIHRoaXMub25FcnJvcihzKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlIGNsaWNrcyBvbiB0aGUgdXBsb2FkIGZpbGUgYnV0dG9uXG4gICAqIEZpcmVzIGFqYXgucG9zdCgpXG4gICAqIEBwYXJhbSBmaWxlIC0gZmlsZSBwYXN0ZWQgYnkgZHJhZy1uLWRyb3BcbiAgICogQHBhcmFtIG9uUHJldmlldyAtIGZpbGUgcGFzdGVkIGJ5IGRyYWctbi1kcm9wXG4gICAqL1xuICB1cGxvYWRCeUZpbGUoaSwgeyBvblByZXZpZXc6IGEgfSkge1xuICAgIGNvbnN0IHMgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgIHMucmVhZEFzRGF0YVVSTChpKSwgcy5vbmxvYWQgPSAoZSkgPT4ge1xuICAgICAgYShlLnRhcmdldC5yZXN1bHQpO1xuICAgIH07XG4gICAgbGV0IHI7XG4gICAgaWYgKHRoaXMuY29uZmlnLnVwbG9hZGVyICYmIHR5cGVvZiB0aGlzLmNvbmZpZy51cGxvYWRlci51cGxvYWRCeUZpbGUgPT0gXCJmdW5jdGlvblwiKVxuICAgICAgciA9IHRoaXMuY29uZmlnLnVwbG9hZGVyLnVwbG9hZEJ5RmlsZShpKSwgTyhyKSB8fCBjb25zb2xlLndhcm4oXCJDdXN0b20gdXBsb2FkZXIgbWV0aG9kIHVwbG9hZEJ5RmlsZSBzaG91bGQgcmV0dXJuIGEgUHJvbWlzZVwiKTtcbiAgICBlbHNlIHtcbiAgICAgIGNvbnN0IGUgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgIGUuYXBwZW5kKHRoaXMuY29uZmlnLmZpZWxkID8/IFwiaW1hZ2VcIiwgaSksIHRoaXMuY29uZmlnLmFkZGl0aW9uYWxSZXF1ZXN0RGF0YSAmJiBPYmplY3Qua2V5cyh0aGlzLmNvbmZpZy5hZGRpdGlvbmFsUmVxdWVzdERhdGEpLmxlbmd0aCAmJiBPYmplY3QuZW50cmllcyh0aGlzLmNvbmZpZy5hZGRpdGlvbmFsUmVxdWVzdERhdGEpLmZvckVhY2goKFtvLCBkXSkgPT4ge1xuICAgICAgICBlLmFwcGVuZChvLCBkKTtcbiAgICAgIH0pLCByID0gXy5wb3N0KHtcbiAgICAgICAgdXJsOiB0aGlzLmNvbmZpZy5lbmRwb2ludHMuYnlGaWxlLFxuICAgICAgICBkYXRhOiBlLFxuICAgICAgICB0eXBlOiBfLmNvbnRlbnRUeXBlLkpTT04sXG4gICAgICAgIGhlYWRlcnM6IHRoaXMuY29uZmlnLmFkZGl0aW9uYWxSZXF1ZXN0SGVhZGVyc1xuICAgICAgfSkudGhlbigobykgPT4gby5ib2R5KTtcbiAgICB9XG4gICAgci50aGVuKChlKSA9PiB7XG4gICAgICB0aGlzLm9uVXBsb2FkKGUpO1xuICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICB0aGlzLm9uRXJyb3IoZSk7XG4gICAgfSk7XG4gIH1cbn1cbi8qKlxuICogSW1hZ2UgVG9vbCBmb3IgdGhlIEVkaXRvci5qc1xuICogQGF1dGhvciBDb2RlWCA8dGVhbUBjb2RleC5zbz5cbiAqIEBsaWNlbnNlIE1JVFxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2VkaXRvci1qcy9pbWFnZX1cbiAqXG4gKiBUbyBkZXZlbG9wZXJzLlxuICogVG8gc2ltcGxpZnkgVG9vbCBzdHJ1Y3R1cmUsIHdlIHNwbGl0IGl0IHRvIDQgcGFydHM6XG4gKiAgMSkgaW5kZXgudHMg4oCUIG1haW4gVG9vbCdzIGludGVyZmFjZSwgcHVibGljIEFQSSBhbmQgbWV0aG9kcyBmb3Igd29ya2luZyB3aXRoIGRhdGFcbiAqICAyKSB1cGxvYWRlci50cyDigJQgbW9kdWxlIHRoYXQgaGFzIG1ldGhvZHMgZm9yIHNlbmRpbmcgZmlsZXMgdmlhIEFKQVg6IGZyb20gZGV2aWNlLCBieSBVUkwgb3IgRmlsZSBwYXN0aW5nXG4gKiAgMykgdWkudHMg4oCUIG1vZHVsZSBmb3IgVUkgbWFuaXB1bGF0aW9uczogcmVuZGVyLCBzaG93aW5nIHByZWxvYWRlciwgZXRjXG4gKlxuICogRm9yIGRlYnVnIHB1cnBvc2VzIHRoZXJlIGlzIGEgdGVzdGluZyBzZXJ2ZXJcbiAqIHRoYXQgY2FuIHNhdmUgdXBsb2FkZWQgZmlsZXMgYW5kIHJldHVybiBhIFJlc3BvbnNlIHtAbGluayBVcGxvYWRSZXNwb25zZUZvcm1hdH1cbiAqXG4gKiAgICAgICAkIG5vZGUgZGV2L3NlcnZlci5qc1xuICpcbiAqIEl0IHdpbGwgZXhwb3NlIDgwMDggcG9ydCwgc28geW91IGNhbiBwYXNzIGh0dHA6Ly9sb2NhbGhvc3Q6ODAwOCB3aXRoIHRoZSBUb29scyBjb25maWc6XG4gKlxuICogaW1hZ2U6IHtcbiAqICAgY2xhc3M6IEltYWdlVG9vbCxcbiAqICAgY29uZmlnOiB7XG4gKiAgICAgZW5kcG9pbnRzOiB7XG4gKiAgICAgICBieUZpbGU6ICdodHRwOi8vbG9jYWxob3N0OjgwMDgvdXBsb2FkRmlsZScsXG4gKiAgICAgICBieVVybDogJ2h0dHA6Ly9sb2NhbGhvc3Q6ODAwOC9mZXRjaFVybCcsXG4gKiAgICAgfVxuICogICB9LFxuICogfSxcbiAqL1xuY2xhc3MgUCB7XG4gIC8qKlxuICAgKiBAcGFyYW0gdG9vbCAtIHRvb2wgcHJvcGVydGllcyBnb3QgZnJvbSBlZGl0b3IuanNcbiAgICogQHBhcmFtIHRvb2wuZGF0YSAtIHByZXZpb3VzbHkgc2F2ZWQgZGF0YVxuICAgKiBAcGFyYW0gdG9vbC5jb25maWcgLSB1c2VyIGNvbmZpZyBmb3IgVG9vbFxuICAgKiBAcGFyYW0gdG9vbC5hcGkgLSBFZGl0b3IuanMgQVBJXG4gICAqIEBwYXJhbSB0b29sLnJlYWRPbmx5IC0gcmVhZC1vbmx5IG1vZGUgZmxhZ1xuICAgKiBAcGFyYW0gdG9vbC5ibG9jayAtIGN1cnJlbnQgQmxvY2sgQVBJXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7IGRhdGE6IGksIGNvbmZpZzogYSwgYXBpOiBzLCByZWFkT25seTogciwgYmxvY2s6IGUgfSkge1xuICAgIHRoaXMuYXBpID0gcywgdGhpcy5ibG9jayA9IGUsIHRoaXMuY29uZmlnID0ge1xuICAgICAgZW5kcG9pbnRzOiBhLmVuZHBvaW50cyxcbiAgICAgIGFkZGl0aW9uYWxSZXF1ZXN0RGF0YTogYS5hZGRpdGlvbmFsUmVxdWVzdERhdGEsXG4gICAgICBhZGRpdGlvbmFsUmVxdWVzdEhlYWRlcnM6IGEuYWRkaXRpb25hbFJlcXVlc3RIZWFkZXJzLFxuICAgICAgZmllbGQ6IGEuZmllbGQsXG4gICAgICB0eXBlczogYS50eXBlcyxcbiAgICAgIGNhcHRpb25QbGFjZWhvbGRlcjogdGhpcy5hcGkuaTE4bi50KGEuY2FwdGlvblBsYWNlaG9sZGVyID8/IFwiQ2FwdGlvblwiKSxcbiAgICAgIGJ1dHRvbkNvbnRlbnQ6IGEuYnV0dG9uQ29udGVudCxcbiAgICAgIHVwbG9hZGVyOiBhLnVwbG9hZGVyLFxuICAgICAgYWN0aW9uczogYS5hY3Rpb25zLFxuICAgICAgZmVhdHVyZXM6IGEuZmVhdHVyZXMgfHwge31cbiAgICB9LCB0aGlzLnVwbG9hZGVyID0gbmV3IEEoe1xuICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICAgIG9uVXBsb2FkOiAobykgPT4gdGhpcy5vblVwbG9hZChvKSxcbiAgICAgIG9uRXJyb3I6IChvKSA9PiB0aGlzLnVwbG9hZGluZ0ZhaWxlZChvKVxuICAgIH0pLCB0aGlzLnVpID0gbmV3IFUoe1xuICAgICAgYXBpOiBzLFxuICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICAgIG9uU2VsZWN0RmlsZTogKCkgPT4ge1xuICAgICAgICB0aGlzLnVwbG9hZGVyLnVwbG9hZFNlbGVjdGVkRmlsZSh7XG4gICAgICAgICAgb25QcmV2aWV3OiAobykgPT4ge1xuICAgICAgICAgICAgdGhpcy51aS5zaG93UHJlbG9hZGVyKG8pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgcmVhZE9ubHk6IHJcbiAgICB9KSwgdGhpcy5fZGF0YSA9IHtcbiAgICAgIGNhcHRpb246IFwiXCIsXG4gICAgICB3aXRoQm9yZGVyOiAhMSxcbiAgICAgIHdpdGhCYWNrZ3JvdW5kOiAhMSxcbiAgICAgIHN0cmV0Y2hlZDogITEsXG4gICAgICBmaWxlOiB7XG4gICAgICAgIHVybDogXCJcIlxuICAgICAgfVxuICAgIH0sIHRoaXMuZGF0YSA9IGk7XG4gIH1cbiAgLyoqXG4gICAqIE5vdGlmeSBjb3JlIHRoYXQgcmVhZC1vbmx5IG1vZGUgaXMgc3VwcG9ydGVkXG4gICAqL1xuICBzdGF0aWMgZ2V0IGlzUmVhZE9ubHlTdXBwb3J0ZWQoKSB7XG4gICAgcmV0dXJuICEwO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgVG9vbCB0b29sYm94IHNldHRpbmdzXG4gICAqIGljb24gLSBUb29sIGljb24ncyBTVkdcbiAgICogdGl0bGUgLSB0aXRsZSB0byBzaG93IGluIHRvb2xib3hcbiAgICovXG4gIHN0YXRpYyBnZXQgdG9vbGJveCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaWNvbjogTCxcbiAgICAgIHRpdGxlOiBcIkltYWdlXCJcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBBdmFpbGFibGUgaW1hZ2UgdG9vbHNcbiAgICovXG4gIHN0YXRpYyBnZXQgdHVuZXMoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJ3aXRoQm9yZGVyXCIsXG4gICAgICAgIGljb246IEksXG4gICAgICAgIHRpdGxlOiBcIldpdGggYm9yZGVyXCIsXG4gICAgICAgIHRvZ2dsZTogITBcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwic3RyZXRjaGVkXCIsXG4gICAgICAgIGljb246IHgsXG4gICAgICAgIHRpdGxlOiBcIlN0cmV0Y2ggaW1hZ2VcIixcbiAgICAgICAgdG9nZ2xlOiAhMFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJ3aXRoQmFja2dyb3VuZFwiLFxuICAgICAgICBpY29uOiBSLFxuICAgICAgICB0aXRsZTogXCJXaXRoIGJhY2tncm91bmRcIixcbiAgICAgICAgdG9nZ2xlOiAhMFxuICAgICAgfVxuICAgIF07XG4gIH1cbiAgLyoqXG4gICAqIFJlbmRlcnMgQmxvY2sgY29udGVudFxuICAgKi9cbiAgcmVuZGVyKCkge1xuICAgIHZhciBpLCBhLCBzO1xuICAgIHJldHVybiAoKChpID0gdGhpcy5jb25maWcuZmVhdHVyZXMpID09IG51bGwgPyB2b2lkIDAgOiBpLmNhcHRpb24pID09PSAhMCB8fCAoKGEgPSB0aGlzLmNvbmZpZy5mZWF0dXJlcykgPT0gbnVsbCA/IHZvaWQgMCA6IGEuY2FwdGlvbikgPT09IHZvaWQgMCB8fCAoKHMgPSB0aGlzLmNvbmZpZy5mZWF0dXJlcykgPT0gbnVsbCA/IHZvaWQgMCA6IHMuY2FwdGlvbikgPT09IFwib3B0aW9uYWxcIiAmJiB0aGlzLmRhdGEuY2FwdGlvbikgJiYgdGhpcy51aS5hcHBseVR1bmUoXCJjYXB0aW9uXCIsICEwKSwgdGhpcy51aS5yZW5kZXIodGhpcy5kYXRhKTtcbiAgfVxuICAvKipcbiAgICogVmFsaWRhdGUgZGF0YTogY2hlY2sgaWYgSW1hZ2UgZXhpc3RzXG4gICAqIEBwYXJhbSBzYXZlZERhdGEg4oCUIGRhdGEgcmVjZWl2ZWQgYWZ0ZXIgc2F2aW5nXG4gICAqIEByZXR1cm5zIGZhbHNlIGlmIHNhdmVkIGRhdGEgaXMgbm90IGNvcnJlY3QsIG90aGVyd2lzZSB0cnVlXG4gICAqL1xuICB2YWxpZGF0ZShpKSB7XG4gICAgcmV0dXJuICEhaS5maWxlLnVybDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIEJsb2NrIGRhdGFcbiAgICovXG4gIHNhdmUoKSB7XG4gICAgY29uc3QgaSA9IHRoaXMudWkubm9kZXMuY2FwdGlvbjtcbiAgICByZXR1cm4gdGhpcy5fZGF0YS5jYXB0aW9uID0gaS5pbm5lckhUTUwsIHRoaXMuZGF0YTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBjb25maWd1cmF0aW9uIGZvciBibG9jayB0dW5lczogYWRkIGJhY2tncm91bmQsIGFkZCBib3JkZXIsIHN0cmV0Y2ggaW1hZ2VcbiAgICogQHJldHVybnMgVHVuZXNNZW51Q29uZmlnXG4gICAqL1xuICByZW5kZXJTZXR0aW5ncygpIHtcbiAgICB2YXIgcjtcbiAgICBjb25zdCBpID0gUC50dW5lcy5jb25jYXQodGhpcy5jb25maWcuYWN0aW9ucyB8fCBbXSksIGEgPSB7XG4gICAgICBib3JkZXI6IFwid2l0aEJvcmRlclwiLFxuICAgICAgYmFja2dyb3VuZDogXCJ3aXRoQmFja2dyb3VuZFwiLFxuICAgICAgc3RyZXRjaDogXCJzdHJldGNoZWRcIixcbiAgICAgIGNhcHRpb246IFwiY2FwdGlvblwiXG4gICAgfTtcbiAgICByZXR1cm4gKChyID0gdGhpcy5jb25maWcuZmVhdHVyZXMpID09IG51bGwgPyB2b2lkIDAgOiByLmNhcHRpb24pID09PSBcIm9wdGlvbmFsXCIgJiYgaS5wdXNoKHtcbiAgICAgIG5hbWU6IFwiY2FwdGlvblwiLFxuICAgICAgaWNvbjogQixcbiAgICAgIHRpdGxlOiBcIldpdGggY2FwdGlvblwiLFxuICAgICAgdG9nZ2xlOiAhMFxuICAgIH0pLCBpLmZpbHRlcigoZSkgPT4ge1xuICAgICAgdmFyIGQsIHY7XG4gICAgICBjb25zdCBvID0gT2JqZWN0LmtleXMoYSkuZmluZCgobCkgPT4gYVtsXSA9PT0gZS5uYW1lKTtcbiAgICAgIHJldHVybiBvID09PSBcImNhcHRpb25cIiA/ICgoZCA9IHRoaXMuY29uZmlnLmZlYXR1cmVzKSA9PSBudWxsID8gdm9pZCAwIDogZC5jYXB0aW9uKSAhPT0gITEgOiBvID09IG51bGwgfHwgKCh2ID0gdGhpcy5jb25maWcuZmVhdHVyZXMpID09IG51bGwgPyB2b2lkIDAgOiB2W29dKSAhPT0gITE7XG4gICAgfSkubWFwKChlKSA9PiAoe1xuICAgICAgaWNvbjogZS5pY29uLFxuICAgICAgbGFiZWw6IHRoaXMuYXBpLmkxOG4udChlLnRpdGxlKSxcbiAgICAgIG5hbWU6IGUubmFtZSxcbiAgICAgIHRvZ2dsZTogZS50b2dnbGUsXG4gICAgICBpc0FjdGl2ZTogdGhpcy5kYXRhW2UubmFtZV0sXG4gICAgICBvbkFjdGl2YXRlOiAoKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgZS5hY3Rpb24gPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgZS5hY3Rpb24oZS5uYW1lKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50dW5lVG9nZ2xlZChlLm5hbWUpO1xuICAgICAgfVxuICAgIH0pKTtcbiAgfVxuICAvKipcbiAgICogRmlyZXMgYWZ0ZXIgY2xpY2tzIG9uIHRoZSBUb29sYm94IEltYWdlIEljb25cbiAgICogSW5pdGlhdGVzIGNsaWNrIG9uIHRoZSBTZWxlY3QgRmlsZSBidXR0b25cbiAgICovXG4gIGFwcGVuZENhbGxiYWNrKCkge1xuICAgIHRoaXMudWkubm9kZXMuZmlsZUJ1dHRvbi5jbGljaygpO1xuICB9XG4gIC8qKlxuICAgKiBTcGVjaWZ5IHBhc3RlIHN1YnN0aXR1dGVzXG4gICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9jb2RleC10ZWFtL2VkaXRvci5qcy9ibG9iL21hc3Rlci9kb2NzL3Rvb2xzLm1kI3Bhc3RlLWhhbmRsaW5nfVxuICAgKi9cbiAgc3RhdGljIGdldCBwYXN0ZUNvbmZpZygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLyoqXG4gICAgICAgKiBQYXN0ZSBIVE1MIGludG8gRWRpdG9yXG4gICAgICAgKi9cbiAgICAgIHRhZ3M6IFtcbiAgICAgICAge1xuICAgICAgICAgIGltZzogeyBzcmM6ICEwIH1cbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIC8qKlxuICAgICAgICogUGFzdGUgVVJMIG9mIGltYWdlIGludG8gdGhlIEVkaXRvclxuICAgICAgICovXG4gICAgICBwYXR0ZXJuczoge1xuICAgICAgICBpbWFnZTogL2h0dHBzPzpcXC9cXC9cXFMrXFwuKGdpZnxqcGU/Z3x0aWZmfHBuZ3xzdmd8d2VicCkoXFw/W2EtejAtOT1dKik/JC9pXG4gICAgICB9LFxuICAgICAgLyoqXG4gICAgICAgKiBEcmFnIG4gZHJvcCBmaWxlIGZyb20gaW50byB0aGUgRWRpdG9yXG4gICAgICAgKi9cbiAgICAgIGZpbGVzOiB7XG4gICAgICAgIG1pbWVUeXBlczogW1wiaW1hZ2UvKlwiXVxuICAgICAgfVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIFNwZWNpZnkgcGFzdGUgaGFuZGxlcnNcbiAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2NvZGV4LXRlYW0vZWRpdG9yLmpzL2Jsb2IvbWFzdGVyL2RvY3MvdG9vbHMubWQjcGFzdGUtaGFuZGxpbmd9XG4gICAqIEBwYXJhbSBldmVudCAtIGVkaXRvci5qcyBjdXN0b20gcGFzdGUgZXZlbnRcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2NvZGV4LXRlYW0vZWRpdG9yLmpzL2Jsb2IvbWFzdGVyL3R5cGVzL3Rvb2xzL3Bhc3RlLWV2ZW50cy5kLnRzfVxuICAgKi9cbiAgYXN5bmMgb25QYXN0ZShpKSB7XG4gICAgc3dpdGNoIChpLnR5cGUpIHtcbiAgICAgIGNhc2UgXCJ0YWdcIjoge1xuICAgICAgICBjb25zdCBhID0gaS5kZXRhaWwuZGF0YTtcbiAgICAgICAgaWYgKC9eYmxvYjovLnRlc3QoYS5zcmMpKSB7XG4gICAgICAgICAgY29uc3QgciA9IGF3YWl0IChhd2FpdCBmZXRjaChhLnNyYykpLmJsb2IoKTtcbiAgICAgICAgICB0aGlzLnVwbG9hZEZpbGUocik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGxvYWRVcmwoYS5zcmMpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJwYXR0ZXJuXCI6IHtcbiAgICAgICAgY29uc3QgYSA9IGkuZGV0YWlsLmRhdGE7XG4gICAgICAgIHRoaXMudXBsb2FkVXJsKGEpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJmaWxlXCI6IHtcbiAgICAgICAgY29uc3QgYSA9IGkuZGV0YWlsLmZpbGU7XG4gICAgICAgIHRoaXMudXBsb2FkRmlsZShhKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBQcml2YXRlIG1ldGhvZHNcbiAgICogzL/MvyDMv8y/IMy/zL8gzL8nzL8nXFzMtc2HzL/Mv1xc0Lc9ICgg4paAIM2czZ7KluKWgCkgPc61L8y1zYfMv8y/L+KAmcy/4oCZzL8gzL8gzL/MvyDMv8y/IMy/zL9cbiAgICovXG4gIC8qKlxuICAgKiBTdG9yZXMgYWxsIFRvb2wncyBkYXRhXG4gICAqIEBwYXJhbSBkYXRhIC0gZGF0YSBpbiBJbWFnZSBUb29sIGZvcm1hdFxuICAgKi9cbiAgc2V0IGRhdGEoaSkge1xuICAgIHRoaXMuaW1hZ2UgPSBpLmZpbGUsIHRoaXMuX2RhdGEuY2FwdGlvbiA9IGkuY2FwdGlvbiB8fCBcIlwiLCB0aGlzLnVpLmZpbGxDYXB0aW9uKHRoaXMuX2RhdGEuY2FwdGlvbiksIFAudHVuZXMuZm9yRWFjaCgoeyBuYW1lOiBhIH0pID0+IHtcbiAgICAgIGNvbnN0IHMgPSB0eXBlb2YgaVthXSA8IFwidVwiID8gaVthXSA9PT0gITAgfHwgaVthXSA9PT0gXCJ0cnVlXCIgOiAhMTtcbiAgICAgIHRoaXMuc2V0VHVuZShhLCBzKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIFRvb2wgZGF0YVxuICAgKi9cbiAgZ2V0IGRhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGE7XG4gIH1cbiAgLyoqXG4gICAqIFNldCBuZXcgaW1hZ2UgZmlsZVxuICAgKiBAcGFyYW0gZmlsZSAtIHVwbG9hZGVkIGZpbGUgZGF0YVxuICAgKi9cbiAgc2V0IGltYWdlKGkpIHtcbiAgICB0aGlzLl9kYXRhLmZpbGUgPSBpIHx8IHsgdXJsOiBcIlwiIH0sIGkgJiYgaS51cmwgJiYgdGhpcy51aS5maWxsSW1hZ2UoaS51cmwpO1xuICB9XG4gIC8qKlxuICAgKiBGaWxlIHVwbG9hZGluZyBjYWxsYmFja1xuICAgKiBAcGFyYW0gcmVzcG9uc2UgLSB1cGxvYWRpbmcgc2VydmVyIHJlc3BvbnNlXG4gICAqL1xuICBvblVwbG9hZChpKSB7XG4gICAgaS5zdWNjZXNzICYmIGkuZmlsZSA/IHRoaXMuaW1hZ2UgPSBpLmZpbGUgOiB0aGlzLnVwbG9hZGluZ0ZhaWxlZChcImluY29ycmVjdCByZXNwb25zZTogXCIgKyBKU09OLnN0cmluZ2lmeShpKSk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSB1cGxvYWRlciBlcnJvcnNcbiAgICogQHBhcmFtIGVycm9yVGV4dCAtIHVwbG9hZGluZyBlcnJvciBpbmZvXG4gICAqL1xuICB1cGxvYWRpbmdGYWlsZWQoaSkge1xuICAgIGNvbnNvbGUubG9nKFwiSW1hZ2UgVG9vbDogdXBsb2FkaW5nIGZhaWxlZCBiZWNhdXNlIG9mXCIsIGkpLCB0aGlzLmFwaS5ub3RpZmllci5zaG93KHtcbiAgICAgIG1lc3NhZ2U6IHRoaXMuYXBpLmkxOG4udChcIkNvdWxkbuKAmXQgdXBsb2FkIGltYWdlLiBQbGVhc2UgdHJ5IGFub3RoZXIuXCIpLFxuICAgICAgc3R5bGU6IFwiZXJyb3JcIlxuICAgIH0pLCB0aGlzLnVpLmhpZGVQcmVsb2FkZXIoKTtcbiAgfVxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiBCbG9jayBUdW5lIGlzIGFjdGl2YXRlZFxuICAgKiBAcGFyYW0gdHVuZU5hbWUgLSB0dW5lIHRoYXQgaGFzIGJlZW4gY2xpY2tlZFxuICAgKi9cbiAgdHVuZVRvZ2dsZWQoaSkge1xuICAgIHRoaXMuc2V0VHVuZShpLCAhdGhpcy5fZGF0YVtpXSksIGkgPT09IFwiY2FwdGlvblwiICYmICF0aGlzLl9kYXRhW2ldICYmICh0aGlzLl9kYXRhLmNhcHRpb24gPSBcIlwiLCB0aGlzLnVpLmZpbGxDYXB0aW9uKFwiXCIpKTtcbiAgfVxuICAvKipcbiAgICogU2V0IG9uZSB0dW5lXG4gICAqIEBwYXJhbSB0dW5lTmFtZSAtIHtAbGluayBUdW5lcy50dW5lc31cbiAgICogQHBhcmFtIHZhbHVlIC0gdHVuZSBzdGF0ZVxuICAgKi9cbiAgc2V0VHVuZShpLCBhKSB7XG4gICAgdGhpcy5fZGF0YVtpXSA9IGEsIHRoaXMudWkuYXBwbHlUdW5lKGksIGEpLCBpID09PSBcInN0cmV0Y2hlZFwiICYmIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgdGhpcy5ibG9jay5zdHJldGNoZWQgPSBhO1xuICAgIH0pLmNhdGNoKChzKSA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKHMpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBTaG93IHByZWxvYWRlciBhbmQgdXBsb2FkIGltYWdlIGZpbGVcbiAgICogQHBhcmFtIGZpbGUgLSBmaWxlIHRoYXQgaXMgY3VycmVudGx5IHVwbG9hZGluZyAoZnJvbSBwYXN0ZSlcbiAgICovXG4gIHVwbG9hZEZpbGUoaSkge1xuICAgIHRoaXMudXBsb2FkZXIudXBsb2FkQnlGaWxlKGksIHtcbiAgICAgIG9uUHJldmlldzogKGEpID0+IHtcbiAgICAgICAgdGhpcy51aS5zaG93UHJlbG9hZGVyKGEpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBTaG93IHByZWxvYWRlciBhbmQgdXBsb2FkIGltYWdlIGJ5IHRhcmdldCB1cmxcbiAgICogQHBhcmFtIHVybCAtIHVybCBwYXN0ZWRcbiAgICovXG4gIHVwbG9hZFVybChpKSB7XG4gICAgdGhpcy51aS5zaG93UHJlbG9hZGVyKGkpLCB0aGlzLnVwbG9hZGVyLnVwbG9hZEJ5VXJsKGkpO1xuICB9XG59XG5leHBvcnQge1xuICBQIGFzIGRlZmF1bHRcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@editorjs/image/dist/image.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@editorjs/list/dist/editorjs-list.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@editorjs/list/dist/editorjs-list.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ G)\n/* harmony export */ });\n(function(){\"use strict\";try{if(typeof document<\"u\"){var e=document.createElement(\"style\");e.appendChild(document.createTextNode('.cdx-list{margin:0;padding:0;outline:none;display:grid;counter-reset:item;gap:var(--spacing-s);padding:var(--spacing-xs);--spacing-s: 8px;--spacing-xs: 6px;--list-counter-type: numeric;--radius-border: 5px;--checkbox-background: #fff;--color-border: #C9C9C9;--color-bg-checked: #369FFF;--line-height: 1.45em;--color-bg-checked-hover: #0059AB;--color-tick: #fff;--size-checkbox: 1.2em}.cdx-list__item{line-height:var(--line-height);display:grid;grid-template-columns:auto 1fr;grid-template-rows:auto auto;grid-template-areas:\"checkbox content\" \". child\"}.cdx-list__item-children{display:grid;grid-area:child;gap:var(--spacing-s);padding-top:var(--spacing-s)}.cdx-list__item [contenteditable]{outline:none}.cdx-list__item-content{word-break:break-word;white-space:pre-wrap;grid-area:content;padding-left:var(--spacing-s)}.cdx-list__item:before{counter-increment:item;white-space:nowrap}.cdx-list-ordered .cdx-list__item:before{content:counters(item,\".\",var(--list-counter-type)) \".\"}.cdx-list-ordered{counter-reset:item}.cdx-list-unordered .cdx-list__item:before{content:\"•\"}.cdx-list-checklist .cdx-list__item:before{content:\"\"}.cdx-list__settings .cdx-settings-button{width:50%}.cdx-list__checkbox{padding-top:calc((var(--line-height) - var(--size-checkbox)) / 2);grid-area:checkbox;width:var(--size-checkbox);height:var(--size-checkbox);display:flex;cursor:pointer}.cdx-list__checkbox svg{opacity:0;height:var(--size-checkbox);width:var(--size-checkbox);left:-1px;top:-1px;position:absolute}@media (hover: hover){.cdx-list__checkbox:not(.cdx-list__checkbox--no-hover):hover .cdx-list__checkbox-check svg{opacity:1}}.cdx-list__checkbox--checked{line-height:var(--line-height)}@media (hover: hover){.cdx-list__checkbox--checked:not(.cdx-list__checkbox--checked--no-hover):hover .cdx-checklist__checkbox-check{background:var(--color-bg-checked-hover);border-color:var(--color-bg-checked-hover)}}.cdx-list__checkbox--checked .cdx-list__checkbox-check{background:var(--color-bg-checked);border-color:var(--color-bg-checked)}.cdx-list__checkbox--checked .cdx-list__checkbox-check svg{opacity:1}.cdx-list__checkbox--checked .cdx-list__checkbox-check svg path{stroke:var(--color-tick)}.cdx-list__checkbox--checked .cdx-list__checkbox-check:before{opacity:0;visibility:visible;transform:scale(2.5)}.cdx-list__checkbox-check{cursor:pointer;display:inline-block;position:relative;margin:0 auto;width:var(--size-checkbox);height:var(--size-checkbox);box-sizing:border-box;border-radius:var(--radius-border);border:1px solid var(--color-border);background:var(--checkbox-background)}.cdx-list__checkbox-check:before{content:\"\";position:absolute;top:0;right:0;bottom:0;left:0;border-radius:100%;background-color:var(--color-bg-checked);visibility:hidden;pointer-events:none;transform:scale(1);transition:transform .4s ease-out,opacity .4s}.cdx-list-start-with-field{background:#F8F8F8;border:1px solid rgba(226,226,229,.2);border-radius:6px;padding:2px;display:grid;grid-template-columns:auto auto 1fr;grid-template-rows:auto}.cdx-list-start-with-field--invalid{background:#FFECED;border:1px solid #E13F3F}.cdx-list-start-with-field--invalid .cdx-list-start-with-field__input{color:#e13f3f}.cdx-list-start-with-field__input{font-size:14px;outline:none;font-weight:500;font-family:inherit;border:0;background:transparent;margin:0;padding:0;line-height:22px;min-width:calc(100% - var(--toolbox-buttons-size) - var(--icon-margin-right))}.cdx-list-start-with-field__input::placeholder{color:var(--grayText);font-weight:500}')),document.head.appendChild(e)}}catch(c){console.error(\"vite-plugin-css-injected-by-js\",c)}})();\nconst Ct = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M7 12L10.4884 15.8372C10.5677 15.9245 10.705 15.9245 10.7844 15.8372L17 9\"/></svg>', Ae = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M9.2 12L11.0586 13.8586C11.1367 13.9367 11.2633 13.9367 11.3414 13.8586L14.7 10.5\"/><rect width=\"14\" height=\"14\" x=\"5\" y=\"5\" stroke=\"currentColor\" stroke-width=\"2\" rx=\"4\"/></svg>', $e = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><line x1=\"9\" x2=\"19\" y1=\"7\" y2=\"7\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><line x1=\"9\" x2=\"19\" y1=\"12\" y2=\"12\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><line x1=\"9\" x2=\"19\" y1=\"17\" y2=\"17\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M5.00001 17H4.99002\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M5.00001 12H4.99002\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M5.00001 7H4.99002\"/></svg>', Be = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><line x1=\"12\" x2=\"19\" y1=\"7\" y2=\"7\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><line x1=\"12\" x2=\"19\" y1=\"12\" y2=\"12\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><line x1=\"12\" x2=\"19\" y1=\"17\" y2=\"17\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M7.79999 14L7.79999 7.2135C7.79999 7.12872 7.7011 7.0824 7.63597 7.13668L4.79999 9.5\"/></svg>', St = '<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 14.2L10 7.4135C10 7.32872 9.90111 7.28241 9.83598 7.33668L7 9.7\" stroke=\"black\" stroke-width=\"1.6\" stroke-linecap=\"round\"/><path d=\"M13.2087 14.2H13.2\" stroke=\"black\" stroke-width=\"1.6\" stroke-linecap=\"round\"/></svg>', Ot = '<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13.2087 14.2H13.2\" stroke=\"black\" stroke-width=\"1.6\" stroke-linecap=\"round\"/><path d=\"M10 14.2L10 9.5\" stroke=\"black\" stroke-width=\"1.6\" stroke-linecap=\"round\"/><path d=\"M10 7.01L10 7\" stroke=\"black\" stroke-width=\"1.8\" stroke-linecap=\"round\"/></svg>', kt = '<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13.2087 14.2H13.2\" stroke=\"black\" stroke-width=\"1.6\" stroke-linecap=\"round\"/><path d=\"M10 14.2L10 7.2\" stroke=\"black\" stroke-width=\"1.6\" stroke-linecap=\"round\"/></svg>', _t = '<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16.0087 14.2H16\" stroke=\"black\" stroke-width=\"1.6\" stroke-linecap=\"round\"/><path d=\"M7 14.2L7.78865 12M13 14.2L12.1377 12M7.78865 12C7.78865 12 9.68362 7 10 7C10.3065 7 12.1377 12 12.1377 12M7.78865 12L12.1377 12\" stroke=\"black\" stroke-width=\"1.6\" stroke-linecap=\"round\"/></svg>', Et = '<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M14.2087 14.2H14.2\" stroke=\"black\" stroke-width=\"1.6\" stroke-linecap=\"round\"/><path d=\"M11.5 14.5C11.5 14.5 11 13.281 11 12.5M7 9.5C7 9.5 7.5 8.5 9 8.5C10.5 8.5 11 9.5 11 10.5L11 11.5M11 11.5L11 12.5M11 11.5C11 11.5 7 11 7 13C7 15.3031 11 15 11 12.5\" stroke=\"black\" stroke-width=\"1.6\" stroke-linecap=\"round\"/></svg>', It = '<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M8 14.2L8 7.4135C8 7.32872 7.90111 7.28241 7.83598 7.33668L5 9.7\" stroke=\"black\" stroke-width=\"1.6\" stroke-linecap=\"round\"/><path d=\"M14 13L16.4167 10.7778M16.4167 10.7778L14 8.5M16.4167 10.7778H11.6562\" stroke=\"black\" stroke-width=\"1.6\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg>';\nvar A = typeof globalThis < \"u\" ? globalThis : typeof window < \"u\" ? window : typeof global < \"u\" ? global : typeof self < \"u\" ? self : {};\nfunction wt(e) {\n  if (e.__esModule)\n    return e;\n  var t = e.default;\n  if (typeof t == \"function\") {\n    var n = function r() {\n      return this instanceof r ? Reflect.construct(t, arguments, this.constructor) : t.apply(this, arguments);\n    };\n    n.prototype = t.prototype;\n  } else\n    n = {};\n  return Object.defineProperty(n, \"__esModule\", { value: !0 }), Object.keys(e).forEach(function(r) {\n    var i = Object.getOwnPropertyDescriptor(e, r);\n    Object.defineProperty(n, r, i.get ? i : {\n      enumerable: !0,\n      get: function() {\n        return e[r];\n      }\n    });\n  }), n;\n}\nvar c = {}, V = {}, Y = {};\nObject.defineProperty(Y, \"__esModule\", { value: !0 });\nY.allInputsSelector = Pt;\nfunction Pt() {\n  var e = [\"text\", \"password\", \"email\", \"number\", \"search\", \"tel\", \"url\"];\n  return \"[contenteditable=true], textarea, input:not([type]), \" + e.map(function(t) {\n    return 'input[type=\"'.concat(t, '\"]');\n  }).join(\", \");\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.allInputsSelector = void 0;\n  var t = Y;\n  Object.defineProperty(e, \"allInputsSelector\", { enumerable: !0, get: function() {\n    return t.allInputsSelector;\n  } });\n})(V);\nvar k = {}, J = {};\nObject.defineProperty(J, \"__esModule\", { value: !0 });\nJ.isNativeInput = jt;\nfunction jt(e) {\n  var t = [\n    \"INPUT\",\n    \"TEXTAREA\"\n  ];\n  return e && e.tagName ? t.includes(e.tagName) : !1;\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.isNativeInput = void 0;\n  var t = J;\n  Object.defineProperty(e, \"isNativeInput\", { enumerable: !0, get: function() {\n    return t.isNativeInput;\n  } });\n})(k);\nvar Fe = {}, Q = {};\nObject.defineProperty(Q, \"__esModule\", { value: !0 });\nQ.append = Tt;\nfunction Tt(e, t) {\n  Array.isArray(t) ? t.forEach(function(n) {\n    e.appendChild(n);\n  }) : e.appendChild(t);\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.append = void 0;\n  var t = Q;\n  Object.defineProperty(e, \"append\", { enumerable: !0, get: function() {\n    return t.append;\n  } });\n})(Fe);\nvar Z = {}, x = {};\nObject.defineProperty(x, \"__esModule\", { value: !0 });\nx.blockElements = Lt;\nfunction Lt() {\n  return [\n    \"address\",\n    \"article\",\n    \"aside\",\n    \"blockquote\",\n    \"canvas\",\n    \"div\",\n    \"dl\",\n    \"dt\",\n    \"fieldset\",\n    \"figcaption\",\n    \"figure\",\n    \"footer\",\n    \"form\",\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\",\n    \"header\",\n    \"hgroup\",\n    \"hr\",\n    \"li\",\n    \"main\",\n    \"nav\",\n    \"noscript\",\n    \"ol\",\n    \"output\",\n    \"p\",\n    \"pre\",\n    \"ruby\",\n    \"section\",\n    \"table\",\n    \"tbody\",\n    \"thead\",\n    \"tr\",\n    \"tfoot\",\n    \"ul\",\n    \"video\"\n  ];\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.blockElements = void 0;\n  var t = x;\n  Object.defineProperty(e, \"blockElements\", { enumerable: !0, get: function() {\n    return t.blockElements;\n  } });\n})(Z);\nvar Re = {}, ee = {};\nObject.defineProperty(ee, \"__esModule\", { value: !0 });\nee.calculateBaseline = Mt;\nfunction Mt(e) {\n  var t = window.getComputedStyle(e), n = parseFloat(t.fontSize), r = parseFloat(t.lineHeight) || n * 1.2, i = parseFloat(t.paddingTop), a = parseFloat(t.borderTopWidth), l = parseFloat(t.marginTop), s = n * 0.8, o = (r - n) / 2, d = l + a + i + o + s;\n  return d;\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.calculateBaseline = void 0;\n  var t = ee;\n  Object.defineProperty(e, \"calculateBaseline\", { enumerable: !0, get: function() {\n    return t.calculateBaseline;\n  } });\n})(Re);\nvar qe = {}, te = {}, ne = {}, re = {};\nObject.defineProperty(re, \"__esModule\", { value: !0 });\nre.isContentEditable = Nt;\nfunction Nt(e) {\n  return e.contentEditable === \"true\";\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.isContentEditable = void 0;\n  var t = re;\n  Object.defineProperty(e, \"isContentEditable\", { enumerable: !0, get: function() {\n    return t.isContentEditable;\n  } });\n})(ne);\nObject.defineProperty(te, \"__esModule\", { value: !0 });\nte.canSetCaret = Bt;\nvar At = k, $t = ne;\nfunction Bt(e) {\n  var t = !0;\n  if ((0, At.isNativeInput)(e))\n    switch (e.type) {\n      case \"file\":\n      case \"checkbox\":\n      case \"radio\":\n      case \"hidden\":\n      case \"submit\":\n      case \"button\":\n      case \"image\":\n      case \"reset\":\n        t = !1;\n        break;\n    }\n  else\n    t = (0, $t.isContentEditable)(e);\n  return t;\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.canSetCaret = void 0;\n  var t = te;\n  Object.defineProperty(e, \"canSetCaret\", { enumerable: !0, get: function() {\n    return t.canSetCaret;\n  } });\n})(qe);\nvar $ = {}, ie = {};\nfunction Wt(e, t, n) {\n  const r = n.value !== void 0 ? \"value\" : \"get\", i = n[r], a = `#${t}Cache`;\n  if (n[r] = function(...l) {\n    return this[a] === void 0 && (this[a] = i.apply(this, l)), this[a];\n  }, r === \"get\" && n.set) {\n    const l = n.set;\n    n.set = function(s) {\n      delete e[a], l.apply(this, s);\n    };\n  }\n  return n;\n}\nfunction Ue() {\n  const e = {\n    win: !1,\n    mac: !1,\n    x11: !1,\n    linux: !1\n  }, t = Object.keys(e).find((n) => window.navigator.appVersion.toLowerCase().indexOf(n) !== -1);\n  return t !== void 0 && (e[t] = !0), e;\n}\nfunction ae(e) {\n  return e != null && e !== \"\" && (typeof e != \"object\" || Object.keys(e).length > 0);\n}\nfunction Dt(e) {\n  return !ae(e);\n}\nconst Ht = () => typeof window < \"u\" && window.navigator !== null && ae(window.navigator.platform) && (/iP(ad|hone|od)/.test(window.navigator.platform) || window.navigator.platform === \"MacIntel\" && window.navigator.maxTouchPoints > 1);\nfunction Ft(e) {\n  const t = Ue();\n  return e = e.replace(/shift/gi, \"⇧\").replace(/backspace/gi, \"⌫\").replace(/enter/gi, \"⏎\").replace(/up/gi, \"↑\").replace(/left/gi, \"→\").replace(/down/gi, \"↓\").replace(/right/gi, \"←\").replace(/escape/gi, \"⎋\").replace(/insert/gi, \"Ins\").replace(/delete/gi, \"␡\").replace(/\\+/gi, \"+\"), t.mac ? e = e.replace(/ctrl|cmd/gi, \"⌘\").replace(/alt/gi, \"⌥\") : e = e.replace(/cmd/gi, \"Ctrl\").replace(/windows/gi, \"WIN\"), e;\n}\nfunction Rt(e) {\n  return e[0].toUpperCase() + e.slice(1);\n}\nfunction qt(e) {\n  const t = document.createElement(\"div\");\n  t.style.position = \"absolute\", t.style.left = \"-999px\", t.style.bottom = \"-999px\", t.innerHTML = e, document.body.appendChild(t);\n  const n = window.getSelection(), r = document.createRange();\n  if (r.selectNode(t), n === null)\n    throw new Error(\"Cannot copy text to clipboard\");\n  n.removeAllRanges(), n.addRange(r), document.execCommand(\"copy\"), document.body.removeChild(t);\n}\nfunction Ut(e, t, n) {\n  let r;\n  return (...i) => {\n    const a = this, l = () => {\n      r = void 0, n !== !0 && e.apply(a, i);\n    }, s = n === !0 && r !== void 0;\n    window.clearTimeout(r), r = window.setTimeout(l, t), s && e.apply(a, i);\n  };\n}\nfunction S(e) {\n  return Object.prototype.toString.call(e).match(/\\s([a-zA-Z]+)/)[1].toLowerCase();\n}\nfunction zt(e) {\n  return S(e) === \"boolean\";\n}\nfunction ze(e) {\n  return S(e) === \"function\" || S(e) === \"asyncfunction\";\n}\nfunction Kt(e) {\n  return ze(e) && /^\\s*class\\s+/.test(e.toString());\n}\nfunction Xt(e) {\n  return S(e) === \"number\";\n}\nfunction M(e) {\n  return S(e) === \"object\";\n}\nfunction Gt(e) {\n  return Promise.resolve(e) === e;\n}\nfunction Vt(e) {\n  return S(e) === \"string\";\n}\nfunction Yt(e) {\n  return S(e) === \"undefined\";\n}\nfunction X(e, ...t) {\n  if (!t.length)\n    return e;\n  const n = t.shift();\n  if (M(e) && M(n))\n    for (const r in n)\n      M(n[r]) ? (e[r] === void 0 && Object.assign(e, { [r]: {} }), X(e[r], n[r])) : Object.assign(e, { [r]: n[r] });\n  return X(e, ...t);\n}\nfunction Jt(e, t, n) {\n  const r = `«${t}» is deprecated and will be removed in the next major release. Please use the «${n}» instead.`;\n  e && console.warn(r);\n}\nfunction Qt(e) {\n  try {\n    return new URL(e).href;\n  } catch {\n  }\n  return e.substring(0, 2) === \"//\" ? window.location.protocol + e : window.location.origin + e;\n}\nfunction Zt(e) {\n  return e > 47 && e < 58 || e === 32 || e === 13 || e === 229 || e > 64 && e < 91 || e > 95 && e < 112 || e > 185 && e < 193 || e > 218 && e < 223;\n}\nconst xt = {\n  BACKSPACE: 8,\n  TAB: 9,\n  ENTER: 13,\n  SHIFT: 16,\n  CTRL: 17,\n  ALT: 18,\n  ESC: 27,\n  SPACE: 32,\n  LEFT: 37,\n  UP: 38,\n  DOWN: 40,\n  RIGHT: 39,\n  DELETE: 46,\n  META: 91,\n  SLASH: 191\n}, en = {\n  LEFT: 0,\n  WHEEL: 1,\n  RIGHT: 2,\n  BACKWARD: 3,\n  FORWARD: 4\n};\nclass tn {\n  constructor() {\n    this.completed = Promise.resolve();\n  }\n  /**\n   * Add new promise to queue\n   * @param operation - promise should be added to queue\n   */\n  add(t) {\n    return new Promise((n, r) => {\n      this.completed = this.completed.then(t).then(n).catch(r);\n    });\n  }\n}\nfunction nn(e, t, n = void 0) {\n  let r, i, a, l = null, s = 0;\n  n || (n = {});\n  const o = function() {\n    s = n.leading === !1 ? 0 : Date.now(), l = null, a = e.apply(r, i), l === null && (r = i = null);\n  };\n  return function() {\n    const d = Date.now();\n    !s && n.leading === !1 && (s = d);\n    const u = t - (d - s);\n    return r = this, i = arguments, u <= 0 || u > t ? (l && (clearTimeout(l), l = null), s = d, a = e.apply(r, i), l === null && (r = i = null)) : !l && n.trailing !== !1 && (l = setTimeout(o, u)), a;\n  };\n}\nconst rn = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  PromiseQueue: tn,\n  beautifyShortcut: Ft,\n  cacheable: Wt,\n  capitalize: Rt,\n  copyTextToClipboard: qt,\n  debounce: Ut,\n  deepMerge: X,\n  deprecationAssert: Jt,\n  getUserOS: Ue,\n  getValidUrl: Qt,\n  isBoolean: zt,\n  isClass: Kt,\n  isEmpty: Dt,\n  isFunction: ze,\n  isIosDevice: Ht,\n  isNumber: Xt,\n  isObject: M,\n  isPrintableKey: Zt,\n  isPromise: Gt,\n  isString: Vt,\n  isUndefined: Yt,\n  keyCodes: xt,\n  mouseButtons: en,\n  notEmpty: ae,\n  throttle: nn,\n  typeOf: S\n}, Symbol.toStringTag, { value: \"Module\" })), le = /* @__PURE__ */ wt(rn);\nObject.defineProperty(ie, \"__esModule\", { value: !0 });\nie.containsOnlyInlineElements = sn;\nvar an = le, ln = Z;\nfunction sn(e) {\n  var t;\n  (0, an.isString)(e) ? (t = document.createElement(\"div\"), t.innerHTML = e) : t = e;\n  var n = function(r) {\n    return !(0, ln.blockElements)().includes(r.tagName.toLowerCase()) && Array.from(r.children).every(n);\n  };\n  return Array.from(t.children).every(n);\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.containsOnlyInlineElements = void 0;\n  var t = ie;\n  Object.defineProperty(e, \"containsOnlyInlineElements\", { enumerable: !0, get: function() {\n    return t.containsOnlyInlineElements;\n  } });\n})($);\nvar Ke = {}, se = {}, B = {}, oe = {};\nObject.defineProperty(oe, \"__esModule\", { value: !0 });\noe.make = on;\nfunction on(e, t, n) {\n  var r;\n  t === void 0 && (t = null), n === void 0 && (n = {});\n  var i = document.createElement(e);\n  if (Array.isArray(t)) {\n    var a = t.filter(function(s) {\n      return s !== void 0;\n    });\n    (r = i.classList).add.apply(r, a);\n  } else\n    t !== null && i.classList.add(t);\n  for (var l in n)\n    Object.prototype.hasOwnProperty.call(n, l) && (i[l] = n[l]);\n  return i;\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.make = void 0;\n  var t = oe;\n  Object.defineProperty(e, \"make\", { enumerable: !0, get: function() {\n    return t.make;\n  } });\n})(B);\nObject.defineProperty(se, \"__esModule\", { value: !0 });\nse.fragmentToString = cn;\nvar un = B;\nfunction cn(e) {\n  var t = (0, un.make)(\"div\");\n  return t.appendChild(e), t.innerHTML;\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.fragmentToString = void 0;\n  var t = se;\n  Object.defineProperty(e, \"fragmentToString\", { enumerable: !0, get: function() {\n    return t.fragmentToString;\n  } });\n})(Ke);\nvar Xe = {}, ue = {};\nObject.defineProperty(ue, \"__esModule\", { value: !0 });\nue.getContentLength = fn;\nvar dn = k;\nfunction fn(e) {\n  var t, n;\n  return (0, dn.isNativeInput)(e) ? e.value.length : e.nodeType === Node.TEXT_NODE ? e.length : (n = (t = e.textContent) === null || t === void 0 ? void 0 : t.length) !== null && n !== void 0 ? n : 0;\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.getContentLength = void 0;\n  var t = ue;\n  Object.defineProperty(e, \"getContentLength\", { enumerable: !0, get: function() {\n    return t.getContentLength;\n  } });\n})(Xe);\nvar ce = {}, de = {}, We = A && A.__spreadArray || function(e, t, n) {\n  if (n || arguments.length === 2)\n    for (var r = 0, i = t.length, a; r < i; r++)\n      (a || !(r in t)) && (a || (a = Array.prototype.slice.call(t, 0, r)), a[r] = t[r]);\n  return e.concat(a || Array.prototype.slice.call(t));\n};\nObject.defineProperty(de, \"__esModule\", { value: !0 });\nde.getDeepestBlockElements = Ge;\nvar pn = $;\nfunction Ge(e) {\n  return (0, pn.containsOnlyInlineElements)(e) ? [e] : Array.from(e.children).reduce(function(t, n) {\n    return We(We([], t, !0), Ge(n), !0);\n  }, []);\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.getDeepestBlockElements = void 0;\n  var t = de;\n  Object.defineProperty(e, \"getDeepestBlockElements\", { enumerable: !0, get: function() {\n    return t.getDeepestBlockElements;\n  } });\n})(ce);\nvar Ve = {}, fe = {}, W = {}, pe = {};\nObject.defineProperty(pe, \"__esModule\", { value: !0 });\npe.isLineBreakTag = mn;\nfunction mn(e) {\n  return [\n    \"BR\",\n    \"WBR\"\n  ].includes(e.tagName);\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.isLineBreakTag = void 0;\n  var t = pe;\n  Object.defineProperty(e, \"isLineBreakTag\", { enumerable: !0, get: function() {\n    return t.isLineBreakTag;\n  } });\n})(W);\nvar D = {}, me = {};\nObject.defineProperty(me, \"__esModule\", { value: !0 });\nme.isSingleTag = hn;\nfunction hn(e) {\n  return [\n    \"AREA\",\n    \"BASE\",\n    \"BR\",\n    \"COL\",\n    \"COMMAND\",\n    \"EMBED\",\n    \"HR\",\n    \"IMG\",\n    \"INPUT\",\n    \"KEYGEN\",\n    \"LINK\",\n    \"META\",\n    \"PARAM\",\n    \"SOURCE\",\n    \"TRACK\",\n    \"WBR\"\n  ].includes(e.tagName);\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.isSingleTag = void 0;\n  var t = me;\n  Object.defineProperty(e, \"isSingleTag\", { enumerable: !0, get: function() {\n    return t.isSingleTag;\n  } });\n})(D);\nObject.defineProperty(fe, \"__esModule\", { value: !0 });\nfe.getDeepestNode = Ye;\nvar gn = k, vn = W, bn = D;\nfunction Ye(e, t) {\n  t === void 0 && (t = !1);\n  var n = t ? \"lastChild\" : \"firstChild\", r = t ? \"previousSibling\" : \"nextSibling\";\n  if (e.nodeType === Node.ELEMENT_NODE && e[n]) {\n    var i = e[n];\n    if ((0, bn.isSingleTag)(i) && !(0, gn.isNativeInput)(i) && !(0, vn.isLineBreakTag)(i))\n      if (i[r])\n        i = i[r];\n      else if (i.parentNode !== null && i.parentNode[r])\n        i = i.parentNode[r];\n      else\n        return i.parentNode;\n    return Ye(i, t);\n  }\n  return e;\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.getDeepestNode = void 0;\n  var t = fe;\n  Object.defineProperty(e, \"getDeepestNode\", { enumerable: !0, get: function() {\n    return t.getDeepestNode;\n  } });\n})(Ve);\nvar Je = {}, he = {}, j = A && A.__spreadArray || function(e, t, n) {\n  if (n || arguments.length === 2)\n    for (var r = 0, i = t.length, a; r < i; r++)\n      (a || !(r in t)) && (a || (a = Array.prototype.slice.call(t, 0, r)), a[r] = t[r]);\n  return e.concat(a || Array.prototype.slice.call(t));\n};\nObject.defineProperty(he, \"__esModule\", { value: !0 });\nhe.findAllInputs = kn;\nvar yn = $, Cn = ce, Sn = V, On = k;\nfunction kn(e) {\n  return Array.from(e.querySelectorAll((0, Sn.allInputsSelector)())).reduce(function(t, n) {\n    return (0, On.isNativeInput)(n) || (0, yn.containsOnlyInlineElements)(n) ? j(j([], t, !0), [n], !1) : j(j([], t, !0), (0, Cn.getDeepestBlockElements)(n), !0);\n  }, []);\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.findAllInputs = void 0;\n  var t = he;\n  Object.defineProperty(e, \"findAllInputs\", { enumerable: !0, get: function() {\n    return t.findAllInputs;\n  } });\n})(Je);\nvar Qe = {}, ge = {};\nObject.defineProperty(ge, \"__esModule\", { value: !0 });\nge.isCollapsedWhitespaces = _n;\nfunction _n(e) {\n  return !/[^\\t\\n\\r ]/.test(e);\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.isCollapsedWhitespaces = void 0;\n  var t = ge;\n  Object.defineProperty(e, \"isCollapsedWhitespaces\", { enumerable: !0, get: function() {\n    return t.isCollapsedWhitespaces;\n  } });\n})(Qe);\nvar ve = {}, be = {};\nObject.defineProperty(be, \"__esModule\", { value: !0 });\nbe.isElement = In;\nvar En = le;\nfunction In(e) {\n  return (0, En.isNumber)(e) ? !1 : !!e && !!e.nodeType && e.nodeType === Node.ELEMENT_NODE;\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.isElement = void 0;\n  var t = be;\n  Object.defineProperty(e, \"isElement\", { enumerable: !0, get: function() {\n    return t.isElement;\n  } });\n})(ve);\nvar Ze = {}, ye = {}, Ce = {}, Se = {};\nObject.defineProperty(Se, \"__esModule\", { value: !0 });\nSe.isLeaf = wn;\nfunction wn(e) {\n  return e === null ? !1 : e.childNodes.length === 0;\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.isLeaf = void 0;\n  var t = Se;\n  Object.defineProperty(e, \"isLeaf\", { enumerable: !0, get: function() {\n    return t.isLeaf;\n  } });\n})(Ce);\nvar Oe = {}, ke = {};\nObject.defineProperty(ke, \"__esModule\", { value: !0 });\nke.isNodeEmpty = Mn;\nvar Pn = W, jn = ve, Tn = k, Ln = D;\nfunction Mn(e, t) {\n  var n = \"\";\n  return (0, Ln.isSingleTag)(e) && !(0, Pn.isLineBreakTag)(e) ? !1 : ((0, jn.isElement)(e) && (0, Tn.isNativeInput)(e) ? n = e.value : e.textContent !== null && (n = e.textContent.replace(\"​\", \"\")), t !== void 0 && (n = n.replace(new RegExp(t, \"g\"), \"\")), n.trim().length === 0);\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.isNodeEmpty = void 0;\n  var t = ke;\n  Object.defineProperty(e, \"isNodeEmpty\", { enumerable: !0, get: function() {\n    return t.isNodeEmpty;\n  } });\n})(Oe);\nObject.defineProperty(ye, \"__esModule\", { value: !0 });\nye.isEmpty = $n;\nvar Nn = Ce, An = Oe;\nfunction $n(e, t) {\n  e.normalize();\n  for (var n = [e]; n.length > 0; ) {\n    var r = n.shift();\n    if (r) {\n      if (e = r, (0, Nn.isLeaf)(e) && !(0, An.isNodeEmpty)(e, t))\n        return !1;\n      n.push.apply(n, Array.from(e.childNodes));\n    }\n  }\n  return !0;\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.isEmpty = void 0;\n  var t = ye;\n  Object.defineProperty(e, \"isEmpty\", { enumerable: !0, get: function() {\n    return t.isEmpty;\n  } });\n})(Ze);\nvar xe = {}, _e = {};\nObject.defineProperty(_e, \"__esModule\", { value: !0 });\n_e.isFragment = Wn;\nvar Bn = le;\nfunction Wn(e) {\n  return (0, Bn.isNumber)(e) ? !1 : !!e && !!e.nodeType && e.nodeType === Node.DOCUMENT_FRAGMENT_NODE;\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.isFragment = void 0;\n  var t = _e;\n  Object.defineProperty(e, \"isFragment\", { enumerable: !0, get: function() {\n    return t.isFragment;\n  } });\n})(xe);\nvar et = {}, Ee = {};\nObject.defineProperty(Ee, \"__esModule\", { value: !0 });\nEe.isHTMLString = Hn;\nvar Dn = B;\nfunction Hn(e) {\n  var t = (0, Dn.make)(\"div\");\n  return t.innerHTML = e, t.childElementCount > 0;\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.isHTMLString = void 0;\n  var t = Ee;\n  Object.defineProperty(e, \"isHTMLString\", { enumerable: !0, get: function() {\n    return t.isHTMLString;\n  } });\n})(et);\nvar tt = {}, Ie = {};\nObject.defineProperty(Ie, \"__esModule\", { value: !0 });\nIe.offset = Fn;\nfunction Fn(e) {\n  var t = e.getBoundingClientRect(), n = window.pageXOffset || document.documentElement.scrollLeft, r = window.pageYOffset || document.documentElement.scrollTop, i = t.top + r, a = t.left + n;\n  return {\n    top: i,\n    left: a,\n    bottom: i + t.height,\n    right: a + t.width\n  };\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.offset = void 0;\n  var t = Ie;\n  Object.defineProperty(e, \"offset\", { enumerable: !0, get: function() {\n    return t.offset;\n  } });\n})(tt);\nvar nt = {}, we = {};\nObject.defineProperty(we, \"__esModule\", { value: !0 });\nwe.prepend = Rn;\nfunction Rn(e, t) {\n  Array.isArray(t) ? (t = t.reverse(), t.forEach(function(n) {\n    return e.prepend(n);\n  })) : e.prepend(t);\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.prepend = void 0;\n  var t = we;\n  Object.defineProperty(e, \"prepend\", { enumerable: !0, get: function() {\n    return t.prepend;\n  } });\n})(nt);\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.prepend = e.offset = e.make = e.isLineBreakTag = e.isSingleTag = e.isNodeEmpty = e.isLeaf = e.isHTMLString = e.isFragment = e.isEmpty = e.isElement = e.isContentEditable = e.isCollapsedWhitespaces = e.findAllInputs = e.isNativeInput = e.allInputsSelector = e.getDeepestNode = e.getDeepestBlockElements = e.getContentLength = e.fragmentToString = e.containsOnlyInlineElements = e.canSetCaret = e.calculateBaseline = e.blockElements = e.append = void 0;\n  var t = V;\n  Object.defineProperty(e, \"allInputsSelector\", { enumerable: !0, get: function() {\n    return t.allInputsSelector;\n  } });\n  var n = k;\n  Object.defineProperty(e, \"isNativeInput\", { enumerable: !0, get: function() {\n    return n.isNativeInput;\n  } });\n  var r = Fe;\n  Object.defineProperty(e, \"append\", { enumerable: !0, get: function() {\n    return r.append;\n  } });\n  var i = Z;\n  Object.defineProperty(e, \"blockElements\", { enumerable: !0, get: function() {\n    return i.blockElements;\n  } });\n  var a = Re;\n  Object.defineProperty(e, \"calculateBaseline\", { enumerable: !0, get: function() {\n    return a.calculateBaseline;\n  } });\n  var l = qe;\n  Object.defineProperty(e, \"canSetCaret\", { enumerable: !0, get: function() {\n    return l.canSetCaret;\n  } });\n  var s = $;\n  Object.defineProperty(e, \"containsOnlyInlineElements\", { enumerable: !0, get: function() {\n    return s.containsOnlyInlineElements;\n  } });\n  var o = Ke;\n  Object.defineProperty(e, \"fragmentToString\", { enumerable: !0, get: function() {\n    return o.fragmentToString;\n  } });\n  var d = Xe;\n  Object.defineProperty(e, \"getContentLength\", { enumerable: !0, get: function() {\n    return d.getContentLength;\n  } });\n  var u = ce;\n  Object.defineProperty(e, \"getDeepestBlockElements\", { enumerable: !0, get: function() {\n    return u.getDeepestBlockElements;\n  } });\n  var p = Ve;\n  Object.defineProperty(e, \"getDeepestNode\", { enumerable: !0, get: function() {\n    return p.getDeepestNode;\n  } });\n  var g = Je;\n  Object.defineProperty(e, \"findAllInputs\", { enumerable: !0, get: function() {\n    return g.findAllInputs;\n  } });\n  var w = Qe;\n  Object.defineProperty(e, \"isCollapsedWhitespaces\", { enumerable: !0, get: function() {\n    return w.isCollapsedWhitespaces;\n  } });\n  var _ = ne;\n  Object.defineProperty(e, \"isContentEditable\", { enumerable: !0, get: function() {\n    return _.isContentEditable;\n  } });\n  var ut = ve;\n  Object.defineProperty(e, \"isElement\", { enumerable: !0, get: function() {\n    return ut.isElement;\n  } });\n  var ct = Ze;\n  Object.defineProperty(e, \"isEmpty\", { enumerable: !0, get: function() {\n    return ct.isEmpty;\n  } });\n  var dt = xe;\n  Object.defineProperty(e, \"isFragment\", { enumerable: !0, get: function() {\n    return dt.isFragment;\n  } });\n  var ft = et;\n  Object.defineProperty(e, \"isHTMLString\", { enumerable: !0, get: function() {\n    return ft.isHTMLString;\n  } });\n  var pt = Ce;\n  Object.defineProperty(e, \"isLeaf\", { enumerable: !0, get: function() {\n    return pt.isLeaf;\n  } });\n  var mt = Oe;\n  Object.defineProperty(e, \"isNodeEmpty\", { enumerable: !0, get: function() {\n    return mt.isNodeEmpty;\n  } });\n  var ht = W;\n  Object.defineProperty(e, \"isLineBreakTag\", { enumerable: !0, get: function() {\n    return ht.isLineBreakTag;\n  } });\n  var gt = D;\n  Object.defineProperty(e, \"isSingleTag\", { enumerable: !0, get: function() {\n    return gt.isSingleTag;\n  } });\n  var vt = B;\n  Object.defineProperty(e, \"make\", { enumerable: !0, get: function() {\n    return vt.make;\n  } });\n  var bt = tt;\n  Object.defineProperty(e, \"offset\", { enumerable: !0, get: function() {\n    return bt.offset;\n  } });\n  var yt = nt;\n  Object.defineProperty(e, \"prepend\", { enumerable: !0, get: function() {\n    return yt.prepend;\n  } });\n})(c);\nconst h = \"cdx-list\", m = {\n  wrapper: h,\n  item: `${h}__item`,\n  itemContent: `${h}__item-content`,\n  itemChildren: `${h}__item-children`\n};\nclass v {\n  /**\n   * Getter for all CSS classes used in unordered list rendering\n   */\n  static get CSS() {\n    return {\n      ...m,\n      orderedList: `${h}-ordered`\n    };\n  }\n  /**\n   * Assign passed readonly mode and config to relevant class properties\n   * @param readonly - read-only mode flag\n   * @param config - user config for Tool\n   */\n  constructor(t, n) {\n    this.config = n, this.readOnly = t;\n  }\n  /**\n   * Renders ol wrapper for list\n   * @param isRoot - boolean variable that represents level of the wrappre (root or childList)\n   * @returns - created html ol element\n   */\n  renderWrapper(t) {\n    let n;\n    return t === !0 ? n = c.make(\"ol\", [v.CSS.wrapper, v.CSS.orderedList]) : n = c.make(\"ol\", [v.CSS.orderedList, v.CSS.itemChildren]), n;\n  }\n  /**\n   * Redners list item element\n   * @param content - content used in list item rendering\n   * @param _meta - meta of the list item unused in rendering of the ordered list\n   * @returns - created html list item element\n   */\n  renderItem(t, n) {\n    const r = c.make(\"li\", v.CSS.item), i = c.make(\"div\", v.CSS.itemContent, {\n      innerHTML: t,\n      contentEditable: (!this.readOnly).toString()\n    });\n    return r.appendChild(i), r;\n  }\n  /**\n   * Return the item content\n   * @param item - item wrapper (<li>)\n   * @returns - item content string\n   */\n  getItemContent(t) {\n    const n = t.querySelector(`.${v.CSS.itemContent}`);\n    return !n || c.isEmpty(n) ? \"\" : n.innerHTML;\n  }\n  /**\n   * Returns item meta, for ordered list\n   * @returns item meta object\n   */\n  getItemMeta() {\n    return {};\n  }\n  /**\n   * Returns default item meta used on creation of the new item\n   */\n  composeDefaultMeta() {\n    return {};\n  }\n}\nclass b {\n  /**\n   * Getter for all CSS classes used in unordered list rendering\n   */\n  static get CSS() {\n    return {\n      ...m,\n      unorderedList: `${h}-unordered`\n    };\n  }\n  /**\n   * Assign passed readonly mode and config to relevant class properties\n   * @param readonly - read-only mode flag\n   * @param config - user config for Tool\n   */\n  constructor(t, n) {\n    this.config = n, this.readOnly = t;\n  }\n  /**\n   * Renders ol wrapper for list\n   * @param isRoot - boolean variable that represents level of the wrappre (root or childList)\n   * @returns - created html ul element\n   */\n  renderWrapper(t) {\n    let n;\n    return t === !0 ? n = c.make(\"ul\", [b.CSS.wrapper, b.CSS.unorderedList]) : n = c.make(\"ul\", [b.CSS.unorderedList, b.CSS.itemChildren]), n;\n  }\n  /**\n   * Redners list item element\n   * @param content - content used in list item rendering\n   * @param _meta - meta of the list item unused in rendering of the unordered list\n   * @returns - created html list item element\n   */\n  renderItem(t, n) {\n    const r = c.make(\"li\", b.CSS.item), i = c.make(\"div\", b.CSS.itemContent, {\n      innerHTML: t,\n      contentEditable: (!this.readOnly).toString()\n    });\n    return r.appendChild(i), r;\n  }\n  /**\n   * Return the item content\n   * @param item - item wrapper (<li>)\n   * @returns - item content string\n   */\n  getItemContent(t) {\n    const n = t.querySelector(`.${b.CSS.itemContent}`);\n    return !n || c.isEmpty(n) ? \"\" : n.innerHTML;\n  }\n  /**\n   * Returns item meta, for unordered list\n   * @returns Item meta object\n   */\n  getItemMeta() {\n    return {};\n  }\n  /**\n   * Returns default item meta used on creation of the new item\n   */\n  composeDefaultMeta() {\n    return {};\n  }\n}\nfunction O(e) {\n  return e.nodeType === Node.ELEMENT_NODE;\n}\nvar P = {}, Pe = {}, H = {}, F = {};\nObject.defineProperty(F, \"__esModule\", { value: !0 });\nF.getContenteditableSlice = Un;\nvar qn = c;\nfunction Un(e, t, n, r, i) {\n  var a;\n  i === void 0 && (i = !1);\n  var l = document.createRange();\n  if (r === \"left\" ? (l.setStart(e, 0), l.setEnd(t, n)) : (l.setStart(t, n), l.setEnd(e, e.childNodes.length)), i === !0) {\n    var s = l.extractContents();\n    return (0, qn.fragmentToString)(s);\n  }\n  var o = l.cloneContents(), d = document.createElement(\"div\");\n  d.appendChild(o);\n  var u = (a = d.textContent) !== null && a !== void 0 ? a : \"\";\n  return u;\n}\nObject.defineProperty(H, \"__esModule\", { value: !0 });\nH.checkContenteditableSliceForEmptiness = Xn;\nvar zn = c, Kn = F;\nfunction Xn(e, t, n, r) {\n  var i = (0, Kn.getContenteditableSlice)(e, t, n, r);\n  return (0, zn.isCollapsedWhitespaces)(i);\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.checkContenteditableSliceForEmptiness = void 0;\n  var t = H;\n  Object.defineProperty(e, \"checkContenteditableSliceForEmptiness\", { enumerable: !0, get: function() {\n    return t.checkContenteditableSliceForEmptiness;\n  } });\n})(Pe);\nvar rt = {};\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.getContenteditableSlice = void 0;\n  var t = F;\n  Object.defineProperty(e, \"getContenteditableSlice\", { enumerable: !0, get: function() {\n    return t.getContenteditableSlice;\n  } });\n})(rt);\nvar it = {}, je = {};\nObject.defineProperty(je, \"__esModule\", { value: !0 });\nje.focus = Vn;\nvar Gn = c;\nfunction Vn(e, t) {\n  var n, r;\n  if (t === void 0 && (t = !0), (0, Gn.isNativeInput)(e)) {\n    e.focus();\n    var i = t ? 0 : e.value.length;\n    e.setSelectionRange(i, i);\n  } else {\n    var a = document.createRange(), l = window.getSelection();\n    if (!l)\n      return;\n    var s = function(g, w) {\n      w === void 0 && (w = !1);\n      var _ = document.createTextNode(\"\");\n      w ? g.insertBefore(_, g.firstChild) : g.appendChild(_), a.setStart(_, 0), a.setEnd(_, 0);\n    }, o = function(g) {\n      return g != null;\n    }, d = e.childNodes, u = t ? d[0] : d[d.length - 1];\n    if (o(u)) {\n      for (; o(u) && u.nodeType !== Node.TEXT_NODE; )\n        u = t ? u.firstChild : u.lastChild;\n      if (o(u) && u.nodeType === Node.TEXT_NODE) {\n        var p = (r = (n = u.textContent) === null || n === void 0 ? void 0 : n.length) !== null && r !== void 0 ? r : 0, i = t ? 0 : p;\n        a.setStart(u, i), a.setEnd(u, i);\n      } else\n        s(e, t);\n    } else\n      s(e);\n    l.removeAllRanges(), l.addRange(a);\n  }\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.focus = void 0;\n  var t = je;\n  Object.defineProperty(e, \"focus\", { enumerable: !0, get: function() {\n    return t.focus;\n  } });\n})(it);\nvar Te = {}, R = {};\nObject.defineProperty(R, \"__esModule\", { value: !0 });\nR.getCaretNodeAndOffset = Yn;\nfunction Yn() {\n  var e = window.getSelection();\n  if (e === null)\n    return [null, 0];\n  var t = e.focusNode, n = e.focusOffset;\n  return t === null ? [null, 0] : (t.nodeType !== Node.TEXT_NODE && t.childNodes.length > 0 && (t.childNodes[n] !== void 0 ? (t = t.childNodes[n], n = 0) : (t = t.childNodes[n - 1], t.textContent !== null && (n = t.textContent.length))), [t, n]);\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.getCaretNodeAndOffset = void 0;\n  var t = R;\n  Object.defineProperty(e, \"getCaretNodeAndOffset\", { enumerable: !0, get: function() {\n    return t.getCaretNodeAndOffset;\n  } });\n})(Te);\nvar at = {}, q = {};\nObject.defineProperty(q, \"__esModule\", { value: !0 });\nq.getRange = Jn;\nfunction Jn() {\n  var e = window.getSelection();\n  return e && e.rangeCount ? e.getRangeAt(0) : null;\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.getRange = void 0;\n  var t = q;\n  Object.defineProperty(e, \"getRange\", { enumerable: !0, get: function() {\n    return t.getRange;\n  } });\n})(at);\nvar lt = {}, Le = {};\nObject.defineProperty(Le, \"__esModule\", { value: !0 });\nLe.isCaretAtEndOfInput = xn;\nvar De = c, Qn = Te, Zn = Pe;\nfunction xn(e) {\n  var t = (0, De.getDeepestNode)(e, !0);\n  if (t === null)\n    return !0;\n  if ((0, De.isNativeInput)(t))\n    return t.selectionEnd === t.value.length;\n  var n = (0, Qn.getCaretNodeAndOffset)(), r = n[0], i = n[1];\n  return r === null ? !1 : (0, Zn.checkContenteditableSliceForEmptiness)(e, r, i, \"right\");\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.isCaretAtEndOfInput = void 0;\n  var t = Le;\n  Object.defineProperty(e, \"isCaretAtEndOfInput\", { enumerable: !0, get: function() {\n    return t.isCaretAtEndOfInput;\n  } });\n})(lt);\nvar st = {}, Me = {};\nObject.defineProperty(Me, \"__esModule\", { value: !0 });\nMe.isCaretAtStartOfInput = nr;\nvar T = c, er = R, tr = H;\nfunction nr(e) {\n  var t = (0, T.getDeepestNode)(e);\n  if (t === null || (0, T.isEmpty)(e))\n    return !0;\n  if ((0, T.isNativeInput)(t))\n    return t.selectionEnd === 0;\n  if ((0, T.isEmpty)(e))\n    return !0;\n  var n = (0, er.getCaretNodeAndOffset)(), r = n[0], i = n[1];\n  return r === null ? !1 : (0, tr.checkContenteditableSliceForEmptiness)(e, r, i, \"left\");\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.isCaretAtStartOfInput = void 0;\n  var t = Me;\n  Object.defineProperty(e, \"isCaretAtStartOfInput\", { enumerable: !0, get: function() {\n    return t.isCaretAtStartOfInput;\n  } });\n})(st);\nvar ot = {}, Ne = {};\nObject.defineProperty(Ne, \"__esModule\", { value: !0 });\nNe.save = ar;\nvar rr = c, ir = q;\nfunction ar() {\n  var e = (0, ir.getRange)(), t = (0, rr.make)(\"span\");\n  if (t.id = \"cursor\", t.hidden = !0, !!e)\n    return e.insertNode(t), function() {\n      var r = window.getSelection();\n      r && (e.setStartAfter(t), e.setEndAfter(t), r.removeAllRanges(), r.addRange(e), setTimeout(function() {\n        t.remove();\n      }, 150));\n    };\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.save = void 0;\n  var t = Ne;\n  Object.defineProperty(e, \"save\", { enumerable: !0, get: function() {\n    return t.save;\n  } });\n})(ot);\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.save = e.isCaretAtStartOfInput = e.isCaretAtEndOfInput = e.getRange = e.getCaretNodeAndOffset = e.focus = e.getContenteditableSlice = e.checkContenteditableSliceForEmptiness = void 0;\n  var t = Pe;\n  Object.defineProperty(e, \"checkContenteditableSliceForEmptiness\", { enumerable: !0, get: function() {\n    return t.checkContenteditableSliceForEmptiness;\n  } });\n  var n = rt;\n  Object.defineProperty(e, \"getContenteditableSlice\", { enumerable: !0, get: function() {\n    return n.getContenteditableSlice;\n  } });\n  var r = it;\n  Object.defineProperty(e, \"focus\", { enumerable: !0, get: function() {\n    return r.focus;\n  } });\n  var i = Te;\n  Object.defineProperty(e, \"getCaretNodeAndOffset\", { enumerable: !0, get: function() {\n    return i.getCaretNodeAndOffset;\n  } });\n  var a = at;\n  Object.defineProperty(e, \"getRange\", { enumerable: !0, get: function() {\n    return a.getRange;\n  } });\n  var l = lt;\n  Object.defineProperty(e, \"isCaretAtEndOfInput\", { enumerable: !0, get: function() {\n    return l.isCaretAtEndOfInput;\n  } });\n  var s = st;\n  Object.defineProperty(e, \"isCaretAtStartOfInput\", { enumerable: !0, get: function() {\n    return s.isCaretAtStartOfInput;\n  } });\n  var o = ot;\n  Object.defineProperty(e, \"save\", { enumerable: !0, get: function() {\n    return o.save;\n  } });\n})(P);\nclass f {\n  /**\n   * Getter for all CSS classes used in unordered list rendering\n   */\n  static get CSS() {\n    return {\n      ...m,\n      checklist: `${h}-checklist`,\n      itemChecked: `${h}__checkbox--checked`,\n      noHover: `${h}__checkbox--no-hover`,\n      checkbox: `${h}__checkbox-check`,\n      checkboxContainer: `${h}__checkbox`\n    };\n  }\n  /**\n   * Assign passed readonly mode and config to relevant class properties\n   * @param readonly - read-only mode flag\n   * @param config - user config for Tool\n   */\n  constructor(t, n) {\n    this.config = n, this.readOnly = t;\n  }\n  /**\n   * Renders ul wrapper for list\n   * @param isRoot - boolean variable that represents level of the wrappre (root or childList)\n   * @returns - created html ul element\n   */\n  renderWrapper(t) {\n    let n;\n    return t === !0 ? (n = c.make(\"ul\", [f.CSS.wrapper, f.CSS.checklist]), n.addEventListener(\"click\", (r) => {\n      const i = r.target;\n      if (i) {\n        const a = i.closest(`.${f.CSS.checkboxContainer}`);\n        a && a.contains(i) && this.toggleCheckbox(a);\n      }\n    })) : n = c.make(\"ul\", [f.CSS.checklist, f.CSS.itemChildren]), n;\n  }\n  /**\n   * Redners list item element\n   * @param content - content used in list item rendering\n   * @param meta - meta of the list item used in rendering of the checklist\n   * @returns - created html list item element\n   */\n  renderItem(t, n) {\n    const r = c.make(\"li\", [f.CSS.item, f.CSS.item]), i = c.make(\"div\", f.CSS.itemContent, {\n      innerHTML: t,\n      contentEditable: (!this.readOnly).toString()\n    }), a = c.make(\"span\", f.CSS.checkbox), l = c.make(\"div\", f.CSS.checkboxContainer);\n    return n.checked === !0 && l.classList.add(f.CSS.itemChecked), a.innerHTML = Ct, l.appendChild(a), r.appendChild(l), r.appendChild(i), r;\n  }\n  /**\n   * Return the item content\n   * @param item - item wrapper (<li>)\n   * @returns - item content string\n   */\n  getItemContent(t) {\n    const n = t.querySelector(`.${f.CSS.itemContent}`);\n    return !n || c.isEmpty(n) ? \"\" : n.innerHTML;\n  }\n  /**\n   * Return meta object of certain element\n   * @param item - will be returned meta information of this item\n   * @returns Item meta object\n   */\n  getItemMeta(t) {\n    const n = t.querySelector(`.${f.CSS.checkboxContainer}`);\n    return {\n      checked: n ? n.classList.contains(f.CSS.itemChecked) : !1\n    };\n  }\n  /**\n   * Returns default item meta used on creation of the new item\n   */\n  composeDefaultMeta() {\n    return { checked: !1 };\n  }\n  /**\n   * Toggle checklist item state\n   * @param checkbox - checkbox element to be toggled\n   */\n  toggleCheckbox(t) {\n    t.classList.toggle(f.CSS.itemChecked), t.classList.add(f.CSS.noHover), t.addEventListener(\"mouseleave\", () => this.removeSpecialHoverBehavior(t), { once: !0 });\n  }\n  /**\n   * Removes class responsible for special hover behavior on an item\n   * @param el - item wrapper\n   */\n  removeSpecialHoverBehavior(t) {\n    t.classList.remove(f.CSS.noHover);\n  }\n}\nfunction U(e, t = \"after\") {\n  const n = [];\n  let r;\n  function i(a) {\n    switch (t) {\n      case \"after\":\n        return a.nextElementSibling;\n      case \"before\":\n        return a.previousElementSibling;\n    }\n  }\n  for (r = i(e); r !== null; )\n    n.push(r), r = i(r);\n  return n.length !== 0 ? n : null;\n}\nfunction y(e, t = !0) {\n  let n = e;\n  return e.classList.contains(m.item) && (n = e.querySelector(`.${m.itemChildren}`)), n === null ? [] : t ? Array.from(n.querySelectorAll(`:scope > .${m.item}`)) : Array.from(n.querySelectorAll(`.${m.item}`));\n}\nfunction lr(e) {\n  return e.nextElementSibling === null;\n}\nfunction sr(e) {\n  return e.querySelector(`.${m.itemChildren}`) !== null;\n}\nfunction C(e) {\n  return e.querySelector(`.${m.itemChildren}`);\n}\nfunction z(e) {\n  let t = e;\n  e.classList.contains(m.item) && (t = C(e)), t !== null && y(t).length === 0 && t.remove();\n}\nfunction N(e) {\n  return e.querySelector(`.${m.itemContent}`);\n}\nfunction E(e, t = !0) {\n  const n = N(e);\n  n && P.focus(n, t);\n}\nclass K {\n  /**\n   * Getter method to get current item\n   * @returns current list item or null if caret position is not undefined\n   */\n  get currentItem() {\n    const t = window.getSelection();\n    if (!t)\n      return null;\n    let n = t.anchorNode;\n    return !n || (O(n) || (n = n.parentNode), !n) || !O(n) ? null : n.closest(`.${m.item}`);\n  }\n  /**\n   * Method that returns nesting level of the current item, null if there is no selection\n   */\n  get currentItemLevel() {\n    const t = this.currentItem;\n    if (t === null)\n      return null;\n    let n = t.parentNode, r = 0;\n    for (; n !== null && n !== this.listWrapper; )\n      O(n) && n.classList.contains(m.item) && (r += 1), n = n.parentNode;\n    return r + 1;\n  }\n  /**\n   * Assign all passed params and renderer to relevant class properties\n   * @param params - tool constructor options\n   * @param params.data - previously saved data\n   * @param params.config - user config for Tool\n   * @param params.api - Editor.js API\n   * @param params.readOnly - read-only mode flag\n   * @param renderer - renderer instance initialized in tool class\n   */\n  constructor({ data: t, config: n, api: r, readOnly: i, block: a }, l) {\n    this.config = n, this.data = t, this.readOnly = i, this.api = r, this.block = a, this.renderer = l;\n  }\n  /**\n   * Function that is responsible for rendering list with contents\n   * @returns Filled with content wrapper element of the list\n   */\n  render() {\n    return this.listWrapper = this.renderer.renderWrapper(!0), this.data.items.length ? this.appendItems(this.data.items, this.listWrapper) : this.appendItems(\n      [\n        {\n          content: \"\",\n          meta: {},\n          items: []\n        }\n      ],\n      this.listWrapper\n    ), this.readOnly || this.listWrapper.addEventListener(\n      \"keydown\",\n      (t) => {\n        switch (t.key) {\n          case \"Enter\":\n            this.enterPressed(t);\n            break;\n          case \"Backspace\":\n            this.backspace(t);\n            break;\n          case \"Tab\":\n            t.shiftKey ? this.shiftTab(t) : this.addTab(t);\n            break;\n        }\n      },\n      !1\n    ), \"start\" in this.data.meta && this.data.meta.start !== void 0 && this.changeStartWith(this.data.meta.start), \"counterType\" in this.data.meta && this.data.meta.counterType !== void 0 && this.changeCounters(this.data.meta.counterType), this.listWrapper;\n  }\n  /**\n   * Function that is responsible for list content saving\n   * @param wrapper - optional argument wrapper\n   * @returns whole list saved data if wrapper not passes, otherwise will return data of the passed wrapper\n   */\n  save(t) {\n    const n = t ?? this.listWrapper, r = (l) => y(l).map((o) => {\n      const d = C(o), u = this.renderer.getItemContent(o), p = this.renderer.getItemMeta(o), g = d ? r(d) : [];\n      return {\n        content: u,\n        meta: p,\n        items: g\n      };\n    }), i = n ? r(n) : [];\n    let a = {\n      style: this.data.style,\n      meta: {},\n      items: i\n    };\n    return this.data.style === \"ordered\" && (a.meta = {\n      start: this.data.meta.start,\n      counterType: this.data.meta.counterType\n    }), a;\n  }\n  /**\n   * On paste sanitzation config. Allow only tags that are allowed in the Tool.\n   * @returns - config that determines tags supposted by paste handler\n   * @todo - refactor and move to list instance\n   */\n  static get pasteConfig() {\n    return {\n      tags: [\"OL\", \"UL\", \"LI\"]\n    };\n  }\n  /**\n   * Method that specified hot to merge two List blocks.\n   * Called by Editor.js by backspace at the beginning of the Block\n   *\n   * Content of the first item of the next List would be merged with deepest item in current list\n   * Other items of the next List would be appended to the current list without any changes in nesting levels\n   * @param data - data of the second list to be merged with current\n   */\n  merge(t) {\n    const n = this.block.holder.querySelectorAll(`.${m.item}`), r = n[n.length - 1], i = N(r);\n    if (r === null || i === null || (i.insertAdjacentHTML(\"beforeend\", t.items[0].content), this.listWrapper === void 0))\n      return;\n    const a = y(this.listWrapper);\n    if (a.length === 0)\n      return;\n    const l = a[a.length - 1];\n    let s = C(l);\n    const o = t.items.shift();\n    o !== void 0 && (o.items.length !== 0 && (s === null && (s = this.renderer.renderWrapper(!1)), this.appendItems(o.items, s)), t.items.length > 0 && this.appendItems(t.items, this.listWrapper));\n  }\n  /**\n   * On paste callback that is fired from Editor.\n   * @param event - event with pasted data\n   * @todo - refactor and move to list instance\n   */\n  onPaste(t) {\n    const n = t.detail.data;\n    this.data = this.pasteHandler(n);\n    const r = this.listWrapper;\n    r && r.parentNode && r.parentNode.replaceChild(this.render(), r);\n  }\n  /**\n   * Handle UL, OL and LI tags paste and returns List data\n   * @param element - html element that contains whole list\n   * @todo - refactor and move to list instance\n   */\n  pasteHandler(t) {\n    const { tagName: n } = t;\n    let r = \"unordered\", i;\n    switch (n) {\n      case \"OL\":\n        r = \"ordered\", i = \"ol\";\n        break;\n      case \"UL\":\n      case \"LI\":\n        r = \"unordered\", i = \"ul\";\n    }\n    const a = {\n      style: r,\n      meta: {},\n      items: []\n    };\n    r === \"ordered\" && (this.data.meta.counterType = \"numeric\", this.data.meta.start = 1);\n    const l = (s) => Array.from(s.querySelectorAll(\":scope > li\")).map((d) => {\n      const u = d.querySelector(`:scope > ${i}`), p = u ? l(u) : [];\n      return {\n        content: d.innerHTML ?? \"\",\n        meta: {},\n        items: p\n      };\n    });\n    return a.items = l(t), a;\n  }\n  /**\n   * Changes ordered list start property value\n   * @param index - new value of the start property\n   */\n  changeStartWith(t) {\n    this.listWrapper.style.setProperty(\"counter-reset\", `item ${t - 1}`), this.data.meta.start = t;\n  }\n  /**\n   * Changes ordered list counterType property value\n   * @param counterType - new value of the counterType value\n   */\n  changeCounters(t) {\n    this.listWrapper.style.setProperty(\"--list-counter-type\", t), this.data.meta.counterType = t;\n  }\n  /**\n   * Handles Enter keypress\n   * @param event - keydown\n   */\n  enterPressed(t) {\n    var s;\n    const n = this.currentItem;\n    if (t.stopPropagation(), t.preventDefault(), t.isComposing || n === null)\n      return;\n    const r = ((s = this.renderer) == null ? void 0 : s.getItemContent(n).trim().length) === 0, i = n.parentNode === this.listWrapper, a = n.previousElementSibling === null, l = this.api.blocks.getCurrentBlockIndex();\n    if (i && r)\n      if (lr(n) && !sr(n)) {\n        a ? this.convertItemToDefaultBlock(l, !0) : this.convertItemToDefaultBlock();\n        return;\n      } else {\n        this.splitList(n);\n        return;\n      }\n    else if (r) {\n      this.unshiftItem(n);\n      return;\n    } else\n      this.splitItem(n);\n  }\n  /**\n   * Handle backspace\n   * @param event - keydown\n   */\n  backspace(t) {\n    var r;\n    const n = this.currentItem;\n    if (n !== null && P.isCaretAtStartOfInput(n) && ((r = window.getSelection()) == null ? void 0 : r.isCollapsed) !== !1) {\n      if (t.stopPropagation(), n.parentNode === this.listWrapper && n.previousElementSibling === null) {\n        this.convertFirstItemToDefaultBlock();\n        return;\n      }\n      t.preventDefault(), this.mergeItemWithPrevious(n);\n    }\n  }\n  /**\n   * Reduce indentation for current item\n   * @param event - keydown\n   */\n  shiftTab(t) {\n    t.stopPropagation(), t.preventDefault(), this.currentItem !== null && this.unshiftItem(this.currentItem);\n  }\n  /**\n   * Decrease indentation of the passed item\n   * @param item - list item to be unshifted\n   */\n  unshiftItem(t) {\n    if (!t.parentNode || !O(t.parentNode))\n      return;\n    const n = t.parentNode.closest(`.${m.item}`);\n    if (!n)\n      return;\n    let r = C(t);\n    if (t.parentElement === null)\n      return;\n    const i = U(t);\n    i !== null && (r === null && (r = this.renderer.renderWrapper(!1)), i.forEach((a) => {\n      r.appendChild(a);\n    }), t.appendChild(r)), n.after(t), E(t, !1), z(n);\n  }\n  /**\n   * Method that is used for list splitting and moving trailing items to the new separated list\n   * @param item - current item html element\n   */\n  splitList(t) {\n    const n = y(t), r = this.block, i = this.api.blocks.getCurrentBlockIndex();\n    if (n.length !== 0) {\n      const o = n[0];\n      this.unshiftItem(o), E(t, !1);\n    }\n    if (t.previousElementSibling === null && t.parentNode === this.listWrapper) {\n      this.convertItemToDefaultBlock(i);\n      return;\n    }\n    const a = U(t);\n    if (a === null)\n      return;\n    const l = this.renderer.renderWrapper(!0);\n    a.forEach((o) => {\n      l.appendChild(o);\n    });\n    const s = this.save(l);\n    s.meta.start = this.data.style == \"ordered\" ? 1 : void 0, this.api.blocks.insert(r == null ? void 0 : r.name, s, this.config, i + 1), this.convertItemToDefaultBlock(i + 1), l.remove();\n  }\n  /**\n   * Method that is used for splitting item content and moving trailing content to the new sibling item\n   * @param currentItem - current item html element\n   */\n  splitItem(t) {\n    const [n, r] = P.getCaretNodeAndOffset();\n    if (n === null)\n      return;\n    const i = N(t);\n    let a;\n    i === null ? a = \"\" : a = P.getContenteditableSlice(i, n, r, \"right\", !0);\n    const l = C(t), s = this.renderItem(a);\n    t == null || t.after(s), l && s.appendChild(l), E(s);\n  }\n  /**\n   * Method that is used for merging current item with previous one\n   * Content of the current item would be appended to the previous item\n   * Current item children would not change nesting level\n   * @param item - current item html element\n   */\n  mergeItemWithPrevious(t) {\n    const n = t.previousElementSibling, r = t.parentNode;\n    if (r === null || !O(r))\n      return;\n    const i = r.closest(`.${m.item}`);\n    if (!n && !i || n && !O(n))\n      return;\n    let a;\n    if (n) {\n      const p = y(n, !1);\n      p.length !== 0 && p.length !== 0 ? a = p[p.length - 1] : a = n;\n    } else\n      a = i;\n    const l = this.renderer.getItemContent(t);\n    if (!a)\n      return;\n    E(a, !1);\n    const s = N(a);\n    if (s === null)\n      return;\n    s.insertAdjacentHTML(\"beforeend\", l);\n    const o = y(t);\n    if (o.length === 0) {\n      t.remove(), z(a);\n      return;\n    }\n    const d = n || i, u = C(d) ?? this.renderer.renderWrapper(!1);\n    n ? o.forEach((p) => {\n      u.appendChild(p);\n    }) : o.forEach((p) => {\n      u.prepend(p);\n    }), C(d) === null && a.appendChild(u), t.remove();\n  }\n  /**\n   * Add indentation to current item\n   * @param event - keydown\n   */\n  addTab(t) {\n    var a;\n    t.stopPropagation(), t.preventDefault();\n    const n = this.currentItem;\n    if (!n)\n      return;\n    if (((a = this.config) == null ? void 0 : a.maxLevel) !== void 0) {\n      const l = this.currentItemLevel;\n      if (l !== null && l === this.config.maxLevel)\n        return;\n    }\n    const r = n.previousSibling;\n    if (r === null || !O(r))\n      return;\n    const i = C(r);\n    if (i)\n      i.appendChild(n), y(n).forEach((s) => {\n        i.appendChild(s);\n      });\n    else {\n      const l = this.renderer.renderWrapper(!1);\n      l.appendChild(n), y(n).forEach((o) => {\n        l.appendChild(o);\n      }), r.appendChild(l);\n    }\n    z(n), E(n, !1);\n  }\n  /**\n   * Convert current item to default block with passed index\n   * @param newBloxkIndex - optional parameter represents index, where would be inseted default block\n   * @param removeList - optional parameter, that represents condition, if List should be removed\n   */\n  convertItemToDefaultBlock(t, n) {\n    let r;\n    const i = this.currentItem, a = i !== null ? this.renderer.getItemContent(i) : \"\";\n    n === !0 && this.api.blocks.delete(), t !== void 0 ? r = this.api.blocks.insert(void 0, { text: a }, void 0, t) : r = this.api.blocks.insert(), i == null || i.remove(), this.api.caret.setToBlock(r, \"start\");\n  }\n  /**\n   * Convert first item of the list to default block\n   * This method could be called when backspace button pressed at start of the first item of the list\n   * First item of the list would be converted to the paragraph and first item children would be unshifted\n   */\n  convertFirstItemToDefaultBlock() {\n    const t = this.currentItem;\n    if (t === null)\n      return;\n    const n = y(t);\n    if (n.length !== 0) {\n      const l = n[0];\n      this.unshiftItem(l), E(t);\n    }\n    const r = U(t), i = this.api.blocks.getCurrentBlockIndex(), a = r === null;\n    this.convertItemToDefaultBlock(i, a);\n  }\n  /**\n   * Method that calls render function of the renderer with a necessary item meta cast\n   * @param itemContent - content to be rendered in new item\n   * @param meta - meta used in list item rendering\n   * @returns html element of the rendered item\n   */\n  renderItem(t, n) {\n    const r = n ?? this.renderer.composeDefaultMeta();\n    switch (!0) {\n      case this.renderer instanceof v:\n        return this.renderer.renderItem(t, r);\n      case this.renderer instanceof b:\n        return this.renderer.renderItem(t, r);\n      default:\n        return this.renderer.renderItem(t, r);\n    }\n  }\n  /**\n   * Renders children list\n   * @param items - list data used in item rendering\n   * @param parentElement - where to append passed items\n   */\n  appendItems(t, n) {\n    t.forEach((r) => {\n      var a;\n      const i = this.renderItem(r.content, r.meta);\n      if (n.appendChild(i), r.items.length) {\n        const l = (a = this.renderer) == null ? void 0 : a.renderWrapper(!1);\n        this.appendItems(r.items, l), i.appendChild(l);\n      }\n    });\n  }\n}\nconst I = {\n  wrapper: `${h}-start-with-field`,\n  input: `${h}-start-with-field__input`,\n  startWithElementWrapperInvalid: `${h}-start-with-field--invalid`\n};\nfunction or(e, { value: t, placeholder: n, attributes: r, sanitize: i }) {\n  const a = c.make(\"div\", I.wrapper), l = c.make(\"input\", I.input, {\n    placeholder: n,\n    /**\n     * Used to prevent focusing on the input by Tab key\n     * (Popover in the Toolbar lays below the blocks,\n     * so Tab in the last block will focus this hidden input if this property is not set)\n     */\n    tabIndex: -1,\n    /**\n     * Value of the start property, if it is not specified, then it is set to one\n     */\n    value: t\n  });\n  for (const s in r)\n    l.setAttribute(s, r[s]);\n  return a.appendChild(l), l.addEventListener(\"input\", () => {\n    i !== void 0 && (l.value = i(l.value));\n    const s = l.checkValidity();\n    !s && !a.classList.contains(I.startWithElementWrapperInvalid) && a.classList.add(I.startWithElementWrapperInvalid), s && a.classList.contains(I.startWithElementWrapperInvalid) && a.classList.remove(I.startWithElementWrapperInvalid), s && e(l.value);\n  }), a;\n}\nconst L = /* @__PURE__ */ new Map([\n  /**\n   * Value that represents default arabic numbers for counters\n   */\n  [\"Numeric\", \"numeric\"],\n  /**\n   * Value that represents lower roman numbers for counteres\n   */\n  [\"Lower Roman\", \"lower-roman\"],\n  /**\n   * Value that represents upper roman numbers for counters\n   */\n  [\"Upper Roman\", \"upper-roman\"],\n  /**\n   * Value that represents lower alpha characters for counters\n   */\n  [\"Lower Alpha\", \"lower-alpha\"],\n  /**\n   * Value that represents upper alpha characters for counters\n   */\n  [\"Upper Alpha\", \"upper-alpha\"]\n]), He = /* @__PURE__ */ new Map([\n  /**\n   * Value that represents Icon for Numeric counter type\n   */\n  [\"numeric\", St],\n  /**\n   * Value that represents Icon for Lower Roman counter type\n   */\n  [\"lower-roman\", Ot],\n  /**\n   * Value that represents Icon for Upper Roman counter type\n   */\n  [\"upper-roman\", kt],\n  /**\n   * Value that represents Icon for Lower Alpha counter type\n   */\n  [\"lower-alpha\", Et],\n  /**\n   * Value that represents Icon for Upper Alpha counter type\n   */\n  [\"upper-alpha\", _t]\n]);\nfunction ur(e) {\n  return e.replace(/\\D+/g, \"\");\n}\nfunction cr(e) {\n  return typeof e.items[0] == \"string\";\n}\nfunction dr(e) {\n  return !(\"meta\" in e);\n}\nfunction fr(e) {\n  return typeof e.items[0] != \"string\" && \"text\" in e.items[0] && \"checked\" in e.items[0] && typeof e.items[0].text == \"string\" && typeof e.items[0].checked == \"boolean\";\n}\nfunction pr(e) {\n  const t = [];\n  return cr(e) ? (e.items.forEach((n) => {\n    t.push({\n      content: n,\n      meta: {},\n      items: []\n    });\n  }), {\n    style: e.style,\n    meta: {},\n    items: t\n  }) : fr(e) ? (e.items.forEach((n) => {\n    t.push({\n      content: n.text,\n      meta: {\n        checked: n.checked\n      },\n      items: []\n    });\n  }), {\n    style: \"checklist\",\n    meta: {},\n    items: t\n  }) : dr(e) ? {\n    style: e.style,\n    meta: {},\n    items: e.items\n  } : e;\n}\nclass G {\n  /**\n   * Notify core that read-only mode is supported\n   */\n  static get isReadOnlySupported() {\n    return !0;\n  }\n  /**\n   * Allow to use native Enter behaviour\n   */\n  static get enableLineBreaks() {\n    return !0;\n  }\n  /**\n   * Get Tool toolbox settings\n   * icon - Tool icon's SVG\n   * title - title to show in toolbox\n   */\n  static get toolbox() {\n    return [\n      {\n        icon: $e,\n        title: \"Unordered List\",\n        data: {\n          style: \"unordered\"\n        }\n      },\n      {\n        icon: Be,\n        title: \"Ordered List\",\n        data: {\n          style: \"ordered\"\n        }\n      },\n      {\n        icon: Ae,\n        title: \"Checklist\",\n        data: {\n          style: \"checklist\"\n        }\n      }\n    ];\n  }\n  /**\n   * On paste sanitzation config. Allow only tags that are allowed in the Tool.\n   * @returns - paste config object used in editor\n   */\n  static get pasteConfig() {\n    return {\n      tags: [\"OL\", \"UL\", \"LI\"]\n    };\n  }\n  /**\n   * Convert from text to list with import and export list to text\n   */\n  static get conversionConfig() {\n    return {\n      export: (t) => G.joinRecursive(t),\n      import: (t, n) => ({\n        meta: {},\n        items: [\n          {\n            content: t,\n            meta: {},\n            items: []\n          }\n        ],\n        style: (n == null ? void 0 : n.defaultStyle) !== void 0 ? n.defaultStyle : \"unordered\"\n      })\n    };\n  }\n  /**\n   * Get list style name\n   */\n  get listStyle() {\n    return this.data.style || this.defaultListStyle;\n  }\n  /**\n   * Set list style\n   * @param style - new style to set\n   */\n  set listStyle(t) {\n    var r;\n    this.data.style = t, this.changeTabulatorByStyle();\n    const n = this.list.render();\n    (r = this.listElement) == null || r.replaceWith(n), this.listElement = n;\n  }\n  /**\n   * Render plugin`s main Element and fill it with saved data\n   * @param params - tool constructor options\n   * @param params.data - previously saved data\n   * @param params.config - user config for Tool\n   * @param params.api - Editor.js API\n   * @param params.readOnly - read-only mode flag\n   */\n  constructor({ data: t, config: n, api: r, readOnly: i, block: a }) {\n    var s;\n    this.api = r, this.readOnly = i, this.config = n, this.block = a, this.defaultListStyle = ((s = this.config) == null ? void 0 : s.defaultStyle) || \"unordered\";\n    const l = {\n      style: this.defaultListStyle,\n      meta: {},\n      items: []\n    };\n    this.data = Object.keys(t).length ? pr(t) : l, this.listStyle === \"ordered\" && this.data.meta.counterType === void 0 && (this.data.meta.counterType = \"numeric\"), this.changeTabulatorByStyle();\n  }\n  /**\n   * Convert from list to text for conversionConfig\n   * @param data - current data of the list\n   * @returns - string of the recursively merged contents of the items of the list\n   */\n  static joinRecursive(t) {\n    return t.items.map((n) => `${n.content} ${G.joinRecursive(n)}`).join(\"\");\n  }\n  /**\n   * Function that is responsible for content rendering\n   * @returns rendered list wrapper with all contents\n   */\n  render() {\n    return this.listElement = this.list.render(), this.listElement;\n  }\n  /**\n   * Function that is responsible for content saving\n   * @returns formatted content used in editor\n   */\n  save() {\n    return this.data = this.list.save(), this.data;\n  }\n  /**\n   * Function that is responsible for mergind two lists into one\n   * @param data - data of the next standing list, that should be merged with current\n   */\n  merge(t) {\n    this.list.merge(t);\n  }\n  /**\n   * Creates Block Tune allowing to change the list style\n   * @returns array of tune configs\n   */\n  renderSettings() {\n    const t = [\n      {\n        label: this.api.i18n.t(\"Unordered\"),\n        icon: $e,\n        closeOnActivate: !0,\n        isActive: this.listStyle == \"unordered\",\n        onActivate: () => {\n          this.listStyle = \"unordered\";\n        }\n      },\n      {\n        label: this.api.i18n.t(\"Ordered\"),\n        icon: Be,\n        closeOnActivate: !0,\n        isActive: this.listStyle == \"ordered\",\n        onActivate: () => {\n          this.listStyle = \"ordered\";\n        }\n      },\n      {\n        label: this.api.i18n.t(\"Checklist\"),\n        icon: Ae,\n        closeOnActivate: !0,\n        isActive: this.listStyle == \"checklist\",\n        onActivate: () => {\n          this.listStyle = \"checklist\";\n        }\n      }\n    ];\n    if (this.listStyle === \"ordered\") {\n      const n = or(\n        (a) => this.changeStartWith(Number(a)),\n        {\n          value: String(this.data.meta.start ?? 1),\n          placeholder: \"\",\n          attributes: {\n            required: \"true\"\n          },\n          sanitize: (a) => ur(a)\n        }\n      ), r = [\n        {\n          label: this.api.i18n.t(\"Start with\"),\n          icon: It,\n          children: {\n            items: [\n              {\n                element: n,\n                // @ts-expect-error ts(2820) can not use PopoverItem enum from editor.js types\n                type: \"html\"\n              }\n            ]\n          }\n        }\n      ], i = {\n        label: this.api.i18n.t(\"Counter type\"),\n        icon: He.get(this.data.meta.counterType),\n        children: {\n          items: []\n        }\n      };\n      L.forEach((a, l) => {\n        i.children.items.push({\n          title: this.api.i18n.t(l),\n          icon: He.get(L.get(l)),\n          isActive: this.data.meta.counterType === L.get(l),\n          closeOnActivate: !0,\n          onActivate: () => {\n            this.changeCounters(L.get(l));\n          }\n        });\n      }), t.push({ type: \"separator\" }, ...r, i);\n    }\n    return t;\n  }\n  /**\n   * On paste callback that is fired from Editor.\n   * @param event - event with pasted data\n   */\n  onPaste(t) {\n    const { tagName: n } = t.detail.data;\n    switch (n) {\n      case \"OL\":\n        this.listStyle = \"ordered\";\n        break;\n      case \"UL\":\n      case \"LI\":\n        this.listStyle = \"unordered\";\n    }\n    this.list.onPaste(t);\n  }\n  /**\n   * Handle UL, OL and LI tags paste and returns List data\n   * @param element - html element that contains whole list\n   */\n  pasteHandler(t) {\n    return this.list.pasteHandler(t);\n  }\n  /**\n   * Changes ordered list counterType property value\n   * @param counterType - new value of the counterType value\n   */\n  changeCounters(t) {\n    var n;\n    (n = this.list) == null || n.changeCounters(t), this.data.meta.counterType = t;\n  }\n  /**\n   * Changes ordered list start property value\n   * @param index - new value of the start property\n   */\n  changeStartWith(t) {\n    var n;\n    (n = this.list) == null || n.changeStartWith(t), this.data.meta.start = t;\n  }\n  /**\n   * This method allows changing tabulator respectfully to passed style\n   */\n  changeTabulatorByStyle() {\n    switch (this.listStyle) {\n      case \"ordered\":\n        this.list = new K(\n          {\n            data: this.data,\n            readOnly: this.readOnly,\n            api: this.api,\n            config: this.config,\n            block: this.block\n          },\n          new v(this.readOnly, this.config)\n        );\n        break;\n      case \"unordered\":\n        this.list = new K(\n          {\n            data: this.data,\n            readOnly: this.readOnly,\n            api: this.api,\n            config: this.config,\n            block: this.block\n          },\n          new b(this.readOnly, this.config)\n        );\n        break;\n      case \"checklist\":\n        this.list = new K(\n          {\n            data: this.data,\n            readOnly: this.readOnly,\n            api: this.api,\n            config: this.config,\n            block: this.block\n          },\n          new f(this.readOnly, this.config)\n        );\n        break;\n    }\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@editorjs/list/dist/editorjs-list.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@editorjs/raw/dist/raw.mjs":
/*!*************************************************!*\
  !*** ./node_modules/@editorjs/raw/dist/raw.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ s)\n/* harmony export */ });\n(function(){\"use strict\";try{if(typeof document<\"u\"){var e=document.createElement(\"style\");e.appendChild(document.createTextNode(\".ce-rawtool__textarea{min-height:200px;resize:vertical;border-radius:8px;border:0;background-color:#1e2128;font-family:Menlo,Monaco,Consolas,Courier New,monospace;font-size:12px;line-height:1.6;letter-spacing:-.2px;color:#a1a7b6;overscroll-behavior:contain}\")),document.head.appendChild(e)}}catch(o){console.error(\"vite-plugin-css-injected-by-js\",o)}})();\nconst a = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16.6954 5C17.912 5 18.8468 6.07716 18.6755 7.28165L17.426 16.0659C17.3183 16.8229 16.7885 17.4522 16.061 17.6873L12.6151 18.8012C12.2152 18.9304 11.7848 18.9304 11.3849 18.8012L7.93898 17.6873C7.21148 17.4522 6.6817 16.8229 6.57403 16.0659L5.32454 7.28165C5.15322 6.07716 6.088 5 7.30461 5H16.6954Z\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 8.4H9L9.42857 11.7939H14.5714L14.3571 13.2788L14.1429 14.7636L12 15.4L9.85714 14.7636L9.77143 14.3394\"/></svg>';\n/**\n * Raw HTML Tool for CodeX Editor\n *\n * @author CodeX (team@codex.so)\n * @copyright CodeX 2018\n * @license The MIT License (MIT)\n */\nclass s {\n  /**\n   * Notify core that read-only mode is supported\n   *\n   * @returns {boolean}\n   */\n  static get isReadOnlySupported() {\n    return !0;\n  }\n  /**\n   * Should this tool be displayed at the Editor's Toolbox\n   *\n   * @returns {boolean}\n   * @public\n   */\n  static get displayInToolbox() {\n    return !0;\n  }\n  /**\n   * Allow to press Enter inside the RawTool textarea\n   *\n   * @returns {boolean}\n   * @public\n   */\n  static get enableLineBreaks() {\n    return !0;\n  }\n  /**\n   * Get Tool toolbox settings\n   * icon - Tool icon's SVG\n   * title - title to show in toolbox\n   *\n   * @returns {{icon: string, title: string}}\n   */\n  static get toolbox() {\n    return {\n      icon: a,\n      title: \"Raw HTML\"\n    };\n  }\n  /**\n   * @typedef {object} RawData — plugin saved data\n   * @param {string} html - previously saved HTML code\n   * @property\n   */\n  /**\n   * Render plugin`s main Element and fill it with saved data\n   *\n   * @param {RawData} data — previously saved HTML data\n   * @param {object} config - user config for Tool\n   * @param {object} api - CodeX Editor API\n   * @param {boolean} readOnly - read-only mode flag\n   */\n  constructor({ data: t, config: e, api: r, readOnly: i }) {\n    this.api = r, this.readOnly = i, this.placeholder = r.i18n.t(e.placeholder || s.DEFAULT_PLACEHOLDER), this.CSS = {\n      baseClass: this.api.styles.block,\n      input: this.api.styles.input,\n      wrapper: \"ce-rawtool\",\n      textarea: \"ce-rawtool__textarea\"\n    }, this.data = {\n      html: t.html || \"\"\n    }, this.textarea = null, this.resizeDebounce = null;\n  }\n  /**\n   * Return Tool's view\n   *\n   * @returns {HTMLDivElement} this.element - RawTool's wrapper\n   * @public\n   */\n  render() {\n    const t = document.createElement(\"div\"), e = 100;\n    return this.textarea = document.createElement(\"textarea\"), t.classList.add(this.CSS.baseClass, this.CSS.wrapper), this.textarea.classList.add(this.CSS.textarea, this.CSS.input), this.textarea.textContent = this.data.html, this.textarea.placeholder = this.placeholder, this.readOnly ? this.textarea.disabled = !0 : this.textarea.addEventListener(\"input\", () => {\n      this.onInput();\n    }), t.appendChild(this.textarea), setTimeout(() => {\n      this.resize();\n    }, e), t;\n  }\n  /**\n   * Extract Tool's data from the view\n   *\n   * @param {HTMLDivElement} rawToolsWrapper - RawTool's wrapper, containing textarea with raw HTML code\n   * @returns {RawData} - raw HTML code\n   * @public\n   */\n  save(t) {\n    return {\n      html: t.querySelector(\"textarea\").value\n    };\n  }\n  /**\n   * Default placeholder for RawTool's textarea\n   *\n   * @public\n   * @returns {string}\n   */\n  static get DEFAULT_PLACEHOLDER() {\n    return \"Enter HTML code\";\n  }\n  /**\n   * Automatic sanitize config\n   */\n  static get sanitize() {\n    return {\n      html: !0\n      // Allow HTML tags\n    };\n  }\n  /**\n   * Textarea change event\n   *\n   * @returns {void}\n   */\n  onInput() {\n    this.resizeDebounce && clearTimeout(this.resizeDebounce), this.resizeDebounce = setTimeout(() => {\n      this.resize();\n    }, 200);\n  }\n  /**\n   * Resize textarea to fit whole height\n   *\n   * @returns {void}\n   */\n  resize() {\n    this.textarea.style.height = \"auto\", this.textarea.style.height = this.textarea.scrollHeight + \"px\";\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@editorjs/raw/dist/raw.mjs\n");

/***/ })

};
;